{"testsmt9.k":{"model":"\nclass A {\n  x:Int\n\n  req x > 0\n}\n\nclass B extending A {\n  y:Int\n  a:A\n\n  req y = x + 1\n}\n\n","name":"testsmt9.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},0],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"y","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":0},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"x","type":"IdentExp"}},"exp1":{"ident":"y","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 TopLevelDeclarations!val!2 TopLevelDeclarations!val!1 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!2 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!1 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations))\n        (or (= x TopLevelDeclarations!val!0)\n            (= x TopLevelDeclarations!val!2)\n            (= x TopLevelDeclarations!val!1)))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  6)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun instanceOfB!1 () Int\n  4)\n(define-fun instanceOfA!0 () Int\n  2)\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-TopLevelDeclarations TopLevelDeclarations!val!1)\n  (ite (= x!1 7) (lift-B (mk-B 2438 2439 10))\n  (ite (= x!1 12) (lift-A (mk-A 450))\n  (ite (= x!1 13) (lift-TopLevelDeclarations TopLevelDeclarations!val!2)\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 4) (lift-B (mk-B 7720 7721 7))\n  (ite (= x!1 10) (lift-A (mk-A 8856))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0)))))))))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)(a Ref)))))\n(declare-sort TopLevelDeclarations)\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (x (deref-B this)))\n)\n\n; --- B:\n\n(define-fun B.y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n(define-fun B.a ((this Ref)) Ref\n  (a (deref-B this))\n)\n\n; ---------- methods: ----------\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (> (A.x this)  0)\n  )\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n    (deref-isa-A (B.a this))\n    (= (B.y this)  (+ (A.x this)  1))\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"inheritance7.k":{"model":"\nclass A {\n  x:Int\n  j:B\n\n  req x > 0\n\n  req j.yy > 10\n}\n\nclass <b> B extending A {\n  yy:Int\n}\n\nb C {\n  z:Int\n\n  fun foo(x:Int) : Int\n  {\n    return x + 1\n  }\n}\n\nbobj:C\n\nreq bobj.z = 1\n\ny:Int\n\n","name":"inheritance7.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"},"name":"j","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},0],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"j","type":"ElementValue"},"yy"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","keyword":"b","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"yy","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"b","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"operand":[{"element":"ElementValue","type":"ReturnExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]}],"type":"Expression"},"type":"ExpressionDecl"}],"ident":"foo","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"},"name":"bobj","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"bobj","type":"ElementValue"},"z"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ConstraintDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"j","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":0},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"exp":{"ident":"j","type":"IdentExp"},"ident":"yy","type":"DotExp"}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","keyword":"b","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"yy","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"b","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ReturnExp"},"type":"ExpressionDecl"}],"ident":"foo","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"ty":{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"bobj","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"exp":{"ident":"bobj","type":"IdentExp"},"ident":"z","type":"DotExp"}},"type":"ConstraintDecl"},{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)(j Ref)))))\n(declare-datatypes () ((B (mk-B (x Int)(j Ref)(yy Int)))))\n(declare-datatypes () ((C (mk-C (x Int)(j Ref)(yy Int)(z Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (bobj Ref)(y Int)))))\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (ite (deref-is-B this) (x (deref-B this))\n  (x (deref-C this))))\n)\n\n(define-fun A.j ((this Ref)) Ref\n  (ite (deref-is-A this) (j (deref-A this))\n  (ite (deref-is-B this) (j (deref-B this))\n  (j (deref-C this))))\n)\n\n; --- B:\n\n(define-fun B.yy ((this Ref)) Int\n  (ite (deref-is-B this) (yy (deref-B this))\n  (yy (deref-C this)))\n)\n\n; --- C:\n\n(define-fun C.z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.bobj ((this Ref)) Ref\n  (bobj (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations.y ((this Ref)) Int\n  (y (deref-TopLevelDeclarations this))\n)\n\n; ---------- methods: ----------\n\n; --- C:\n\n(define-fun C.foo ((this Ref)(x Int)) Int\n    (+ x 1)\n)\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (deref-isa-B (A.j this))\n    (> (A.x this)  0)\n    (> (B.yy (A.j this) ) 10)\n  )\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- C:\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (B.inv this)\n  )\n)\n\n(define-fun C.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-C this)\n    (C.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (deref-isa-C (TopLevelDeclarations.bobj this))\n    (= (C.z (TopLevelDeclarations.bobj this) ) 1)\n  )\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (C.inv.nosub instanceOfC)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"testsmt8.k":{"model":"\nclass Person {\n  age:Int\n\n  fun getAge : Int\n  {\n    age\n  }\n\n  req getAge() > 18\n}\n\nclass Employee extending Person {\n  boss:Person\n  officemate:Employee\n\n  fun avoid(p:Employee) : Bool\n  {\n    officemate != p\n  }\n\n  req boss.age > 30\n\n  req this = officemate.officemate\n\n  req avoid(boss)\n}\n\n","name":"testsmt8.k","json2":{"decls":[{"entityToken":"class","ident":"Person","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"age","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"element":"age","type":"ElementValue"},"type":"ExpressionDecl"}],"ident":"getAge","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"getAge","type":"ElementValue"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},18],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Employee","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"},"name":"boss","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Employee"],"type":"QualifiedName"}],"type":"Expression"},"name":"officemate","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"element":"officemate","type":"ElementValue"},{"element":"p","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"avoid","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Employee"],"type":"QualifiedName"}],"type":"Expression"},"name":"p","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"boss","type":"ElementValue"},"age"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},30],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"operand":[{"element":"ElementValue","type":"ThisLiteral"}],"type":"Expression"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"officemate","type":"ElementValue"},"officemate"]}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"avoid","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"boss","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"}]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Person","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"age","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"ident":"age","type":"IdentExp"},"type":"ExpressionDecl"}],"ident":"getAge","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":18},"exp1":{"args":[],"type":"FunApplExp","exp1":{"ident":"getAge","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Employee","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"boss","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Employee"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"officemate","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"NotEQ","type":"BinExp","exp2":{"ident":"p","type":"IdentExp"},"exp1":{"ident":"officemate","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"avoid","typeParams":[],"params":[{"ty":{"ident":{"names":["Employee"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"p","type":"Param"}],"type":"FunDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":30},"exp1":{"exp":{"ident":"boss","type":"IdentExp"},"ident":"age","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"exp":{"ident":"officemate","type":"IdentExp"},"ident":"officemate","type":"DotExp"},"exp1":{"type":"ThisLiteral"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"ident":"boss","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"avoid","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 TopLevelDeclarations!val!2 TopLevelDeclarations!val!3 TopLevelDeclarations!val!1 TopLevelDeclarations!val!4 TopLevelDeclarations!val!5 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!2 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!3 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!1 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!4 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!5 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations))\n        (or (= x TopLevelDeclarations!val!0)\n            (= x TopLevelDeclarations!val!2)\n            (= x TopLevelDeclarations!val!3)\n            (= x TopLevelDeclarations!val!1)\n            (= x TopLevelDeclarations!val!4)\n            (= x TopLevelDeclarations!val!5)))\n;; -----------\n(define-fun instanceOfEmployee!1 () Int\n  2)\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  3)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!8))\n(define-fun instanceOfPerson!0 () Int\n  1)\n(define-fun k!8!10 ((x!1 Int)) Any\n  (ite (= x!1 14) (lift-TopLevelDeclarations TopLevelDeclarations!val!1)\n  (ite (= x!1 2) (lift-Employee (mk-Employee 2456 4 5))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!3)\n  (ite (= x!1 1) (lift-Person (mk-Person 19))\n  (ite (= x!1 7) (lift-TopLevelDeclarations TopLevelDeclarations!val!5)\n  (ite (= x!1 8) (lift-TopLevelDeclarations TopLevelDeclarations!val!4)\n  (ite (= x!1 6) (lift-Person (mk-Person 1267))\n  (ite (= x!1 4) (lift-Person (mk-Person 31))\n  (ite (= x!1 3) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 13) (lift-TopLevelDeclarations TopLevelDeclarations!val!2)\n    (lift-Employee (mk-Employee 7738 6 2)))))))))))))\n(define-fun k!9 ((x!1 Int)) Int\n  (ite (= x!1 0) 0\n  (ite (= x!1 2) 2\n  (ite (= x!1 1) 1\n  (ite (= x!1 4) 4\n  (ite (= x!1 3) 3\n  (ite (= x!1 5) 5\n    6)))))))\n(define-fun k!8 ((x!1 Int)) Any\n  (k!8!10 (k!9 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Person (mk-Person (age Int)))))\n(declare-datatypes () ((Employee (mk-Employee (age Int)(boss Ref)(officemate Ref)))))\n(declare-sort TopLevelDeclarations)\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-Person (sel-Person Person))\n  (lift-Employee (sel-Employee Employee))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-Person ((this Ref)) Bool\n  (is-lift-Person (deref this))\n)\n\n(define-fun deref-Person ((this Ref)) Person\n  (sel-Person (deref this))\n)\n\n(define-fun deref-is-Employee ((this Ref)) Bool\n  (is-lift-Employee (deref this))\n)\n\n(define-fun deref-Employee ((this Ref)) Employee\n  (sel-Employee (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-Person ((this Ref)) Bool\n  (or\n    (deref-is-Person this)\n    (deref-is-Employee this)\n  )\n)\n\n(define-fun deref-isa-Employee ((this Ref)) Bool\n  (deref-is-Employee this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- Person:\n\n(define-fun Person.age ((this Ref)) Int\n  (ite (deref-is-Person this) (age (deref-Person this))\n  (age (deref-Employee this)))\n)\n\n; --- Employee:\n\n(define-fun Employee.boss ((this Ref)) Ref\n  (boss (deref-Employee this))\n)\n\n(define-fun Employee.officemate ((this Ref)) Ref\n  (officemate (deref-Employee this))\n)\n\n; ---------- methods: ----------\n\n; --- Person:\n\n(define-fun Person.getAge ((this Ref)) Int\n    (Person.age this) \n)\n\n; --- Employee:\n\n(define-fun Employee.avoid ((this Ref)(p Ref)) Bool\n    (not (= (Employee.officemate this)  p))\n)\n\n; ---------- invariants: ----------\n\n; --- Person:\n\n(define-fun Person.inv ((this Ref)) Bool\n  (and\n    (> (Person.getAge this ) 18)\n  )\n)\n\n(define-fun Person.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-Person this)\n    (Person.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Person this) (Person.inv this))\n))\n\n; --- Employee:\n\n(define-fun Employee.inv ((this Ref)) Bool\n  (and\n    (Person.inv this)\n    (deref-isa-Person (Employee.boss this))\n    (deref-isa-Employee (Employee.officemate this))\n    (> (Person.age (Employee.boss this) ) 30)\n    (= this (Employee.officemate (Employee.officemate this) ))\n    (Employee.avoid this (Employee.boss this) )\n  )\n)\n\n(define-fun Employee.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-Employee this)\n    (Employee.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Employee this) (Employee.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfPerson Ref)) (Person.inv.nosub instanceOfPerson)))\n(assert (exists ((instanceOfEmployee Ref)) (Employee.inv.nosub instanceOfEmployee)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"testsmt6.k":{"model":"\nclass Event {\n  id:Int\n}\n\nclass State {\n  id:Int\n}\n\nclass RocketMachine {\n  off:State\n  ready:State\n  firing:State\n  turn_on:Event\n  fire:Event\n  turn_off:Event\n\n  req off != ready && off != firing && firing != ready\n\n  fun move(s:State,e:Event) : State\n  {\n    if s = off && e = turn_on then\n      ready\n    else\n      if s = ready && e = fire then\n        firing\n      else\n        if s = firing && e = turn_off then\n          off\n        else\n          s\n  }\n\n  req move(off,turn_on) = ready\n\n  req move(ready,fire) = firing\n\n  req move(firing,turn_off) = off\n}\n\n","name":"testsmt6.k","json2":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"id","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"State","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"id","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"RocketMachine","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["State"],"type":"QualifiedName"}],"type":"Expression"},"name":"off","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["State"],"type":"QualifiedName"}],"type":"Expression"},"name":"ready","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["State"],"type":"QualifiedName"}],"type":"Expression"},"name":"firing","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"turn_on","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"fire","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"turn_off","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"element":"off","type":"ElementValue"},{"element":"ready","type":"ElementValue"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"element":"off","type":"ElementValue"},{"element":"firing","type":"ElementValue"}]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"element":"firing","type":"ElementValue"},{"element":"ready","type":"ElementValue"}]}]},"type":"ConstraintDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["State"],"type":"QualifiedName"}],"type":"Expression"},"body":[{"exp":{"operand":[{"element":"ElementValue","type":"IfExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"s","type":"ElementValue"},{"element":"off","type":"ElementValue"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"e","type":"ElementValue"},{"element":"turn_on","type":"ElementValue"}]}]},{"element":"ready","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IfExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"s","type":"ElementValue"},{"element":"ready","type":"ElementValue"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"e","type":"ElementValue"},{"element":"fire","type":"ElementValue"}]}]},{"element":"firing","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IfExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"s","type":"ElementValue"},{"element":"firing","type":"ElementValue"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"e","type":"ElementValue"},{"element":"turn_off","type":"ElementValue"}]}]},{"element":"off","type":"ElementValue"},{"element":"s","type":"ElementValue"}],"type":"Expression"}],"type":"Expression"}],"type":"Expression"},"type":"ExpressionDecl"}],"ident":"move","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["State"],"type":"QualifiedName"}],"type":"Expression"},"name":"s","type":"Param"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"move","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"off","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"turn_on","type":"ElementValue"}],"type":"Expression"}]},{"element":"ready","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"move","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"ready","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"fire","type":"ElementValue"}],"type":"Expression"}]},{"element":"firing","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"move","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"firing","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"turn_off","type":"ElementValue"}],"type":"Expression"}]},{"element":"off","type":"ElementValue"}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"id","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"State","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"id","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"RocketMachine","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["State"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"off","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["State"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"ready","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["State"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"firing","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"turn_on","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"fire","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"turn_off","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"And","type":"BinExp","exp2":{"op":"NotEQ","type":"BinExp","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"ident":"firing","type":"IdentExp"}},"exp1":{"op":"And","type":"BinExp","exp2":{"op":"NotEQ","type":"BinExp","exp2":{"ident":"firing","type":"IdentExp"},"exp1":{"ident":"off","type":"IdentExp"}},"exp1":{"op":"NotEQ","type":"BinExp","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"ident":"off","type":"IdentExp"}}}},"type":"ConstraintDecl"},{"spec":[],"ty":{"ident":{"names":["State"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"body":[{"exp":{"trueBranch":{"ident":"ready","type":"IdentExp"},"falseBranch":{"trueBranch":{"ident":"firing","type":"IdentExp"},"falseBranch":{"trueBranch":{"ident":"off","type":"IdentExp"},"falseBranch":{"ident":"s","type":"IdentExp"},"type":"IfExp","cond":{"op":"And","type":"BinExp","exp2":{"op":"EQ","type":"BinExp","exp2":{"ident":"turn_off","type":"IdentExp"},"exp1":{"ident":"e","type":"IdentExp"}},"exp1":{"op":"EQ","type":"BinExp","exp2":{"ident":"firing","type":"IdentExp"},"exp1":{"ident":"s","type":"IdentExp"}}}},"type":"IfExp","cond":{"op":"And","type":"BinExp","exp2":{"op":"EQ","type":"BinExp","exp2":{"ident":"fire","type":"IdentExp"},"exp1":{"ident":"e","type":"IdentExp"}},"exp1":{"op":"EQ","type":"BinExp","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"ident":"s","type":"IdentExp"}}}},"type":"IfExp","cond":{"op":"And","type":"BinExp","exp2":{"op":"EQ","type":"BinExp","exp2":{"ident":"turn_on","type":"IdentExp"},"exp1":{"ident":"e","type":"IdentExp"}},"exp1":{"op":"EQ","type":"BinExp","exp2":{"ident":"off","type":"IdentExp"},"exp1":{"ident":"s","type":"IdentExp"}}}},"type":"ExpressionDecl"}],"ident":"move","typeParams":[],"params":[{"ty":{"ident":{"names":["State"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"s","type":"Param"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e","type":"Param"}],"type":"FunDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"args":[{"exp":{"ident":"off","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"turn_on","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"move","type":"IdentExp"}}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"firing","type":"IdentExp"},"exp1":{"args":[{"exp":{"ident":"ready","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"fire","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"move","type":"IdentExp"}}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"off","type":"IdentExp"},"exp1":{"args":[{"exp":{"ident":"firing","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"turn_off","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"move","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfEvent!0 () Int\n  0)\n(define-fun instanceOfRocketMachine!2 () Int\n  2)\n(define-fun instanceOfTopLevelDeclarations!3 () Int\n  5)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!4))\n(define-fun instanceOfState!1 () Int\n  1)\n(define-fun k!5 ((x!1 Int)) Int\n  (ite (= x!1 4) 4\n  (ite (= x!1 5) 5\n  (ite (= x!1 10) 10\n  (ite (= x!1 0) 0\n  (ite (= x!1 2) 2\n  (ite (= x!1 9) 9\n  (ite (= x!1 3) 3\n  (ite (= x!1 1) 1\n  (ite (= x!1 11) 11\n    8))))))))))\n(define-fun k!4!6 ((x!1 Int)) Any\n  (ite (= x!1 10) (lift-Event (mk-Event 16))\n  (ite (= x!1 4) (lift-State (mk-State 14))\n  (ite (= x!1 5) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 0) (lift-Event (mk-Event 6))\n  (ite (= x!1 11) (lift-Event (mk-Event 17))\n  (ite (= x!1 2) (lift-RocketMachine (mk-RocketMachine 3 8 4 9 10 11))\n  (ite (= x!1 9) (lift-Event (mk-Event 15))\n  (ite (= x!1 8) (lift-State (mk-State 13))\n  (ite (= x!1 1) (lift-State (mk-State 7))\n    (lift-State (mk-State 12))))))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (k!4!6 (k!5 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Event (mk-Event (id Int)))))\n(declare-datatypes () ((State (mk-State (id Int)))))\n(declare-datatypes () ((RocketMachine (mk-RocketMachine (off Ref)(ready Ref)(firing Ref)(turn_on Ref)(fire Ref)(turn_off Ref)))))\n(declare-sort TopLevelDeclarations)\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-Event (sel-Event Event))\n  (lift-State (sel-State State))\n  (lift-RocketMachine (sel-RocketMachine RocketMachine))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-State ((this Ref)) Bool\n  (is-lift-State (deref this))\n)\n\n(define-fun deref-State ((this Ref)) State\n  (sel-State (deref this))\n)\n\n(define-fun deref-is-RocketMachine ((this Ref)) Bool\n  (is-lift-RocketMachine (deref this))\n)\n\n(define-fun deref-RocketMachine ((this Ref)) RocketMachine\n  (sel-RocketMachine (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-State ((this Ref)) Bool\n  (deref-is-State this)\n)\n\n(define-fun deref-isa-RocketMachine ((this Ref)) Bool\n  (deref-is-RocketMachine this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- Event:\n\n(define-fun Event.id ((this Ref)) Int\n  (id (deref-Event this))\n)\n\n; --- State:\n\n(define-fun State.id ((this Ref)) Int\n  (id (deref-State this))\n)\n\n; --- RocketMachine:\n\n(define-fun RocketMachine.off ((this Ref)) Ref\n  (off (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine.ready ((this Ref)) Ref\n  (ready (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine.firing ((this Ref)) Ref\n  (firing (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine.turn_on ((this Ref)) Ref\n  (turn_on (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine.fire ((this Ref)) Ref\n  (fire (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine.turn_off ((this Ref)) Ref\n  (turn_off (deref-RocketMachine this))\n)\n\n; ---------- methods: ----------\n\n; --- RocketMachine:\n\n(define-fun RocketMachine.move ((this Ref)(s Ref)(e Ref)) Ref\n    (ite (and (= s (RocketMachine.off this) ) (= e (RocketMachine.turn_on this) )) (RocketMachine.ready this)  (ite (and (= s (RocketMachine.ready this) ) (= e (RocketMachine.fire this) )) (RocketMachine.firing this)  (ite (and (= s (RocketMachine.firing this) ) (= e (RocketMachine.turn_off this) )) (RocketMachine.off this)  s)))\n)\n\n; ---------- invariants: ----------\n\n; --- Event:\n\n(define-fun Event.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun Event.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-Event this)\n    (Event.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Event this) (Event.inv this))\n))\n\n; --- State:\n\n(define-fun State.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun State.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-State this)\n    (State.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-State this) (State.inv this))\n))\n\n; --- RocketMachine:\n\n(define-fun RocketMachine.inv ((this Ref)) Bool\n  (and\n    (deref-isa-State (RocketMachine.off this))\n    (deref-isa-State (RocketMachine.ready this))\n    (deref-isa-State (RocketMachine.firing this))\n    (deref-isa-Event (RocketMachine.turn_on this))\n    (deref-isa-Event (RocketMachine.fire this))\n    (deref-isa-Event (RocketMachine.turn_off this))\n    (and (and (not (= (RocketMachine.off this)  (RocketMachine.ready this) )) (not (= (RocketMachine.off this)  (RocketMachine.firing this) ))) (not (= (RocketMachine.firing this)  (RocketMachine.ready this) )))\n    (= (RocketMachine.move this (RocketMachine.off this)  (RocketMachine.turn_on this) ) (RocketMachine.ready this) )\n    (= (RocketMachine.move this (RocketMachine.ready this)  (RocketMachine.fire this) ) (RocketMachine.firing this) )\n    (= (RocketMachine.move this (RocketMachine.firing this)  (RocketMachine.turn_off this) ) (RocketMachine.off this) )\n  )\n)\n\n(define-fun RocketMachine.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-RocketMachine this)\n    (RocketMachine.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-RocketMachine this) (RocketMachine.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfEvent Ref)) (Event.inv.nosub instanceOfEvent)))\n(assert (exists ((instanceOfState Ref)) (State.inv.nosub instanceOfState)))\n(assert (exists ((instanceOfRocketMachine Ref)) (RocketMachine.inv.nosub instanceOfRocketMachine)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"inheritance9.k":{"model":"\nclass A {\n  a:Int = 10\n}\n\nclass B extending A {\n  b:Int\n\n  req b = a + 1\n}\n\nclass C extending B {\n  c:Int\n\n  req c = b + 1\n}\n\nclass D extending C {\n  d:Int\n\n  req d = c + 1\n}\n\nclass E {\n  a:A\n}\n\n","name":"inheritance9.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"b","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"c","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"b","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"d","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"c","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"type":"LiteralInteger","i":10},"modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"a","type":"IdentExp"}},"exp1":{"ident":"b","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"b","type":"IdentExp"}},"exp1":{"ident":"c","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"c","type":"IdentExp"}},"exp1":{"ident":"d","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfE!4 () Int\n  16)\n(define-fun instanceOfTopLevelDeclarations!5 () Int\n  17)\n(define-fun instanceOfD!3 () Int\n  8)\n(define-fun instanceOfC!2 () Int\n  5)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!6))\n(define-fun instanceOfB!1 () Int\n  3)\n(define-fun instanceOfA!0 () Int\n  2)\n(define-fun k!7 ((x!1 Int)) Int\n  (ite (= x!1 17) 17\n  (ite (= x!1 8) 8\n  (ite (= x!1 5) 5\n  (ite (= x!1 16) 16\n  (ite (= x!1 3) 3\n  (ite (= x!1 2) 2\n    18)))))))\n(define-fun k!6!8 ((x!1 Int)) Any\n  (ite (= x!1 17) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 5) (lift-C (mk-C 10 11 12))\n  (ite (= x!1 16) (lift-E (mk-E 18))\n  (ite (= x!1 2) (lift-A (mk-A 10))\n  (ite (= x!1 3) (lift-B (mk-B 10 11))\n    (lift-D (mk-D 10 11 12 13))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (k!6!8 (k!7 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)))))\n(declare-datatypes () ((D (mk-D (a Int)(b Int)(c Int)(d Int)))))\n(declare-datatypes () ((E (mk-E (a Ref)))))\n(declare-sort TopLevelDeclarations)\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-E (sel-E E))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-E ((this Ref)) Bool\n  (is-lift-E (deref this))\n)\n\n(define-fun deref-E ((this Ref)) E\n  (sel-E (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-E ((this Ref)) Bool\n  (deref-is-E this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (ite (deref-is-B this) (a (deref-B this))\n  (ite (deref-is-C this) (a (deref-C this))\n  (a (deref-D this)))))\n)\n\n; --- B:\n\n(define-fun B.b ((this Ref)) Int\n  (ite (deref-is-B this) (b (deref-B this))\n  (ite (deref-is-C this) (b (deref-C this))\n  (b (deref-D this))))\n)\n\n; --- C:\n\n(define-fun C.c ((this Ref)) Int\n  (ite (deref-is-C this) (c (deref-C this))\n  (c (deref-D this)))\n)\n\n; --- D:\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; --- E:\n\n(define-fun E.a ((this Ref)) Ref\n  (a (deref-E this))\n)\n\n; ---------- methods: ----------\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A.a this) 10)\n  )\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n    (= (B.b this)  (+ (A.a this)  1))\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- C:\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (B.inv this)\n    (= (C.c this)  (+ (B.b this)  1))\n  )\n)\n\n(define-fun C.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-C this)\n    (C.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --- D:\n\n(define-fun D.inv ((this Ref)) Bool\n  (and\n    (C.inv this)\n    (= (D.d this)  (+ (C.c this)  1))\n  )\n)\n\n(define-fun D.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-D this)\n    (D.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; --- E:\n\n(define-fun E.inv ((this Ref)) Bool\n  (and\n    (deref-isa-A (E.a this))\n  )\n)\n\n(define-fun E.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-E this)\n    (E.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-E this) (E.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (C.inv.nosub instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (D.inv.nosub instanceOfD)))\n(assert (exists ((instanceOfE Ref)) (E.inv.nosub instanceOfE)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"inheritance10.k":{"model":"\nclass A {\n  a:Int\n  b:Int\n  c:Int\n  d:Int\n  e:Int\n  f:Int\n  g:Int\n}\n\nclass B extending A\n\nclass C extending B\n\nclass D extending C\n\nclass H extending D\n\nobjectA:A\n\nreq objectA is C\n\nreq objectA.a + objectA.b + objectA.c + objectA.d + objectA.e + objectA.f = 90\n\n","name":"inheritance10.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"e","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"f","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"g","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"H","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["D"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"objectA","modifiers":[],"type":"PropertyDecl"},{"exp":{"operand":[{"element":"ElementValue","type":"TypeCastCheckExp"},"false",{"element":"objectA","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}],"type":"Expression"},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"objectA","type":"ElementValue"},"a"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"objectA","type":"ElementValue"},"b"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"objectA","type":"ElementValue"},"c"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"objectA","type":"ElementValue"},"d"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"objectA","type":"ElementValue"},"e"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"objectA","type":"ElementValue"},"f"]}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},90],"type":"Expression"}]},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"e","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"f","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"g","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"H","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["D"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"objectA","modifiers":[],"type":"PropertyDecl"},{"exp":{"ty":{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"exp":{"ident":"objectA","type":"IdentExp"},"cast":"false","type":"TypeCastCheckExp"},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":90},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"objectA","type":"IdentExp"},"ident":"f","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"objectA","type":"IdentExp"},"ident":"e","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"objectA","type":"IdentExp"},"ident":"d","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"objectA","type":"IdentExp"},"ident":"c","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"objectA","type":"IdentExp"},"ident":"b","type":"DotExp"},"exp1":{"exp":{"ident":"objectA","type":"IdentExp"},"ident":"a","type":"DotExp"}}}}}}},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((D (mk-D (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((H (mk-H (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (objectA Ref)))))\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-H (sel-H H))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-H ((this Ref)) Bool\n  (is-lift-H (deref this))\n)\n\n(define-fun deref-H ((this Ref)) H\n  (sel-H (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (or\n    (deref-is-D this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-H ((this Ref)) Bool\n  (deref-is-H this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (ite (deref-is-B this) (a (deref-B this))\n  (ite (deref-is-C this) (a (deref-C this))\n  (ite (deref-is-D this) (a (deref-D this))\n  (a (deref-H this))))))\n)\n\n(define-fun A.b ((this Ref)) Int\n  (ite (deref-is-A this) (b (deref-A this))\n  (ite (deref-is-B this) (b (deref-B this))\n  (ite (deref-is-C this) (b (deref-C this))\n  (ite (deref-is-D this) (b (deref-D this))\n  (b (deref-H this))))))\n)\n\n(define-fun A.c ((this Ref)) Int\n  (ite (deref-is-A this) (c (deref-A this))\n  (ite (deref-is-B this) (c (deref-B this))\n  (ite (deref-is-C this) (c (deref-C this))\n  (ite (deref-is-D this) (c (deref-D this))\n  (c (deref-H this))))))\n)\n\n(define-fun A.d ((this Ref)) Int\n  (ite (deref-is-A this) (d (deref-A this))\n  (ite (deref-is-B this) (d (deref-B this))\n  (ite (deref-is-C this) (d (deref-C this))\n  (ite (deref-is-D this) (d (deref-D this))\n  (d (deref-H this))))))\n)\n\n(define-fun A.e ((this Ref)) Int\n  (ite (deref-is-A this) (e (deref-A this))\n  (ite (deref-is-B this) (e (deref-B this))\n  (ite (deref-is-C this) (e (deref-C this))\n  (ite (deref-is-D this) (e (deref-D this))\n  (e (deref-H this))))))\n)\n\n(define-fun A.f ((this Ref)) Int\n  (ite (deref-is-A this) (f (deref-A this))\n  (ite (deref-is-B this) (f (deref-B this))\n  (ite (deref-is-C this) (f (deref-C this))\n  (ite (deref-is-D this) (f (deref-D this))\n  (f (deref-H this))))))\n)\n\n(define-fun A.g ((this Ref)) Int\n  (ite (deref-is-A this) (g (deref-A this))\n  (ite (deref-is-B this) (g (deref-B this))\n  (ite (deref-is-C this) (g (deref-C this))\n  (ite (deref-is-D this) (g (deref-D this))\n  (g (deref-H this))))))\n)\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.objectA ((this Ref)) Ref\n  (objectA (deref-TopLevelDeclarations this))\n)\n\n; ---------- methods: ----------\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- C:\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (B.inv this)\n  )\n)\n\n(define-fun C.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-C this)\n    (C.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --- D:\n\n(define-fun D.inv ((this Ref)) Bool\n  (and\n    (C.inv this)\n  )\n)\n\n(define-fun D.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-D this)\n    (D.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; --- H:\n\n(define-fun H.inv ((this Ref)) Bool\n  (and\n    (D.inv this)\n  )\n)\n\n(define-fun H.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-H this)\n    (H.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-H this) (H.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (deref-isa-A (TopLevelDeclarations.objectA this))\n    (deref-isa-C (TopLevelDeclarations.objectA this) )\n    (= (+ (+ (+ (+ (+ (A.a (TopLevelDeclarations.objectA this) ) (A.b (TopLevelDeclarations.objectA this) )) (A.c (TopLevelDeclarations.objectA this) )) (A.d (TopLevelDeclarations.objectA this) )) (A.e (TopLevelDeclarations.objectA this) )) (A.f (TopLevelDeclarations.objectA this) )) 90)\n  )\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (C.inv.nosub instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (D.inv.nosub instanceOfD)))\n(assert (exists ((instanceOfH Ref)) (H.inv.nosub instanceOfH)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"inheritance8.k":{"model":"\nclass A {\n  a:Int\n}\n\nclass B {\n  b:Int\n}\n\nclass C extending A,B {\n  c:Int\n}\n\nclass D {\n  bb:B\n  d:Int\n}\n\nclass E extending D {\n  e:Int\n}\n\nclass F extending C,E {\n  f:Int\n}\n\nclass G extending E {\n  g:Int\n}\n\nclass H extending F,G {\n  h:Int\n  tsum:Int = a + b + c + d + e + f + g + h\n}\n\nh:H = H(a :: 1,b :: 2,c :: 3,d :: 4,e :: 5,f :: 6,g :: 7,h :: 8)\n\nreq h.tsum = 36\n\n","name":"inheritance8.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"},"name":"bb","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"e","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["D"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"F","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"f","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["E"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"G","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"g","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["E"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"H","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"h","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"tsum","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"element":"b","type":"ElementValue"}]},{"element":"c","type":"ElementValue"}]},{"element":"d","type":"ElementValue"}]},{"element":"e","type":"ElementValue"}]},{"element":"f","type":"ElementValue"}]},{"element":"g","type":"ElementValue"}]},{"element":"h","type":"ElementValue"}]},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["F"],"type":"QualifiedName"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["G"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["H"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"h","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"H","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"a",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"b",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"c",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"d",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},4],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"e",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},5],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"f",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},6],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"g",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},7],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"h",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},8],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"h","type":"ElementValue"},"tsum"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},36],"type":"Expression"}]},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"b","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"c","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"bb","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"d","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"e","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["D"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"F","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"f","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"},{"ident":{"names":["E"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"G","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"g","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["E"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"H","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"h","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"tsum","expr":{"op":"Plus","type":"BinExp","exp2":{"ident":"h","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"g","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"f","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"e","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"d","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"c","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"}}}}}}}},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["F"],"type":"QualifiedName"},"args":[],"type":"IdentType"},{"ident":{"names":["G"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["H"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"h","expr":{"args":[{"exp":{"type":"LiteralInteger","i":1},"ident":"a","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":2},"ident":"b","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":3},"ident":"c","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":4},"ident":"d","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":5},"ident":"e","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":6},"ident":"f","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":7},"ident":"g","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":8},"ident":"h","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"H","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":36},"exp1":{"exp":{"ident":"h","type":"IdentExp"},"ident":"tsum","type":"DotExp"}},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (b Int)))))\n(declare-datatypes () ((D (mk-D (bb Ref)(d Int)))))\n(declare-datatypes () ((E (mk-E (bb Ref)(d Int)(e Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)))))\n(declare-datatypes () ((G (mk-G (bb Ref)(d Int)(e Int)(g Int)))))\n(declare-datatypes () ((F (mk-F (a Int)(b Int)(c Int)(bb Ref)(d Int)(e Int)(f Int)))))\n(declare-datatypes () ((H (mk-H (a Int)(b Int)(c Int)(bb Ref)(d Int)(e Int)(f Int)(g Int)(h Int)(tsum Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (h Ref)))))\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-D (sel-D D))\n  (lift-E (sel-E E))\n  (lift-C (sel-C C))\n  (lift-G (sel-G G))\n  (lift-F (sel-F F))\n  (lift-H (sel-H H))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-E ((this Ref)) Bool\n  (is-lift-E (deref this))\n)\n\n(define-fun deref-E ((this Ref)) E\n  (sel-E (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-G ((this Ref)) Bool\n  (is-lift-G (deref this))\n)\n\n(define-fun deref-G ((this Ref)) G\n  (sel-G (deref this))\n)\n\n(define-fun deref-is-F ((this Ref)) Bool\n  (is-lift-F (deref this))\n)\n\n(define-fun deref-F ((this Ref)) F\n  (sel-F (deref this))\n)\n\n(define-fun deref-is-H ((this Ref)) Bool\n  (is-lift-H (deref this))\n)\n\n(define-fun deref-H ((this Ref)) H\n  (sel-H (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-C this)\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (or\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-E ((this Ref)) Bool\n  (or\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-G ((this Ref)) Bool\n  (or\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-F ((this Ref)) Bool\n  (or\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-H ((this Ref)) Bool\n  (deref-is-H this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (ite (deref-is-C this) (a (deref-C this))\n  (ite (deref-is-F this) (a (deref-F this))\n  (a (deref-H this)))))\n)\n\n; --- B:\n\n(define-fun B.b ((this Ref)) Int\n  (ite (deref-is-B this) (b (deref-B this))\n  (ite (deref-is-C this) (b (deref-C this))\n  (ite (deref-is-F this) (b (deref-F this))\n  (b (deref-H this)))))\n)\n\n; --- D:\n\n(define-fun D.bb ((this Ref)) Ref\n  (ite (deref-is-D this) (bb (deref-D this))\n  (ite (deref-is-E this) (bb (deref-E this))\n  (ite (deref-is-F this) (bb (deref-F this))\n  (ite (deref-is-G this) (bb (deref-G this))\n  (bb (deref-H this))))))\n)\n\n(define-fun D.d ((this Ref)) Int\n  (ite (deref-is-D this) (d (deref-D this))\n  (ite (deref-is-E this) (d (deref-E this))\n  (ite (deref-is-F this) (d (deref-F this))\n  (ite (deref-is-G this) (d (deref-G this))\n  (d (deref-H this))))))\n)\n\n; --- E:\n\n(define-fun E.e ((this Ref)) Int\n  (ite (deref-is-E this) (e (deref-E this))\n  (ite (deref-is-F this) (e (deref-F this))\n  (ite (deref-is-G this) (e (deref-G this))\n  (e (deref-H this)))))\n)\n\n; --- C:\n\n(define-fun C.c ((this Ref)) Int\n  (ite (deref-is-C this) (c (deref-C this))\n  (ite (deref-is-F this) (c (deref-F this))\n  (c (deref-H this))))\n)\n\n; --- G:\n\n(define-fun G.g ((this Ref)) Int\n  (ite (deref-is-G this) (g (deref-G this))\n  (g (deref-H this)))\n)\n\n; --- F:\n\n(define-fun F.f ((this Ref)) Int\n  (ite (deref-is-F this) (f (deref-F this))\n  (f (deref-H this)))\n)\n\n; --- H:\n\n(define-fun H.h ((this Ref)) Int\n  (h (deref-H this))\n)\n\n(define-fun H.tsum ((this Ref)) Int\n  (tsum (deref-H this))\n)\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.h ((this Ref)) Ref\n  (h (deref-TopLevelDeclarations this))\n)\n\n; ---------- constructor parameter constants: ----------\n\n(declare-const const__1 Ref)\n(declare-const const__2 Int)\n\n\n; ---------- methods: ----------\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- D:\n\n(define-fun D.inv ((this Ref)) Bool\n  (and\n    (deref-isa-B (D.bb this))\n  )\n)\n\n(define-fun D.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-D this)\n    (D.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; --- E:\n\n(define-fun E.inv ((this Ref)) Bool\n  (and\n    (D.inv this)\n  )\n)\n\n(define-fun E.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-E this)\n    (E.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-E this) (E.inv this))\n))\n\n; --- C:\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n    (B.inv this)\n  )\n)\n\n(define-fun C.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-C this)\n    (C.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --- G:\n\n(define-fun G.inv ((this Ref)) Bool\n  (and\n    (E.inv this)\n  )\n)\n\n(define-fun G.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-G this)\n    (G.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-G this) (G.inv this))\n))\n\n; --- F:\n\n(define-fun F.inv ((this Ref)) Bool\n  (and\n    (C.inv this)\n    (E.inv this)\n  )\n)\n\n(define-fun F.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-F this)\n    (F.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-F this) (F.inv this))\n))\n\n; --- H:\n\n(define-fun H.inv ((this Ref)) Bool\n  (and\n    (F.inv this)\n    (G.inv this)\n    (= (H.tsum this) (+ (+ (+ (+ (+ (+ (+ (A.a this)  (B.b this) ) (C.c this) ) (D.d this) ) (E.e this) ) (F.f this) ) (G.g this) ) (H.h this) ))\n  )\n)\n\n(define-fun H.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-H this)\n    (H.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-H this) (H.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (deref (TopLevelDeclarations.h this)) (lift-H (mk-H 1 2 3 const__1 4 5 6 7 8 const__2)))\n    (deref-isa-H (TopLevelDeclarations.h this))\n    (= (H.tsum (TopLevelDeclarations.h this) ) 36)\n  )\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfD Ref)) (D.inv.nosub instanceOfD)))\n(assert (exists ((instanceOfE Ref)) (E.inv.nosub instanceOfE)))\n(assert (exists ((instanceOfC Ref)) (C.inv.nosub instanceOfC)))\n(assert (exists ((instanceOfG Ref)) (G.inv.nosub instanceOfG)))\n(assert (exists ((instanceOfF Ref)) (F.inv.nosub instanceOfF)))\n(assert (exists ((instanceOfH Ref)) (H.inv.nosub instanceOfH)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"testsmt5.k":{"model":"\nclass Event {\n  t1:Int\n  t2:Int\n\n  fun meets(other:Event) : Bool\n  {\n    t2 = other.t1\n  }\n\n  fun before(other:Event) : Bool\n  {\n    t2 < other.t1\n  }\n\n  fun contains(other:Event) : Bool\n  {\n    t1 < other.t1 && other.t2 < t2\n  }\n\n  req t1 < t2\n\n  req t2 - t1 > 10\n}\n\nclass Schedule {\n  a:Event\n  b:Event\n  c:Event\n  d:Event\n\n  req a.meets(b)\n\n  req b.before(c)\n\n  req c.contains(d)\n}\n\n","name":"testsmt5.k","json2":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"t2","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"other","type":"ElementValue"},"t1"]}]},"type":"ExpressionDecl"}],"ident":"meets","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"other","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t2","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"other","type":"ElementValue"},"t1"]}]},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"other","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t1","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"other","type":"ElementValue"},"t1"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"other","type":"ElementValue"},"t2"]},{"element":"t2","type":"ElementValue"}]}]},"type":"ExpressionDecl"}],"ident":"contains","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"other","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t1","type":"ElementValue"},{"element":"t2","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Minus",{"element":"t2","type":"ElementValue"},{"element":"t1","type":"ElementValue"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Schedule","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"meets"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"b","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"b","type":"ElementValue"},"before"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"c","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"c","type":"ElementValue"},"contains"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"d","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"EQ","type":"BinExp","exp2":{"exp":{"ident":"other","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"ident":"t2","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"meets","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"other","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"other","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"ident":"t2","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"other","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"And","type":"BinExp","exp2":{"op":"LT","type":"BinExp","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"exp":{"ident":"other","type":"IdentExp"},"ident":"t2","type":"DotExp"}},"exp1":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"other","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"ident":"t1","type":"IdentExp"}}},"type":"ExpressionDecl"}],"ident":"contains","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"other","type":"Param"}],"type":"FunDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"op":"Minus","type":"BinExp","exp2":{"ident":"t1","type":"IdentExp"},"exp1":{"ident":"t2","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Schedule","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"exp":{"args":[{"exp":{"ident":"b","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"a","type":"IdentExp"},"ident":"meets","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"ident":"c","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"b","type":"IdentExp"},"ident":"before","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"ident":"d","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"c","type":"IdentExp"},"ident":"contains","type":"DotExp"}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfEvent!0 () Int\n  1)\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  7)\n(define-fun instanceOfSchedule!1 () Int\n  3)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Schedule (mk-Schedule 8 9 10 12))\n  (ite (= x!1 12) (lift-Event (mk-Event 2438 2449))\n  (ite (= x!1 10) (lift-Event (mk-Event 2437 2450))\n  (ite (= x!1 7) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 8) (lift-Event (mk-Event 2414 2425))\n  (ite (= x!1 1) (lift-Event (mk-Event 0 11))\n    (lift-Event (mk-Event 2425 2436)))))))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 9) 9\n  (ite (= x!1 10) 10\n  (ite (= x!1 12) 12\n  (ite (= x!1 3) 3\n  (ite (= x!1 8) 8\n  (ite (= x!1 7) 7\n    1)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Event (mk-Event (t1 Int)(t2 Int)))))\n(declare-datatypes () ((Schedule (mk-Schedule (a Ref)(b Ref)(c Ref)(d Ref)))))\n(declare-sort TopLevelDeclarations)\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-Event (sel-Event Event))\n  (lift-Schedule (sel-Schedule Schedule))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-Schedule ((this Ref)) Bool\n  (is-lift-Schedule (deref this))\n)\n\n(define-fun deref-Schedule ((this Ref)) Schedule\n  (sel-Schedule (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-Schedule ((this Ref)) Bool\n  (deref-is-Schedule this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- Event:\n\n(define-fun Event.t1 ((this Ref)) Int\n  (t1 (deref-Event this))\n)\n\n(define-fun Event.t2 ((this Ref)) Int\n  (t2 (deref-Event this))\n)\n\n; --- Schedule:\n\n(define-fun Schedule.a ((this Ref)) Ref\n  (a (deref-Schedule this))\n)\n\n(define-fun Schedule.b ((this Ref)) Ref\n  (b (deref-Schedule this))\n)\n\n(define-fun Schedule.c ((this Ref)) Ref\n  (c (deref-Schedule this))\n)\n\n(define-fun Schedule.d ((this Ref)) Ref\n  (d (deref-Schedule this))\n)\n\n; ---------- methods: ----------\n\n; --- Event:\n\n(define-fun Event.meets ((this Ref)(other Ref)) Bool\n    (= (Event.t2 this)  (Event.t1 other))\n)\n\n(define-fun Event.before ((this Ref)(other Ref)) Bool\n    (< (Event.t2 this)  (Event.t1 other))\n)\n\n(define-fun Event.contains ((this Ref)(other Ref)) Bool\n    (and (< (Event.t1 this)  (Event.t1 other)) (< (Event.t2 other) (Event.t2 this) ))\n)\n\n; ---------- invariants: ----------\n\n; --- Event:\n\n(define-fun Event.inv ((this Ref)) Bool\n  (and\n    (< (Event.t1 this)  (Event.t2 this) )\n    (> (- (Event.t2 this)  (Event.t1 this) ) 10)\n  )\n)\n\n(define-fun Event.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-Event this)\n    (Event.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Event this) (Event.inv this))\n))\n\n; --- Schedule:\n\n(define-fun Schedule.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Event (Schedule.a this))\n    (deref-isa-Event (Schedule.b this))\n    (deref-isa-Event (Schedule.c this))\n    (deref-isa-Event (Schedule.d this))\n    (Event.meets (Schedule.a this)  (Schedule.b this) )\n    (Event.before (Schedule.b this)  (Schedule.c this) )\n    (Event.contains (Schedule.c this)  (Schedule.d this) )\n  )\n)\n\n(define-fun Schedule.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-Schedule this)\n    (Schedule.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Schedule this) (Schedule.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfEvent Ref)) (Event.inv.nosub instanceOfEvent)))\n(assert (exists ((instanceOfSchedule Ref)) (Schedule.inv.nosub instanceOfSchedule)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"inheritance1.k":{"model":"\nclass A {\n  x:Int\n}\n\nclass B extending A {\n  y:Int\n}\n\nclass D extending C {\n  i:Int\n}\n\nclass C extending B {\n  z:Int\n}\n\ndobj:D\n\nsum:Int = dobj.x + dobj.y + dobj.z + dobj.i\n\n","name":"inheritance1.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"i","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["D"],"type":"QualifiedName"}],"type":"Expression"},"name":"dobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"sum","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"x"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"y"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"z"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"i"]}]},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"x","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"i","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"z","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["D"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"dobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"sum","expr":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"i","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"z","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"y","type":"DotExp"},"exp1":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"x","type":"DotExp"}}}},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfTopLevelDeclarations!4 () Int\n  5)\n(define-fun instanceOfD!3 () Int\n  4)\n(define-fun instanceOfC!2 () Int\n  3)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!5))\n(define-fun instanceOfB!1 () Int\n  2)\n(define-fun instanceOfA!0 () Int\n  1)\n(define-fun k!6 ((x!1 Int)) Int\n  (ite (= x!1 4) 4\n  (ite (= x!1 3) 3\n  (ite (= x!1 5) 5\n  (ite (= x!1 2) 2\n  (ite (= x!1 1) 1\n    20))))))\n(define-fun k!5!7 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-C (mk-C 13 14 15))\n  (ite (= x!1 20) (lift-D (mk-D 8365 1796 8855 2437))\n  (ite (= x!1 1) (lift-A (mk-A 10))\n  (ite (= x!1 2) (lift-B (mk-B 11 12))\n  (ite (= x!1 4) (lift-D (mk-D 16 17 18 19))\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations 20 21453))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (k!5!7 (k!6 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)))))\n(declare-datatypes () ((C (mk-C (x Int)(y Int)(z Int)))))\n(declare-datatypes () ((D (mk-D (x Int)(y Int)(z Int)(i Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (dobj Ref)(sum Int)))))\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (ite (deref-is-B this) (x (deref-B this))\n  (ite (deref-is-C this) (x (deref-C this))\n  (x (deref-D this)))))\n)\n\n; --- B:\n\n(define-fun B.y ((this Ref)) Int\n  (ite (deref-is-B this) (y (deref-B this))\n  (ite (deref-is-C this) (y (deref-C this))\n  (y (deref-D this))))\n)\n\n; --- C:\n\n(define-fun C.z ((this Ref)) Int\n  (ite (deref-is-C this) (z (deref-C this))\n  (z (deref-D this)))\n)\n\n; --- D:\n\n(define-fun D.i ((this Ref)) Int\n  (i (deref-D this))\n)\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.dobj ((this Ref)) Ref\n  (dobj (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations.sum ((this Ref)) Int\n  (sum (deref-TopLevelDeclarations this))\n)\n\n; ---------- methods: ----------\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- C:\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (B.inv this)\n  )\n)\n\n(define-fun C.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-C this)\n    (C.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --- D:\n\n(define-fun D.inv ((this Ref)) Bool\n  (and\n    (C.inv this)\n  )\n)\n\n(define-fun D.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-D this)\n    (D.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (TopLevelDeclarations.sum this) (+ (+ (+ (A.x (TopLevelDeclarations.dobj this) ) (B.y (TopLevelDeclarations.dobj this) )) (C.z (TopLevelDeclarations.dobj this) )) (D.i (TopLevelDeclarations.dobj this) )))\n    (deref-isa-D (TopLevelDeclarations.dobj this))\n  )\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (C.inv.nosub instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (D.inv.nosub instanceOfD)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"inheritance4.k":{"model":"\nclass A {\n  x:Int\n\n  req x > 10\n}\n\nclass B extending A {\n  y:Int\n\n  req y > 10 && y < 20\n\n  req x < 20\n}\n\nclass C extending B {\n  z:Int\n\n  req z = 4 && x < 15\n}\n\n","name":"inheritance4.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"y","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"y","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},20],"type":"Expression"}]}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},20],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},4],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},15],"type":"Expression"}]}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"And","type":"BinExp","exp2":{"op":"LT","type":"BinExp","exp2":{"type":"LiteralInteger","i":20},"exp1":{"ident":"y","type":"IdentExp"}},"exp1":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"ident":"y","type":"IdentExp"}}},"type":"ConstraintDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"type":"LiteralInteger","i":20},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"And","type":"BinExp","exp2":{"op":"LT","type":"BinExp","exp2":{"type":"LiteralInteger","i":15},"exp1":{"ident":"x","type":"IdentExp"}},"exp1":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":4},"exp1":{"ident":"z","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!3 () Int\n  5)\n(define-fun instanceOfC!2 () Int\n  3)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!4))\n(define-fun instanceOfB!1 () Int\n  2)\n(define-fun instanceOfA!0 () Int\n  1)\n(define-fun k!5 ((x!1 Int)) Int\n  (ite (= x!1 3) 3\n  (ite (= x!1 2) 2\n  (ite (= x!1 1) 1\n    5))))\n(define-fun k!4!6 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-C (mk-C 12 13 4))\n  (ite (= x!1 1) (lift-A (mk-A 11))\n  (ite (= x!1 2) (lift-B (mk-B 19 18))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0)))))\n(define-fun k!4 ((x!1 Int)) Any\n  (k!4!6 (k!5 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)))))\n(declare-datatypes () ((C (mk-C (x Int)(y Int)(z Int)))))\n(declare-sort TopLevelDeclarations)\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (ite (deref-is-B this) (x (deref-B this))\n  (x (deref-C this))))\n)\n\n; --- B:\n\n(define-fun B.y ((this Ref)) Int\n  (ite (deref-is-B this) (y (deref-B this))\n  (y (deref-C this)))\n)\n\n; --- C:\n\n(define-fun C.z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n; ---------- methods: ----------\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (> (A.x this)  10)\n  )\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n    (and (> (B.y this)  10) (< (B.y this)  20))\n    (< (A.x this)  20)\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- C:\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (B.inv this)\n    (and (= (C.z this)  4) (< (A.x this)  15))\n  )\n)\n\n(define-fun C.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-C this)\n    (C.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (C.inv.nosub instanceOfC)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"testsmt13.k":{"model":"\nclass A {\n  a:Int\n}\n\nclass B extending A {\n  b:Int\n}\n\nclass C extending B {\n  c:Int\n}\n\nclass D {\n  d:Int\n}\n\na:A = C(a :: 1,b :: 2,c :: 3)\n\nreq a is A\n\nreq a is B\n\nreq a is C\n\n","name":"testsmt13.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"C","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"a",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"b",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"c",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"operand":[{"element":"ElementValue","type":"TypeCastCheckExp"},"false",{"element":"a","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}],"type":"Expression"},"type":"ConstraintDecl"},{"exp":{"operand":[{"element":"ElementValue","type":"TypeCastCheckExp"},"false",{"element":"a","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}],"type":"Expression"},"type":"ConstraintDecl"},{"exp":{"operand":[{"element":"ElementValue","type":"TypeCastCheckExp"},"false",{"element":"a","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}],"type":"Expression"},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"b","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"c","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"d","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"a","expr":{"args":[{"exp":{"type":"LiteralInteger","i":1},"ident":"a","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":2},"ident":"b","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":3},"ident":"c","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"C","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"exp":{"ident":"a","type":"IdentExp"},"cast":"false","type":"TypeCastCheckExp"},"type":"ConstraintDecl"},{"exp":{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"exp":{"ident":"a","type":"IdentExp"},"cast":"false","type":"TypeCastCheckExp"},"type":"ConstraintDecl"},{"exp":{"ty":{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"exp":{"ident":"a","type":"IdentExp"},"cast":"false","type":"TypeCastCheckExp"},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfTopLevelDeclarations!4 () Int\n  7)\n(define-fun instanceOfD!3 () Int\n  6)\n(define-fun instanceOfC!2 () Int\n  5)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!5))\n(define-fun instanceOfB!1 () Int\n  4)\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!6 ((x!1 Int)) Int\n  (ite (= x!1 6) 6\n  (ite (= x!1 5) 5\n  (ite (= x!1 7) 7\n  (ite (= x!1 4) 4\n  (ite (= x!1 0) 0\n    15))))))\n(define-fun k!5!7 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-C (mk-C 11 12 13))\n  (ite (= x!1 15) (lift-C (mk-C 1 2 3))\n  (ite (= x!1 0) (lift-A (mk-A 8))\n  (ite (= x!1 4) (lift-B (mk-B 9 10))\n  (ite (= x!1 6) (lift-D (mk-D 14))\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations 15))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (k!5!7 (k!6 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)))))\n(declare-datatypes () ((D (mk-D (d Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (a Ref)))))\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (ite (deref-is-B this) (a (deref-B this))\n  (a (deref-C this))))\n)\n\n; --- B:\n\n(define-fun B.b ((this Ref)) Int\n  (ite (deref-is-B this) (b (deref-B this))\n  (b (deref-C this)))\n)\n\n; --- C:\n\n(define-fun C.c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; --- D:\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.a ((this Ref)) Ref\n  (a (deref-TopLevelDeclarations this))\n)\n\n; ---------- methods: ----------\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- C:\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (B.inv this)\n  )\n)\n\n(define-fun C.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-C this)\n    (C.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --- D:\n\n(define-fun D.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun D.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-D this)\n    (D.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (deref (TopLevelDeclarations.a this)) (lift-C (mk-C 1 2 3)))\n    (deref-isa-A (TopLevelDeclarations.a this))\n    (deref-isa-A (TopLevelDeclarations.a this) )\n    (deref-isa-B (TopLevelDeclarations.a this) )\n    (deref-isa-C (TopLevelDeclarations.a this) )\n  )\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (C.inv.nosub instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (D.inv.nosub instanceOfD)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"testsmt3.k":{"model":"\nclass A {\n  x:Int = 1\n  y:Int\n\n  fun sum : Int\n  {\n    x + y\n  }\n\n  req x < y\n}\n\nclass B extending A {\n  z:Int\n  a1:A\n  a2:A = A(y :: 17)\n  a3:A = if z > 3 then\n    A(y :: z + 9)\n  else\n    A(y :: 33)\n\n  req a1.y < z\n\n  req y < z\n\n  req sum > 10\n}\n\ninst1A:A = A(x :: 1,y :: 2)\n\ninst2A:A = A(y :: 2)\n\ninst1B:B = B(a1 :: inst1A,z :: 200)\n\n","name":"testsmt3.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"x","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"x","type":"ElementValue"},{"element":"y","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"sum","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"x","type":"ElementValue"},{"element":"y","type":"ElementValue"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"a1","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"a2","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"A","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"y",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},17],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"a3","expr":{"operand":[{"element":"ElementValue","type":"IfExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"A","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"y",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},9],"type":"Expression"}]}],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"A","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"y",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},33],"type":"Expression"}],"type":"Expression"}]}],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a1","type":"ElementValue"},"y"]},{"element":"z","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"y","type":"ElementValue"},{"element":"z","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"sum","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"inst1A","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"A","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"x",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"y",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"inst2A","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"A","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"y",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"inst1B","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"B","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"a1",{"element":"inst1A","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"z",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},200],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"x","expr":{"type":"LiteralInteger","i":1},"modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"sum","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a1","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"a2","expr":{"args":[{"exp":{"type":"LiteralInteger","i":17},"ident":"y","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"A","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"a3","expr":{"trueBranch":{"args":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":9},"exp1":{"ident":"z","type":"IdentExp"}},"ident":"y","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"A","type":"IdentExp"}},"falseBranch":{"args":[{"exp":{"type":"LiteralInteger","i":33},"ident":"y","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"A","type":"IdentExp"}},"type":"IfExp","cond":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":3},"exp1":{"ident":"z","type":"IdentExp"}}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"z","type":"IdentExp"},"exp1":{"exp":{"ident":"a1","type":"IdentExp"},"ident":"y","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"z","type":"IdentExp"},"exp1":{"ident":"y","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"ident":"sum","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"inst1A","expr":{"args":[{"exp":{"type":"LiteralInteger","i":1},"ident":"x","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":2},"ident":"y","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"A","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"inst2A","expr":{"args":[{"exp":{"type":"LiteralInteger","i":2},"ident":"y","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"A","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"inst1B","expr":{"args":[{"exp":{"ident":"inst1A","type":"IdentExp"},"ident":"a1","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":200},"ident":"z","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"B","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun const__4 () Int\n  1)\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  21)\n(define-fun instanceOfB!1 () Int\n  12)\n(define-fun instanceOfA!0 () Int\n  3)\n(define-fun const__5 () Int\n  1)\n(define-fun const__6 () Int\n  75)\n(define-fun const__7 () Int\n  23)\n(define-fun const__8 () Int\n  24)\n(define-fun const__3 () Int\n  84)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun const__2 () Int\n  1)\n(define-fun const__1 () Int\n  1)\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 36) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 64 65 66))\n  (ite (= x!1 65) (lift-A (mk-A 1 2))\n  (ite (= x!1 27) (lift-A (mk-A 1 20))\n  (ite (= x!1 64) (lift-A (mk-A 1 2))\n  (ite (= x!1 28) (lift-A (mk-A 1 2))\n  (ite (= x!1 71) (lift-A (mk-A 1 2))\n  (ite (= x!1 3) (lift-A (mk-A 1 1238))\n  (ite (= x!1 34) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 67 68 69))\n  (ite (= x!1 66) (lift-B (mk-B 1 75 200 64 23 24))\n  (ite (= x!1 67) (lift-A (mk-A 1 2))\n  (ite (= x!1 72) (lift-B (mk-B 1 75 200 70 23 24))\n  (ite (= x!1 29) (lift-B (mk-B 1 75 200 22 23 24))\n  (ite (= x!1 24) (lift-A (mk-A 1 209))\n  (ite (= x!1 22) (lift-A (mk-A 1 2))\n  (ite (= x!1 68) (lift-A (mk-A 1 2))\n  (ite (= x!1 12) (lift-B (mk-B 1 10 11 25 26 27))\n  (ite (= x!1 26) (lift-A (mk-A 1 17))\n  (ite (= x!1 70) (lift-A (mk-A 1 2))\n  (ite (= x!1 25) (lift-A (mk-A 1 9))\n  (ite (= x!1 15) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 70 71 72))\n  (ite (= x!1 69) (lift-B (mk-B 1 75 200 67 23 24))\n  (ite (= x!1 23) (lift-A (mk-A 1 17))\n  (ite (= x!1 21) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 22 28 29))\n    null))))))))))))))))))))))))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)(y Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)(z Int)(a1 Ref)(a2 Ref)(a3 Ref)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (inst1A Ref)(inst2A Ref)(inst1B Ref)))))\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (x (deref-B this)))\n)\n\n(define-fun A.y ((this Ref)) Int\n  (ite (deref-is-A this) (y (deref-A this))\n  (y (deref-B this)))\n)\n\n; --- B:\n\n(define-fun B.z ((this Ref)) Int\n  (z (deref-B this))\n)\n\n(define-fun B.a1 ((this Ref)) Ref\n  (a1 (deref-B this))\n)\n\n(define-fun B.a2 ((this Ref)) Ref\n  (a2 (deref-B this))\n)\n\n(define-fun B.a3 ((this Ref)) Ref\n  (a3 (deref-B this))\n)\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inst1A ((this Ref)) Ref\n  (inst1A (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations.inst2A ((this Ref)) Ref\n  (inst2A (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations.inst1B ((this Ref)) Ref\n  (inst1B (deref-TopLevelDeclarations this))\n)\n\n; ---------- constructor parameter constants: ----------\n\n(declare-const const__1 Int)\n(declare-const const__2 Int)\n(declare-const const__3 Int)\n(declare-const const__4 Int)\n(declare-const const__5 Int)\n(declare-const const__6 Int)\n(declare-const const__7 Ref)\n(declare-const const__8 Ref)\n\n\n; ---------- methods: ----------\n\n; --- A:\n\n(define-fun A.sum ((this Ref)) Int\n    (+ (A.x this)  (A.y this) )\n)\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A.x this) 1)\n    (< (A.x this)  (A.y this) )\n  )\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n    (= (deref (B.a2 this)) (lift-A (mk-A const__1 17)))\n    (= (deref (B.a3 this)) (ite (> (B.z this)  3) (lift-A (mk-A const__2 (+ (B.z this)  9))) (lift-A (mk-A const__3 33))))\n    (deref-isa-A (B.a1 this))\n    (deref-isa-A (B.a2 this))\n    (deref-isa-A (B.a3 this))\n    (< (A.y (B.a1 this) ) (B.z this) )\n    (< (A.y this)  (B.z this) )\n    (> (A.sum this)  10)\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (deref (TopLevelDeclarations.inst1A this)) (lift-A (mk-A 1 2)))\n    (= (deref (TopLevelDeclarations.inst2A this)) (lift-A (mk-A const__4 2)))\n    (= (deref (TopLevelDeclarations.inst1B this)) (lift-B (mk-B const__5 const__6 200 (TopLevelDeclarations.inst1A this)  const__7 const__8)))\n    (deref-isa-A (TopLevelDeclarations.inst1A this))\n    (deref-isa-A (TopLevelDeclarations.inst2A this))\n    (deref-isa-B (TopLevelDeclarations.inst1B this))\n  )\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"inheritance3.k":{"model":"\nclass A {\n  x:Int = 2\n\n  fun get : Int\n  {\n    x\n  }\n}\n\nclass B extending A {\n  y:Int = 5\n\n  fun sum(k:Int) : Int\n  {\n    get() + y + k\n  }\n}\n\nbobj:B\n\ntheSum:Int = bobj.sum(bobj.get())\n\nreq theSum = 9\n\n","name":"inheritance3.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"x","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"element":"x","type":"ElementValue"},"type":"ExpressionDecl"}],"ident":"get","typeParams":[],"params":[],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"y","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},5],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"get","type":"ElementValue"}]},{"element":"y","type":"ElementValue"}]},{"element":"k","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"sum","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"},"name":"bobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"theSum","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"bobj","type":"ElementValue"},"sum"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"bobj","type":"ElementValue"},"get"]}]}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"theSum","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},9],"type":"Expression"}]},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"x","expr":{"type":"LiteralInteger","i":2},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"ident":"x","type":"IdentExp"},"type":"ExpressionDecl"}],"ident":"get","typeParams":[],"params":[],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"y","expr":{"type":"LiteralInteger","i":5},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"args":[],"type":"FunApplExp","exp1":{"ident":"get","type":"IdentExp"}}}},"type":"ExpressionDecl"}],"ident":"sum","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"bobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"theSum","expr":{"args":[{"exp":{"args":[],"type":"FunApplExp","exp1":{"exp":{"ident":"bobj","type":"IdentExp"},"ident":"get","type":"DotExp"}},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"bobj","type":"IdentExp"},"ident":"sum","type":"DotExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":9},"exp1":{"ident":"theSum","type":"IdentExp"}},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfTopLevelDeclarations!2 () Int\n  4)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun instanceOfB!1 () Int\n  3)\n(define-fun instanceOfA!0 () Int\n  1)\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 4) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8 9))\n  (ite (= x!1 1) (lift-A (mk-A 2))\n    (lift-B (mk-B 2 5)))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 8) 8\n  (ite (= x!1 3) 3\n  (ite (= x!1 1) 1\n    4))))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (bobj Ref)(theSum Int)))))\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (x (deref-B this)))\n)\n\n; --- B:\n\n(define-fun B.y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.bobj ((this Ref)) Ref\n  (bobj (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations.theSum ((this Ref)) Int\n  (theSum (deref-TopLevelDeclarations this))\n)\n\n; ---------- methods: ----------\n\n; --- A:\n\n(define-fun A.get ((this Ref)) Int\n    (A.x this) \n)\n\n; --- B:\n\n(define-fun B.sum ((this Ref)(k Int)) Int\n    (+ (+ (A.get this ) (B.y this) ) k)\n)\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A.x this) 2)\n  )\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n    (= (B.y this) 5)\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (TopLevelDeclarations.theSum this) (B.sum (TopLevelDeclarations.bobj this)  (A.get (TopLevelDeclarations.bobj this)  )))\n    (deref-isa-B (TopLevelDeclarations.bobj this))\n    (= (TopLevelDeclarations.theSum this)  9)\n  )\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"inheritance6.k":{"model":"\nclass Person {\n  father:Person\n  child:Person\n\n  req father.child = this\n}\n\np1:Person\n\np2:Person\n\nreq p1 != p2\n\nreq p2.father = p1\n\nreq p1.child = p2\n\nreq p1.father = p2\n\nreq p2.child = p1\n\n","name":"inheritance6.k","json2":{"decls":[{"entityToken":"class","ident":"Person","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"},"name":"father","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"},"name":"child","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"father","type":"ElementValue"},"child"]},{"operand":[{"element":"ElementValue","type":"ThisLiteral"}],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"},"name":"p1","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"},"name":"p2","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"element":"p1","type":"ElementValue"},{"element":"p2","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"p2","type":"ElementValue"},"father"]},{"element":"p1","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"p1","type":"ElementValue"},"child"]},{"element":"p2","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"p1","type":"ElementValue"},"father"]},{"element":"p2","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"p2","type":"ElementValue"},"child"]},{"element":"p1","type":"ElementValue"}]},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Person","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"father","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"child","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"ThisLiteral"},"exp1":{"exp":{"ident":"father","type":"IdentExp"},"ident":"child","type":"DotExp"}},"type":"ConstraintDecl"}],"extending":[]},{"ty":{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"p1","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"p2","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"NotEQ","type":"BinExp","exp2":{"ident":"p2","type":"IdentExp"},"exp1":{"ident":"p1","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"p1","type":"IdentExp"},"exp1":{"exp":{"ident":"p2","type":"IdentExp"},"ident":"father","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"p2","type":"IdentExp"},"exp1":{"exp":{"ident":"p1","type":"IdentExp"},"ident":"child","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"p2","type":"IdentExp"},"exp1":{"exp":{"ident":"p1","type":"IdentExp"},"ident":"father","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"p1","type":"IdentExp"},"exp1":{"exp":{"ident":"p2","type":"IdentExp"},"ident":"child","type":"DotExp"}},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Person (mk-Person (father Ref)(child Ref)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (p1 Ref)(p2 Ref)))))\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-Person (sel-Person Person))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-Person ((this Ref)) Bool\n  (is-lift-Person (deref this))\n)\n\n(define-fun deref-Person ((this Ref)) Person\n  (sel-Person (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-Person ((this Ref)) Bool\n  (deref-is-Person this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- Person:\n\n(define-fun Person.father ((this Ref)) Ref\n  (father (deref-Person this))\n)\n\n(define-fun Person.child ((this Ref)) Ref\n  (child (deref-Person this))\n)\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.p1 ((this Ref)) Ref\n  (p1 (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations.p2 ((this Ref)) Ref\n  (p2 (deref-TopLevelDeclarations this))\n)\n\n; ---------- methods: ----------\n\n; ---------- invariants: ----------\n\n; --- Person:\n\n(define-fun Person.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Person (Person.father this))\n    (deref-isa-Person (Person.child this))\n    (= (Person.child (Person.father this) ) this)\n  )\n)\n\n(define-fun Person.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-Person this)\n    (Person.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Person this) (Person.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Person (TopLevelDeclarations.p1 this))\n    (deref-isa-Person (TopLevelDeclarations.p2 this))\n    (not (= (TopLevelDeclarations.p1 this)  (TopLevelDeclarations.p2 this) ))\n    (= (Person.father (TopLevelDeclarations.p2 this) ) (TopLevelDeclarations.p1 this) )\n    (= (Person.child (TopLevelDeclarations.p1 this) ) (TopLevelDeclarations.p2 this) )\n    (= (Person.father (TopLevelDeclarations.p1 this) ) (TopLevelDeclarations.p2 this) )\n    (= (Person.child (TopLevelDeclarations.p2 this) ) (TopLevelDeclarations.p1 this) )\n  )\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfPerson Ref)) (Person.inv.nosub instanceOfPerson)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"testsmt11.k":{"model":"\nclass A {\n  a:Int = 1\n\n  fun f(x:Int) : Int * Int\n  {\n    Tuple(a,x)\n  }\n\n  fun g(x:Int) : Int\n  {\n    k:Int * Int = f(x)\n    k # 1 + k # 2\n  }\n}\n\nclass B extending A {\n  b:Int = 2\n\n  fun h(tuple:Int * Int) : Int\n  {\n    k1:Int = tuple # 1\n    k2:Int = tuple # 2\n    g(k1 + k2)\n  }\n  r:Int = h(Tuple(10,20))\n\n  req r = 31\n}\n\n","name":"testsmt11.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"CartesianType"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"}],"type":"Expression"},"body":[{"exp":{"operand":[{"element":"ElementValue","type":"TupleExp"},{"element":"a","type":"ElementValue"},{"element":"x","type":"ElementValue"}],"type":"Expression"},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"ty":{"operand":[{"element":"ElementValue","type":"CartesianType"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"}],"type":"Expression"},"assignment":false,"name":"k","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"f","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"x","type":"ElementValue"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"k","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"k","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}]}]},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"b","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k1","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"tuple","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k2","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"tuple","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"g","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"k1","type":"ElementValue"},{"element":"k2","type":"ElementValue"}]}],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"CartesianType"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"}],"type":"Expression"},"name":"tuple","type":"Param"}],"type":"FunDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"r","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"h","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"TupleExp"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},20],"type":"Expression"}],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"r","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},31],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"type":"LiteralInteger","i":1},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"CartesianType","types":[{"type":"IntType"},{"type":"IntType"}]},"body":[{"exp":{"exps":[{"ident":"a","type":"IdentExp"},{"ident":"x","type":"IdentExp"}],"type":"TupleExp"},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"ty":{"type":"CartesianType","types":[{"type":"IntType"},{"type":"IntType"}]},"assignment":false,"name":"k","expr":{"args":[{"exp":{"ident":"x","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"f","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"Plus","type":"BinExp","exp2":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":2},"exp1":{"ident":"k","type":"IdentExp"}},"exp1":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"k","type":"IdentExp"}}},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"type":"LiteralInteger","i":2},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k1","expr":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"tuple","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"k2","expr":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":2},"exp1":{"ident":"tuple","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"args":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k2","type":"IdentExp"},"exp1":{"ident":"k1","type":"IdentExp"}},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"g","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"type":"CartesianType","types":[{"type":"IntType"},{"type":"IntType"}]},"name":"tuple","type":"Param"}],"type":"FunDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"r","expr":{"args":[{"exp":{"exps":[{"type":"LiteralInteger","i":10},{"type":"LiteralInteger","i":20}],"type":"TupleExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"h","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":31},"exp1":{"ident":"r","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  5)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun instanceOfB!1 () Int\n  3)\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-A (mk-A 1))\n  (ite (= x!1 3) (lift-B (mk-B 1 2 31))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 3) 3\n  (ite (= x!1 0) 0\n    5)))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)(r Int)))))\n(declare-sort TopLevelDeclarations)\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (a (deref-B this)))\n)\n\n; --- B:\n\n(define-fun B.b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n(define-fun B.r ((this Ref)) Int\n  (r (deref-B this))\n)\n\n; ---------- methods: ----------\n\n; --- A:\n\n(define-fun A.f ((this Ref)(x Int)) (Tuple2 Int Int)\n    (mk-Tuple2 (A.a this)  x)\n)\n\n(define-fun A.g ((this Ref)(x Int)) Int\n    (let ((k (A.f this x)))\n    (+ (_1 k) (_2 k)))\n)\n\n; --- B:\n\n(define-fun B.h ((this Ref)(tuple (Tuple2 Int Int))) Int\n    (let ((k1 (_1 tuple)))\n    (let ((k2 (_2 tuple)))\n      (A.g this (+ k1 k2))))\n)\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A.a this) 1)\n  )\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n    (= (B.b this) 2)\n    (= (B.r this) (B.h this (mk-Tuple2 10 20)))\n    (= (B.r this)  31)\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"inheritance2.k":{"model":"\nclass A {\n  a:Int = 1\n}\n\nclass B extending A {\n  b:Int = 2\n}\n\nclass D extending C {\n  d:Int = 4\n}\n\nclass C extending A {\n  c:Int = 3\n}\n\ndobj:D\n\nsum:Int = dobj.a + dobj.c + dobj.d\n\n","name":"inheritance2.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"b","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"d","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},4],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"c","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["D"],"type":"QualifiedName"}],"type":"Expression"},"name":"dobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"sum","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"a"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"c"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"d"]}]},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"type":"LiteralInteger","i":1},"modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"type":"LiteralInteger","i":2},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"d","expr":{"type":"LiteralInteger","i":4},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"c","expr":{"type":"LiteralInteger","i":3},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["D"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"dobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"sum","expr":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"d","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"c","type":"DotExp"},"exp1":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"a","type":"DotExp"}}},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfTopLevelDeclarations!4 () Int\n  10)\n(define-fun instanceOfD!3 () Int\n  9)\n(define-fun instanceOfC!2 () Int\n  7)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!5))\n(define-fun instanceOfB!1 () Int\n  6)\n(define-fun instanceOfA!0 () Int\n  5)\n(define-fun k!6 ((x!1 Int)) Int\n  (ite (= x!1 9) 9\n  (ite (= x!1 7) 7\n  (ite (= x!1 10) 10\n  (ite (= x!1 6) 6\n  (ite (= x!1 5) 5\n    14))))))\n(define-fun k!5!7 ((x!1 Int)) Any\n  (ite (= x!1 10) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 14 8))\n  (ite (= x!1 7) (lift-C (mk-C 1 3))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-B (mk-B 1 2))\n    (lift-D (mk-D 1 3 4)))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (k!5!7 (k!6 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(c Int)))))\n(declare-datatypes () ((D (mk-D (a Int)(c Int)(d Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (dobj Ref)(sum Int)))))\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (ite (deref-is-B this) (a (deref-B this))\n  (ite (deref-is-C this) (a (deref-C this))\n  (a (deref-D this)))))\n)\n\n; --- B:\n\n(define-fun B.b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; --- C:\n\n(define-fun C.c ((this Ref)) Int\n  (ite (deref-is-C this) (c (deref-C this))\n  (c (deref-D this)))\n)\n\n; --- D:\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.dobj ((this Ref)) Ref\n  (dobj (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations.sum ((this Ref)) Int\n  (sum (deref-TopLevelDeclarations this))\n)\n\n; ---------- methods: ----------\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A.a this) 1)\n  )\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n    (= (B.b this) 2)\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- C:\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n    (= (C.c this) 3)\n  )\n)\n\n(define-fun C.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-C this)\n    (C.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --- D:\n\n(define-fun D.inv ((this Ref)) Bool\n  (and\n    (C.inv this)\n    (= (D.d this) 4)\n  )\n)\n\n(define-fun D.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-D this)\n    (D.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (TopLevelDeclarations.sum this) (+ (+ (A.a (TopLevelDeclarations.dobj this) ) (C.c (TopLevelDeclarations.dobj this) )) (D.d (TopLevelDeclarations.dobj this) )))\n    (deref-isa-D (TopLevelDeclarations.dobj this))\n  )\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (C.inv.nosub instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (D.inv.nosub instanceOfD)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"testsmt1.k":{"model":"\nclass A {\n  x:Int\n  y:Int\n  z:Int * Bool\n\n  req z = Tuple(1,true)\n\n  req z # 1 = 1 && z # 2\n\n  fun f : Int * Bool\n  {\n    Tuple(1,true)\n  }\n\n  req x > 20\n\n  req exists i : Int . i > 0 && x + i = y\n\n  req f() # 2\n}\n\nclass B {\n  sat:Bool\n  z:Int\n  a:A\n\n  req a.x <= 22\n\n  req sat\n\n  req !sat => (z = a.x)\n\n  fun g(l:Int) : Int\n  {\n    l + 1\n  }\n\n  fun f(k:Int) : Int\n  {\n    g(k) + 1\n  }\n\n  req f(z) <= 22\n\n  req a.x != a.y\n}\n\n","name":"testsmt1.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"CartesianType"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"TupleExp"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"BooleanLiteral"},true],"type":"Expression"}],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}]}]},"type":"ConstraintDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"CartesianType"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"}],"type":"Expression"},"body":[{"exp":{"operand":[{"element":"ElementValue","type":"TupleExp"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"BooleanLiteral"},true],"type":"Expression"}],"type":"Expression"},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},20],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"QuantifiedExp"},{"operand":[{"element":"ElementValue","type":"Exists"}],"type":"Expression"},{"bindings":[{"operand":[{"element":"ElementValue","type":"RngBinding"},{"operand":[{"element":"ElementValue","type":"TypeCollection"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IdentPattern"},"i"],"type":"Expression"}],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"i","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},0],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"x","type":"ElementValue"},{"element":"i","type":"ElementValue"}]},{"element":"y","type":"ElementValue"}]}]}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"f","type":"ElementValue"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"name":"sat","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LTE",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"x"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},22],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"element":"sat","type":"ElementValue"},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Implies",{"type":"Expression","operand":[{"element":"ElementValue","type":"UnaryExp"},"Not",{"element":"sat","type":"ElementValue"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"ParenExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"z","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"x"]}]}]}]},"type":"ConstraintDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"l","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"l","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"g","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"k","type":"ElementValue"}],"type":"Expression"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LTE",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"f","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"z","type":"ElementValue"}],"type":"Expression"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},22],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"x"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"y"]}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"CartesianType","types":[{"type":"IntType"},{"type":"BoolType"}]},"name":"z","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"exps":[{"type":"LiteralInteger","i":1},{"b":true,"type":"LiteralBoolean"}],"type":"TupleExp"},"exp1":{"ident":"z","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"And","type":"BinExp","exp2":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":2},"exp1":{"ident":"z","type":"IdentExp"}},"exp1":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"z","type":"IdentExp"}}}},"type":"ConstraintDecl"},{"spec":[],"ty":{"type":"CartesianType","types":[{"type":"IntType"},{"type":"BoolType"}]},"body":[{"exp":{"exps":[{"type":"LiteralInteger","i":1},{"b":true,"type":"LiteralBoolean"}],"type":"TupleExp"},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":20},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"exp":{"op":"And","type":"BinExp","exp2":{"op":"EQ","type":"BinExp","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"i","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"}}},"exp1":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":0},"exp1":{"ident":"i","type":"IdentExp"}}},"bindings":[{"patterns":[{"ident":"i","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"quant":{"element":"Exists","type":"Quantifier"},"type":"QuantifiedExp"},"type":"ConstraintDecl"},{"exp":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":2},"exp1":{"args":[],"type":"FunApplExp","exp1":{"ident":"f","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"BoolType"},"name":"sat","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"LTE","type":"BinExp","exp2":{"type":"LiteralInteger","i":22},"exp1":{"exp":{"ident":"a","type":"IdentExp"},"ident":"x","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"ident":"sat","type":"IdentExp"},"type":"ConstraintDecl"},{"exp":{"op":"Implies","type":"BinExp","exp2":{"exp":{"op":"EQ","type":"BinExp","exp2":{"exp":{"ident":"a","type":"IdentExp"},"ident":"x","type":"DotExp"},"exp1":{"ident":"z","type":"IdentExp"}},"type":"ParenExp"},"exp1":{"exp":{"ident":"sat","type":"IdentExp"},"op":"Not","type":"UnaryExp"}},"type":"ConstraintDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"l","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"l","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"args":[{"exp":{"ident":"k","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"g","type":"IdentExp"}}},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"},{"exp":{"op":"LTE","type":"BinExp","exp2":{"type":"LiteralInteger","i":22},"exp1":{"args":[{"exp":{"ident":"z","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"f","type":"IdentExp"}}},"type":"ConstraintDecl"},{"exp":{"op":"NotEQ","type":"BinExp","exp2":{"exp":{"ident":"a","type":"IdentExp"},"ident":"y","type":"DotExp"},"exp1":{"exp":{"ident":"a","type":"IdentExp"},"ident":"x","type":"DotExp"}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun i!2 () Int\n  1)\n(define-fun instanceOfB!3 () Int\n  4)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!5))\n(define-fun instanceOfTopLevelDeclarations!4 () Int\n  5)\n(define-fun instanceOfA!1 () Int\n  2)\n(define-fun i!0 ((x!1 Int)) Int\n  1)\n(define-fun k!6 ((x!1 Int)) Int\n  (ite (= x!1 6) 6\n  (ite (= x!1 5) 5\n  (ite (= x!1 2) 2\n    4))))\n(define-fun k!5!7 ((x!1 Int)) Any\n  (ite (= x!1 6) (lift-A (mk-A 22 23 (mk-Tuple2 1 true)))\n  (ite (= x!1 4) (lift-B (mk-B true 0 6))\n  (ite (= x!1 5) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    (lift-A (mk-A 21 22 (mk-Tuple2 1 true)))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (k!5!7 (k!6 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)(y Int)(z (Tuple2 Int Bool))))))\n(declare-datatypes () ((B (mk-B (sat Bool)(z Int)(a Ref)))))\n(declare-sort TopLevelDeclarations)\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n(define-fun A.y ((this Ref)) Int\n  (y (deref-A this))\n)\n\n(define-fun A.z ((this Ref)) (Tuple2 Int Bool)\n  (z (deref-A this))\n)\n\n; --- B:\n\n(define-fun B.sat ((this Ref)) Bool\n  (sat (deref-B this))\n)\n\n(define-fun B.z ((this Ref)) Int\n  (z (deref-B this))\n)\n\n(define-fun B.a ((this Ref)) Ref\n  (a (deref-B this))\n)\n\n; ---------- methods: ----------\n\n; --- A:\n\n(define-fun A.f ((this Ref)) (Tuple2 Int Bool)\n    (mk-Tuple2 1 true)\n)\n\n; --- B:\n\n(define-fun B.g ((this Ref)(l Int)) Int\n    (+ l 1)\n)\n\n(define-fun B.f ((this Ref)(k Int)) Int\n    (+ (B.g this k) 1)\n)\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A.z this)  (mk-Tuple2 1 true))\n    (and (= (_1 (A.z this) ) 1) (_2 (A.z this) ))\n    (> (A.x this)  20)\n    (exists ((i Int)) (and (> i 0) (= (+ (A.x this)  i) (A.y this) )))\n    (_2 (A.f this ))\n  )\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (deref-isa-A (B.a this))\n    (<= (A.x (B.a this) ) 22)\n    (B.sat this) \n    (=> (not (B.sat this) ) (= (B.z this)  (A.x (B.a this) )))\n    (<= (B.f this (B.z this) ) 22)\n    (not (= (A.x (B.a this) ) (A.y (B.a this) )))\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"testsmt2.k":{"model":"\nclass Duration {\n  t1:Int\n  t2:Int\n\n  fun before(other:Duration) : Bool\n  {\n    t2 < other.t1\n  }\n\n  req t1 < t2\n}\n\nclass Event {\n  duration:Duration\n  min:Int\n\n  req duration.t2 - duration.t1 >= min\n}\n\na:Event\n\nb:Event\n\nreq a.min = 10\n\nreq b.min = 20\n\nreq a.duration.before(b.duration)\n\n","name":"testsmt2.k","json2":{"decls":[{"entityToken":"class","ident":"Duration","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t2","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"other","type":"ElementValue"},"t1"]}]},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Duration"],"type":"QualifiedName"}],"type":"Expression"},"name":"other","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t1","type":"ElementValue"},{"element":"t2","type":"ElementValue"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Duration"],"type":"QualifiedName"}],"type":"Expression"},"name":"duration","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"min","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GTE",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Minus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"duration","type":"ElementValue"},"t2"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"duration","type":"ElementValue"},"t1"]}]},{"element":"min","type":"ElementValue"}]},"type":"ConstraintDecl"}],"extending":[]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"min"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"b","type":"ElementValue"},"min"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},20],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"duration"]},"before"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"b","type":"ElementValue"},"duration"]}],"type":"Expression"}]},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Duration","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"other","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"ident":"t2","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"ident":{"names":["Duration"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"other","type":"Param"}],"type":"FunDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["Duration"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"duration","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"min","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"GTE","type":"BinExp","exp2":{"ident":"min","type":"IdentExp"},"exp1":{"op":"Minus","type":"BinExp","exp2":{"exp":{"ident":"duration","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"exp":{"ident":"duration","type":"IdentExp"},"ident":"t2","type":"DotExp"}}},"type":"ConstraintDecl"}],"extending":[]},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"exp":{"ident":"a","type":"IdentExp"},"ident":"min","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":20},"exp1":{"exp":{"ident":"b","type":"IdentExp"},"ident":"min","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"exp":{"ident":"b","type":"IdentExp"},"ident":"duration","type":"DotExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"exp":{"ident":"a","type":"IdentExp"},"ident":"duration","type":"DotExp"},"ident":"before","type":"DotExp"}},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfDuration!0 () Int\n  2)\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  6)\n(define-fun instanceOfEvent!1 () Int\n  4)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 12) (lift-Duration (mk-Duration 2271 2281))\n  (ite (= x!1 9) (lift-Event (mk-Event 12 10))\n  (ite (= x!1 2) (lift-Duration (mk-Duration 0 1))\n  (ite (= x!1 4) (lift-Event (mk-Event 8 (- 2436)))\n  (ite (= x!1 11) (lift-Event (mk-Event 13 20))\n  (ite (= x!1 6) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 11))\n  (ite (= x!1 13) (lift-Duration (mk-Duration 2282 2302))\n    (lift-Duration (mk-Duration 8854 8855))))))))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 6) 6\n  (ite (= x!1 4) 4\n  (ite (= x!1 12) 12\n  (ite (= x!1 8) 8\n  (ite (= x!1 11) 11\n  (ite (= x!1 9) 9\n  (ite (= x!1 13) 13\n    2))))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Duration (mk-Duration (t1 Int)(t2 Int)))))\n(declare-datatypes () ((Event (mk-Event (duration Ref)(min Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (a Ref)(b Ref)))))\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-Duration (sel-Duration Duration))\n  (lift-Event (sel-Event Event))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-Duration ((this Ref)) Bool\n  (is-lift-Duration (deref this))\n)\n\n(define-fun deref-Duration ((this Ref)) Duration\n  (sel-Duration (deref this))\n)\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-Duration ((this Ref)) Bool\n  (deref-is-Duration this)\n)\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- Duration:\n\n(define-fun Duration.t1 ((this Ref)) Int\n  (t1 (deref-Duration this))\n)\n\n(define-fun Duration.t2 ((this Ref)) Int\n  (t2 (deref-Duration this))\n)\n\n; --- Event:\n\n(define-fun Event.duration ((this Ref)) Ref\n  (duration (deref-Event this))\n)\n\n(define-fun Event.min ((this Ref)) Int\n  (min (deref-Event this))\n)\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.a ((this Ref)) Ref\n  (a (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations.b ((this Ref)) Ref\n  (b (deref-TopLevelDeclarations this))\n)\n\n; ---------- methods: ----------\n\n; --- Duration:\n\n(define-fun Duration.before ((this Ref)(other Ref)) Bool\n    (< (Duration.t2 this)  (Duration.t1 other))\n)\n\n; ---------- invariants: ----------\n\n; --- Duration:\n\n(define-fun Duration.inv ((this Ref)) Bool\n  (and\n    (< (Duration.t1 this)  (Duration.t2 this) )\n  )\n)\n\n(define-fun Duration.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-Duration this)\n    (Duration.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Duration this) (Duration.inv this))\n))\n\n; --- Event:\n\n(define-fun Event.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Duration (Event.duration this))\n    (>= (- (Duration.t2 (Event.duration this) ) (Duration.t1 (Event.duration this) )) (Event.min this) )\n  )\n)\n\n(define-fun Event.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-Event this)\n    (Event.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Event this) (Event.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Event (TopLevelDeclarations.a this))\n    (deref-isa-Event (TopLevelDeclarations.b this))\n    (= (Event.min (TopLevelDeclarations.a this) ) 10)\n    (= (Event.min (TopLevelDeclarations.b this) ) 20)\n    (Duration.before (Event.duration (TopLevelDeclarations.a this) ) (Event.duration (TopLevelDeclarations.b this) ))\n  )\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfDuration Ref)) (Duration.inv.nosub instanceOfDuration)))\n(assert (exists ((instanceOfEvent Ref)) (Event.inv.nosub instanceOfEvent)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"testsmt7.k":{"model":"\nclass A {\n  a:Int = 1\n\n  fun f(k:Int) : Int\n  {\n    a + k\n  }\n}\n\nclass B {\n  iA:A\n  b:Int = 2\n\n  fun g(k:Int) : Int\n  {\n    iA.f(iA.a + b + k)\n  }\n}\n\nclass C {\n  iA:A\n  c:Int = 3\n\n  fun h(k:Int) : Int\n  {\n    iA.f(iA.a + c + k)\n  }\n}\n\nclass D {\n  iB:B\n  iC:C\n  d:Int = 4\n\n  req iB.iA = iC.iA\n\n  fun i(k:Int) : Int\n  {\n    iB.iA.a + iB.b + iC.c + d + k\n  }\n}\n\nclass Master {\n  d:D\n\n  fun main : Int\n  {\n    d.iB.iA.f(1) + d.iB.g(2) + d.i(3)\n  }\n  r:Int = main\n\n  req r = 21\n}\n\n","name":"testsmt7.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"element":"k","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"iA","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"b","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iA","type":"ElementValue"},"f"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iA","type":"ElementValue"},"a"]},{"element":"b","type":"ElementValue"}]},{"element":"k","type":"ElementValue"}]}],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"iA","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"c","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iA","type":"ElementValue"},"f"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iA","type":"ElementValue"},"a"]},{"element":"c","type":"ElementValue"}]},{"element":"k","type":"ElementValue"}]}],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"},"name":"iB","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"},"name":"iC","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"d","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},4],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iB","type":"ElementValue"},"iA"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iC","type":"ElementValue"},"iA"]}]},"type":"ConstraintDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iB","type":"ElementValue"},"iA"]},"a"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iB","type":"ElementValue"},"b"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iC","type":"ElementValue"},"c"]}]},{"element":"d","type":"ElementValue"}]},{"element":"k","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"i","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"Master","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["D"],"type":"QualifiedName"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"d","type":"ElementValue"},"iB"]},"iA"]},"f"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"d","type":"ElementValue"},"iB"]},"g"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}],"type":"Expression"}]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"d","type":"ElementValue"},"i"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"}],"type":"Expression"}]}]},"type":"ExpressionDecl"}],"ident":"main","typeParams":[],"params":[],"type":"FunDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"r","expr":{"element":"main","type":"ElementValue"},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"r","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},21],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"type":"LiteralInteger","i":1},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"iA","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"type":"LiteralInteger","i":2},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"args":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"exp":{"ident":"iA","type":"IdentExp"},"ident":"a","type":"DotExp"}}},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"iA","type":"IdentExp"},"ident":"f","type":"DotExp"}},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"iA","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"c","expr":{"type":"LiteralInteger","i":3},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"args":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"c","type":"IdentExp"},"exp1":{"exp":{"ident":"iA","type":"IdentExp"},"ident":"a","type":"DotExp"}}},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"iA","type":"IdentExp"},"ident":"f","type":"DotExp"}},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"iB","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"iC","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"d","expr":{"type":"LiteralInteger","i":4},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"exp":{"ident":"iC","type":"IdentExp"},"ident":"iA","type":"DotExp"},"exp1":{"exp":{"ident":"iB","type":"IdentExp"},"ident":"iA","type":"DotExp"}},"type":"ConstraintDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"d","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"iC","type":"IdentExp"},"ident":"c","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"iB","type":"IdentExp"},"ident":"b","type":"DotExp"},"exp1":{"exp":{"exp":{"ident":"iB","type":"IdentExp"},"ident":"iA","type":"DotExp"},"ident":"a","type":"DotExp"}}}}},"type":"ExpressionDecl"}],"ident":"i","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"Master","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["D"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"args":[{"exp":{"type":"LiteralInteger","i":3},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"d","type":"IdentExp"},"ident":"i","type":"DotExp"}},"exp1":{"op":"Plus","type":"BinExp","exp2":{"args":[{"exp":{"type":"LiteralInteger","i":2},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"exp":{"ident":"d","type":"IdentExp"},"ident":"iB","type":"DotExp"},"ident":"g","type":"DotExp"}},"exp1":{"args":[{"exp":{"type":"LiteralInteger","i":1},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"exp":{"exp":{"ident":"d","type":"IdentExp"},"ident":"iB","type":"DotExp"},"ident":"iA","type":"DotExp"},"ident":"f","type":"DotExp"}}}},"type":"ExpressionDecl"}],"ident":"main","typeParams":[],"params":[],"type":"FunDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"r","expr":{"ident":"main","type":"IdentExp"},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":21},"exp1":{"ident":"r","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfMaster!4 () Int\n  10)\n(define-fun instanceOfTopLevelDeclarations!5 () Int\n  16)\n(define-fun instanceOfD!3 () Int\n  8)\n(define-fun instanceOfC!2 () Int\n  7)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!6))\n(define-fun instanceOfB!1 () Int\n  5)\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!7 ((x!1 Int)) Int\n  (ite (= x!1 16) 16\n  (ite (= x!1 8) 8\n  (ite (= x!1 10) 10\n  (ite (= x!1 18) 18\n  (ite (= x!1 20) 20\n  (ite (= x!1 19) 19\n  (ite (= x!1 0) 0\n  (ite (= x!1 9) 9\n  (ite (= x!1 13) 13\n  (ite (= x!1 22) 22\n  (ite (= x!1 7) 7\n  (ite (= x!1 23) 23\n  (ite (= x!1 24) 24\n  (ite (= x!1 17) 17\n    5)))))))))))))))\n(define-fun k!6!8 ((x!1 Int)) Any\n  (ite (= x!1 19) (lift-B (mk-B 9 2))\n  (ite (= x!1 8) (lift-D (mk-D 19 20 4))\n  (ite (= x!1 24) (lift-C (mk-C 13 3))\n  (ite (= x!1 20) (lift-C (mk-C 9 3))\n  (ite (= x!1 10) (lift-Master (mk-Master 22 21))\n  (ite (= x!1 16) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 7) (lift-C (mk-C 18 3))\n  (ite (= x!1 22) (lift-D (mk-D 23 24 4))\n  (ite (= x!1 23) (lift-B (mk-B 13 2))\n  (ite (= x!1 5) (lift-B (mk-B 17 2))\n    (lift-A (mk-A 1)))))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (k!6!8 (k!7 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (iA Ref)(b Int)))))\n(declare-datatypes () ((C (mk-C (iA Ref)(c Int)))))\n(declare-datatypes () ((D (mk-D (iB Ref)(iC Ref)(d Int)))))\n(declare-datatypes () ((Master (mk-Master (d Ref)(r Int)))))\n(declare-sort TopLevelDeclarations)\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-Master (sel-Master Master))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-Master ((this Ref)) Bool\n  (is-lift-Master (deref this))\n)\n\n(define-fun deref-Master ((this Ref)) Master\n  (sel-Master (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-Master ((this Ref)) Bool\n  (deref-is-Master this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; --- B:\n\n(define-fun B.iA ((this Ref)) Ref\n  (iA (deref-B this))\n)\n\n(define-fun B.b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; --- C:\n\n(define-fun C.iA ((this Ref)) Ref\n  (iA (deref-C this))\n)\n\n(define-fun C.c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; --- D:\n\n(define-fun D.iB ((this Ref)) Ref\n  (iB (deref-D this))\n)\n\n(define-fun D.iC ((this Ref)) Ref\n  (iC (deref-D this))\n)\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; --- Master:\n\n(define-fun Master.d ((this Ref)) Ref\n  (d (deref-Master this))\n)\n\n(define-fun Master.r ((this Ref)) Int\n  (r (deref-Master this))\n)\n\n; ---------- methods: ----------\n\n; --- A:\n\n(define-fun A.f ((this Ref)(k Int)) Int\n    (+ (A.a this)  k)\n)\n\n; --- B:\n\n(define-fun B.g ((this Ref)(k Int)) Int\n    (A.f (B.iA this)  (+ (+ (A.a (B.iA this) ) (B.b this) ) k))\n)\n\n; --- C:\n\n(define-fun C.h ((this Ref)(k Int)) Int\n    (A.f (C.iA this)  (+ (+ (A.a (C.iA this) ) (C.c this) ) k))\n)\n\n; --- D:\n\n(define-fun D.i ((this Ref)(k Int)) Int\n    (+ (+ (+ (+ (A.a (B.iA (D.iB this) )) (B.b (D.iB this) )) (C.c (D.iC this) )) (D.d this) ) k)\n)\n\n; --- Master:\n\n(define-fun Master.main ((this Ref)) Int\n    (+ (+ (A.f (B.iA (D.iB (Master.d this) )) 1) (B.g (D.iB (Master.d this) ) 2)) (D.i (Master.d this)  3))\n)\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A.a this) 1)\n  )\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (= (B.b this) 2)\n    (deref-isa-A (B.iA this))\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- C:\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (= (C.c this) 3)\n    (deref-isa-A (C.iA this))\n  )\n)\n\n(define-fun C.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-C this)\n    (C.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --- D:\n\n(define-fun D.inv ((this Ref)) Bool\n  (and\n    (= (D.d this) 4)\n    (deref-isa-B (D.iB this))\n    (deref-isa-C (D.iC this))\n    (= (B.iA (D.iB this) ) (C.iA (D.iC this) ))\n  )\n)\n\n(define-fun D.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-D this)\n    (D.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; --- Master:\n\n(define-fun Master.inv ((this Ref)) Bool\n  (and\n    (= (Master.r this) (Master.main this) )\n    (deref-isa-D (Master.d this))\n    (= (Master.r this)  21)\n  )\n)\n\n(define-fun Master.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-Master this)\n    (Master.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Master this) (Master.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (C.inv.nosub instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (D.inv.nosub instanceOfD)))\n(assert (exists ((instanceOfMaster Ref)) (Master.inv.nosub instanceOfMaster)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"testsmt10.k":{"model":"\nclass A {\n  a:Int = 1\n\n  fun f(x:Int) : Int\n  {\n    a + x\n  }\n\n  fun g(x:Int) : Int\n  {\n    k:Int = f(x) + 1\n    a + f(x) + k + 1\n  }\n}\n\nclass B extending A {\n  b:Int = 2\n\n  fun h(x:Int) : Int\n  {\n    k1:Int = a + b\n    k2:Int = k1 + x\n    g(x)\n  }\n  r:Int = h(10)\n\n  req r = 25\n}\n\n","name":"testsmt10.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"element":"x","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"f","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"x","type":"ElementValue"}],"type":"Expression"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"f","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"x","type":"ElementValue"}],"type":"Expression"}]}]},{"element":"k","type":"ElementValue"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"b","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k1","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"element":"b","type":"ElementValue"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k2","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"k1","type":"ElementValue"},{"element":"x","type":"ElementValue"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"g","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"x","type":"ElementValue"}],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"r","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"h","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"r","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},25],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"type":"LiteralInteger","i":1},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k","expr":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"args":[{"exp":{"ident":"x","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"f","type":"IdentExp"}}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"args":[{"exp":{"ident":"x","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"f","type":"IdentExp"}},"exp1":{"ident":"a","type":"IdentExp"}}}},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"type":"LiteralInteger","i":2},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k1","expr":{"op":"Plus","type":"BinExp","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"k2","expr":{"op":"Plus","type":"BinExp","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"ident":"k1","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"args":[{"exp":{"ident":"x","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"g","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"r","expr":{"args":[{"exp":{"type":"LiteralInteger","i":10},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"h","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":25},"exp1":{"ident":"r","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  7)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun instanceOfB!1 () Int\n  4)\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-A (mk-A 1))\n  (ite (= x!1 4) (lift-B (mk-B 1 2 25))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 4) 4\n  (ite (= x!1 0) 0\n    7)))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)(r Int)))))\n(declare-sort TopLevelDeclarations)\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- A:\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (a (deref-B this)))\n)\n\n; --- B:\n\n(define-fun B.b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n(define-fun B.r ((this Ref)) Int\n  (r (deref-B this))\n)\n\n; ---------- methods: ----------\n\n; --- A:\n\n(define-fun A.f ((this Ref)(x Int)) Int\n    (+ (A.a this)  x)\n)\n\n(define-fun A.g ((this Ref)(x Int)) Int\n    (let ((k (+ (A.f this x) 1)))\n    (+ (+ (+ (A.a this)  (A.f this x)) k) 1))\n)\n\n; --- B:\n\n(define-fun B.h ((this Ref)(x Int)) Int\n    (let ((k1 (+ (A.a this)  (B.b this) )))\n    (let ((k2 (+ k1 x)))\n      (A.g this x)))\n)\n\n; ---------- invariants: ----------\n\n; --- A:\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A.a this) 1)\n  )\n)\n\n(define-fun A.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-A this)\n    (A.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --- B:\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (A.inv this)\n    (= (B.b this) 2)\n    (= (B.r this) (B.h this 10))\n    (= (B.r this)  25)\n  )\n)\n\n(define-fun B.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-B this)\n    (B.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfA Ref)) (A.inv.nosub instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (B.inv.nosub instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"},"testsmt4.k":{"model":"\nclass Event {\n  t1:Int\n  t2:Int\n\n  req t1 < t2\n\n  req t2 - t1 < 10\n}\n\nclass Schedule {\n  a:Event\n  b:Event\n  c:Event\n  d:Event\n\n  fun before(e1:Event,e2:Event) : Bool\n  {\n    e1.t2 < e2.t1\n  }\n\n  fun meets(e1:Event,e2:Event) : Bool\n  {\n    e1.t2 = e2.t1\n  }\n\n  fun contains(e1:Event,e2:Event) : Bool\n  {\n    e1.t1 < e2.t1 && e2.t2 < e1.t2\n  }\n\n  req meets(a,b)\n\n  req before(b,c)\n\n  req contains(c,d)\n}\n\n","name":"testsmt4.k","json2":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t1","type":"ElementValue"},{"element":"t2","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Minus",{"element":"t2","type":"ElementValue"},{"element":"t1","type":"ElementValue"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Schedule","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e1","type":"ElementValue"},"t2"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e2","type":"ElementValue"},"t1"]}]},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e1","type":"Param"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e1","type":"ElementValue"},"t2"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e2","type":"ElementValue"},"t1"]}]},"type":"ExpressionDecl"}],"ident":"meets","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e1","type":"Param"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e1","type":"ElementValue"},"t1"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e2","type":"ElementValue"},"t1"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e2","type":"ElementValue"},"t2"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e1","type":"ElementValue"},"t2"]}]}]},"type":"ExpressionDecl"}],"ident":"contains","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e1","type":"Param"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"meets","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"a","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"b","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"before","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"b","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"c","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"contains","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"c","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"d","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"op":"Minus","type":"BinExp","exp2":{"ident":"t1","type":"IdentExp"},"exp1":{"ident":"t2","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Schedule","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"e2","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"exp":{"ident":"e1","type":"IdentExp"},"ident":"t2","type":"DotExp"}},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e1","type":"Param"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"EQ","type":"BinExp","exp2":{"exp":{"ident":"e2","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"exp":{"ident":"e1","type":"IdentExp"},"ident":"t2","type":"DotExp"}},"type":"ExpressionDecl"}],"ident":"meets","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e1","type":"Param"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"And","type":"BinExp","exp2":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"e1","type":"IdentExp"},"ident":"t2","type":"DotExp"},"exp1":{"exp":{"ident":"e2","type":"IdentExp"},"ident":"t2","type":"DotExp"}},"exp1":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"e2","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"exp":{"ident":"e1","type":"IdentExp"},"ident":"t1","type":"DotExp"}}},"type":"ExpressionDecl"}],"ident":"contains","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e1","type":"Param"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"exp":{"args":[{"exp":{"ident":"a","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"b","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"meets","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"ident":"b","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"c","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"before","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"ident":"c","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"d","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"contains","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfEvent!0 () Int\n  2)\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  8)\n(define-fun instanceOfSchedule!1 () Int\n  4)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 4) (lift-Schedule (mk-Schedule 9 10 11 12))\n  (ite (= x!1 12) (lift-Event (mk-Event 8856 8857))\n  (ite (= x!1 11) (lift-Event (mk-Event 8855 8858))\n  (ite (= x!1 8) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 9) (lift-Event (mk-Event 8852 8853))\n  (ite (= x!1 2) (lift-Event (mk-Event 0 1))\n    (lift-Event (mk-Event 8853 8854)))))))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 10) 10\n  (ite (= x!1 11) 11\n  (ite (= x!1 12) 12\n  (ite (= x!1 4) 4\n  (ite (= x!1 9) 9\n  (ite (= x!1 8) 8\n    2)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ---------- options: ----------\n\n(set-option :smt.macro-finder true)\n\n; ---------- datatypes: ----------\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Event (mk-Event (t1 Int)(t2 Int)))))\n(declare-datatypes () ((Schedule (mk-Schedule (a Ref)(b Ref)(c Ref)(d Ref)))))\n(declare-sort TopLevelDeclarations)\n\n; ---------- heap: ----------\n\n(declare-datatypes () ((Any\n  (lift-Event (sel-Event Event))\n  (lift-Schedule (sel-Schedule Schedule))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ---------- class specific is/deref-functions: ----------\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-Schedule ((this Ref)) Bool\n  (is-lift-Schedule (deref this))\n)\n\n(define-fun deref-Schedule ((this Ref)) Schedule\n  (sel-Schedule (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ---------- isa-functions: ----------\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-Schedule ((this Ref)) Bool\n  (deref-is-Schedule this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ---------- getters: ----------\n\n; --- Event:\n\n(define-fun Event.t1 ((this Ref)) Int\n  (t1 (deref-Event this))\n)\n\n(define-fun Event.t2 ((this Ref)) Int\n  (t2 (deref-Event this))\n)\n\n; --- Schedule:\n\n(define-fun Schedule.a ((this Ref)) Ref\n  (a (deref-Schedule this))\n)\n\n(define-fun Schedule.b ((this Ref)) Ref\n  (b (deref-Schedule this))\n)\n\n(define-fun Schedule.c ((this Ref)) Ref\n  (c (deref-Schedule this))\n)\n\n(define-fun Schedule.d ((this Ref)) Ref\n  (d (deref-Schedule this))\n)\n\n; ---------- methods: ----------\n\n; --- Schedule:\n\n(define-fun Schedule.before ((this Ref)(e1 Ref)(e2 Ref)) Bool\n    (< (Event.t2 e1) (Event.t1 e2))\n)\n\n(define-fun Schedule.meets ((this Ref)(e1 Ref)(e2 Ref)) Bool\n    (= (Event.t2 e1) (Event.t1 e2))\n)\n\n(define-fun Schedule.contains ((this Ref)(e1 Ref)(e2 Ref)) Bool\n    (and (< (Event.t1 e1) (Event.t1 e2)) (< (Event.t2 e2) (Event.t2 e1)))\n)\n\n; ---------- invariants: ----------\n\n; --- Event:\n\n(define-fun Event.inv ((this Ref)) Bool\n  (and\n    (< (Event.t1 this)  (Event.t2 this) )\n    (< (- (Event.t2 this)  (Event.t1 this) ) 10)\n  )\n)\n\n(define-fun Event.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-Event this)\n    (Event.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Event this) (Event.inv this))\n))\n\n; --- Schedule:\n\n(define-fun Schedule.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Event (Schedule.a this))\n    (deref-isa-Event (Schedule.b this))\n    (deref-isa-Event (Schedule.c this))\n    (deref-isa-Event (Schedule.d this))\n    (Schedule.meets this (Schedule.a this)  (Schedule.b this) )\n    (Schedule.before this (Schedule.b this)  (Schedule.c this) )\n    (Schedule.contains this (Schedule.c this)  (Schedule.d this) )\n  )\n)\n\n(define-fun Schedule.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-Schedule this)\n    (Schedule.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Schedule this) (Schedule.inv this))\n))\n\n; --- TopLevelDeclarations:\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(define-fun TopLevelDeclarations.inv.nosub ((this Ref)) Bool\n  (and\n    (deref-is-TopLevelDeclarations this)\n    (TopLevelDeclarations.inv this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ---------- assertions: ----------\n\n(assert (exists ((instanceOfEvent Ref)) (Event.inv.nosub instanceOfEvent)))\n(assert (exists ((instanceOfSchedule Ref)) (Schedule.inv.nosub instanceOfSchedule)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (TopLevelDeclarations.inv.nosub instanceOfTopLevelDeclarations)))\n\n"}}