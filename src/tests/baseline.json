{"unsat1.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"name":"p","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"name":"q","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"name":"r","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"name":"s","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"ParenExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"OR",{"type":"ElementValue","element":"p"},{"type":"ElementValue","element":"q"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"ParenExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Implies",{"type":"ElementValue","element":"r"},{"type":"ElementValue","element":"s"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"ParenExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Implies",{"type":"ElementValue","element":"s"},{"type":"Expression","operand":[{"type":"ParenExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Iff",{"type":"ElementValue","element":"q"},{"type":"ElementValue","element":"r"}]}]}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"ParenExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"OR",{"type":"ElementValue","element":"p"},{"type":"ElementValue","element":"r"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"ParenExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"OR",{"type":"ElementValue","element":"r"},{"type":"ElementValue","element":"s"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"UnaryExp","element":"ElementValue"},"Not",{"type":"Expression","operand":[{"type":"ParenExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"ElementValue","element":"r"},{"type":"ElementValue","element":"q"}]}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"UnaryExp","element":"ElementValue"},"Not",{"type":"Expression","operand":[{"type":"ParenExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"ElementValue","element":"s"},{"type":"ElementValue","element":"p"}]}]}]}}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"BoolType"},"name":"p","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"BoolType"},"name":"q","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"BoolType"},"name":"r","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"BoolType"},"name":"s","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"exp":{"op":"OR","exp2":{"ident":"q","type":"IdentExp"},"exp1":{"ident":"p","type":"IdentExp"},"type":"BinExp"},"type":"ParenExp"}},{"type":"ConstraintDecl","exp":{"exp":{"op":"Implies","exp2":{"ident":"s","type":"IdentExp"},"exp1":{"ident":"r","type":"IdentExp"},"type":"BinExp"},"type":"ParenExp"}},{"type":"ConstraintDecl","exp":{"exp":{"op":"Implies","exp2":{"exp":{"op":"Iff","exp2":{"ident":"r","type":"IdentExp"},"exp1":{"ident":"q","type":"IdentExp"},"type":"BinExp"},"type":"ParenExp"},"exp1":{"ident":"s","type":"IdentExp"},"type":"BinExp"},"type":"ParenExp"}},{"type":"ConstraintDecl","exp":{"exp":{"op":"OR","exp2":{"ident":"r","type":"IdentExp"},"exp1":{"ident":"p","type":"IdentExp"},"type":"BinExp"},"type":"ParenExp"}},{"type":"ConstraintDecl","exp":{"exp":{"op":"OR","exp2":{"ident":"s","type":"IdentExp"},"exp1":{"ident":"r","type":"IdentExp"},"type":"BinExp"},"type":"ParenExp"}},{"type":"ConstraintDecl","exp":{"op":"Not","exp":{"exp":{"op":"And","exp2":{"ident":"q","type":"IdentExp"},"exp1":{"ident":"r","type":"IdentExp"},"type":"BinExp"},"type":"ParenExp"},"type":"UnaryExp"}},{"type":"ConstraintDecl","exp":{"op":"Not","exp":{"exp":{"op":"And","exp2":{"ident":"p","type":"IdentExp"},"exp1":{"ident":"s","type":"IdentExp"},"type":"BinExp"},"type":"ParenExp"},"type":"UnaryExp"}}],"type":"Model"},"typeChecks":true,"name":"unsat1.k","model":"\np:Bool\n\nq:Bool\n\nr:Bool\n\ns:Bool\n\nreq (p || q)\n\nreq (r => s)\n\nreq (s => (q <=> r))\n\nreq (p || r)\n\nreq (r || s)\n\nreq !(r && q)\n\nreq !(s && p)\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (p Bool)(q Bool)(r Bool)(s Bool)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.p: ---\n\n(define-fun TopLevelDeclarations!p ((this Ref)) Bool\n  (p (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.q: ---\n\n(define-fun TopLevelDeclarations!q ((this Ref)) Bool\n  (q (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.r: ---\n\n(define-fun TopLevelDeclarations!r ((this Ref)) Bool\n  (r (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.s: ---\n\n(define-fun TopLevelDeclarations!s ((this Ref)) Bool\n  (s (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (or (TopLevelDeclarations!p this) (TopLevelDeclarations!q this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert584))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (=> (TopLevelDeclarations!r this) (TopLevelDeclarations!s this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert585))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (=> (TopLevelDeclarations!s this) (= (TopLevelDeclarations!q this) (TopLevelDeclarations!r this)))\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert586))\n\n; --- Invariant 4: ---\n\n(define-fun TopLevelDeclarations.inv4 ((this Ref)) Bool\n  (or (TopLevelDeclarations!p this) (TopLevelDeclarations!r this))\n)\n\n(assert (! (TopLevelDeclarations.inv4 0) :named _xkassert587))\n\n; --- Invariant 5: ---\n\n(define-fun TopLevelDeclarations.inv5 ((this Ref)) Bool\n  (or (TopLevelDeclarations!r this) (TopLevelDeclarations!s this))\n)\n\n(assert (! (TopLevelDeclarations.inv5 0) :named _xkassert588))\n\n; --- Invariant 6: ---\n\n(define-fun TopLevelDeclarations.inv6 ((this Ref)) Bool\n  (not (and (TopLevelDeclarations!r this) (TopLevelDeclarations!q this)))\n)\n\n(assert (! (TopLevelDeclarations.inv6 0) :named _xkassert589))\n\n; --- Invariant 7: ---\n\n(define-fun TopLevelDeclarations.inv7 ((this Ref)) Bool\n  (not (and (TopLevelDeclarations!s this) (TopLevelDeclarations!p this)))\n)\n\n(assert (! (TopLevelDeclarations.inv7 0) :named _xkassert590))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n  )\n)\n\n","smtModel":"()"},"unsat3.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"foo","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"UnaryExp","element":"ElementValue"},"Neg",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}}],"spec":[{"pre":"true","type":"FunSpec","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"pre":"false","type":"FunSpec","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"Expression","operand":[{"type":"ResultExp","element":"ElementValue"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}}]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"IntType"},"ident":"foo","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"Neg","exp":{"i":1,"type":"LiteralInteger"},"type":"UnaryExp"}}],"spec":[{"pre":"true","type":"FunSpec","exp":{"op":"GT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}},{"pre":"false","type":"FunSpec","exp":{"op":"GT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"type":"ResultExp"},"type":"BinExp"}}]}],"type":"Model"},"typeChecks":true,"name":"unsat3.k","model":"\nfun foo(x:Int) : Int\n  pre x > 0\n  post $result > 0\n{\n  -1\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------------------\n;   Methods for class TopLevelDeclarations:\n; -------------------------------------------\n\n(define-fun TopLevelDeclarations.foo ((this Ref)(x Int)) Int\n  (- 1)\n)\n\n(define-fun TopLevelDeclarations!foo ((this Ref)(x Int)) Int\n  (- 1)\n)\n\n(assert (!(forall ((this Ref)(x Int))\n  (=>\n    (and\n      (deref-is-TopLevelDeclarations this)\n      (> x 0)\n    )\n    (let (($result (TopLevelDeclarations!foo this x)))\n      (and\n        (> $result 0)\n      )\n    )\n  )\n) :named _xkassert600))\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n  )\n)\n\n","smtModel":"()"},"testsmt20.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"time","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"value","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["time"],"type":"QualifiedName"}]},"name":"duration","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"RocketMachine","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"e","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"imp","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"s","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s"},{"type":"ElementValue","element":"e"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Times",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},50]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"s"},"duration"]},"value"]}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}}],"spec":[{"pre":"false","type":"FunSpec","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"ResultExp","element":"ElementValue"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1800]}]}}]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"impe","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"imp"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"e"}]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"impe"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1500]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["RocketMachine"],"type":"QualifiedName"}]},"name":"myRocket","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"time","members":[{"ty":{"type":"IntType"},"name":"value","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"args":[],"ident":{"names":["time"],"type":"QualifiedName"},"type":"IdentType"},"name":"duration","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"RocketMachine","members":[{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"e","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"imp","typeParams":[],"type":"FunDecl","params":[{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"s","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"trueBranch":{"op":"Times","exp2":{"ident":"value","exp":{"ident":"duration","exp":{"ident":"s","type":"IdentExp"},"type":"DotExp"},"type":"DotExp"},"exp1":{"i":50,"type":"LiteralInteger"},"type":"BinExp"},"falseBranch":{"i":0,"type":"LiteralInteger"},"type":"IfExp","cond":{"op":"EQ","exp2":{"ident":"e","type":"IdentExp"},"exp1":{"ident":"s","type":"IdentExp"},"type":"BinExp"}}}],"spec":[{"pre":"false","type":"FunSpec","exp":{"op":"LT","exp2":{"i":1800,"type":"LiteralInteger"},"exp1":{"type":"ResultExp"},"type":"BinExp"}}]},{"ty":{"type":"IntType"},"assignment":false,"name":"impe","expr":{"args":[{"type":"PositionalArgument","exp":{"ident":"e","type":"IdentExp"}}],"exp1":{"ident":"imp","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":1500,"type":"LiteralInteger"},"exp1":{"ident":"impe","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["RocketMachine"],"type":"QualifiedName"},"type":"IdentType"},"name":"myRocket","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt20.k","model":"\nclass time {\n  value:Int\n}\n\nclass Event {\n  duration:time\n}\n\nclass RocketMachine {\n  e:Event\n\n  fun imp(s:Event) : Int\n    post $result < 1800\n  {\n    if s = e then\n      50 * s.duration.value\n    else\n      0\n  }\n  impe:Int = imp(e)\n\n  req impe > 1500\n}\n\nmyRocket:RocketMachine\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (myRocket Ref)))))\n(declare-datatypes () ((time (mk-time (value Int)))))\n(declare-datatypes () ((Event (mk-Event (duration Ref)))))\n(declare-datatypes () ((RocketMachine (mk-RocketMachine (e Ref)(impe Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-time (sel-time time))\n  (lift-Event (sel-Event Event))\n  (lift-RocketMachine (sel-RocketMachine RocketMachine))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-time ((this Ref)) Bool\n  (is-lift-time (deref this))\n)\n\n(define-fun deref-time ((this Ref)) time\n  (sel-time (deref this))\n)\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-RocketMachine ((this Ref)) Bool\n  (is-lift-RocketMachine (deref this))\n)\n\n(define-fun deref-RocketMachine ((this Ref)) RocketMachine\n  (sel-RocketMachine (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-time ((this Ref)) Bool\n  (deref-is-time this)\n)\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-RocketMachine ((this Ref)) Bool\n  (deref-is-RocketMachine this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.myRocket: ---\n\n(define-fun TopLevelDeclarations!myRocket ((this Ref)) Ref\n  (myRocket (deref-TopLevelDeclarations this))\n)\n\n; ---------------------------\n;   Getters for class time:\n; ---------------------------\n\n; --- getters for time.value: ---\n\n(define-fun time.value ((this Ref)) Int\n  (value (deref-time this))\n)\n\n; ----------------------------\n;   Getters for class Event:\n; ----------------------------\n\n; --- getters for Event.duration: ---\n\n(define-fun Event.duration ((this Ref)) Ref\n  (duration (deref-Event this))\n)\n\n(define-fun Event!duration ((this Ref)) Ref\n  (duration (deref-Event this))\n)\n\n; ------------------------------------\n;   Getters for class RocketMachine:\n; ------------------------------------\n\n; --- getters for RocketMachine.e: ---\n\n(define-fun RocketMachine.e ((this Ref)) Ref\n  (e (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!e ((this Ref)) Ref\n  (e (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.impe: ---\n\n(define-fun RocketMachine!impe ((this Ref)) Int\n  (impe (deref-RocketMachine this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------------------\n;   Methods for class RocketMachine:\n; ------------------------------------\n\n(define-fun RocketMachine.imp ((this Ref)(s Ref)) Int\n  (ite (= s (RocketMachine.e this)) (* 50 (time.value (Event.duration s))) 0)\n)\n\n(define-fun RocketMachine!imp ((this Ref)(s Ref)) Int\n  (ite (= s (RocketMachine!e this)) (* 50 (time.value (Event.duration s))) 0)\n)\n\n(assert (!(forall ((this Ref)(s Ref))\n  (=>\n    (and\n      (deref-is-RocketMachine this)\n      (deref-isa-Event s)\n    )\n    (let (($result (RocketMachine!imp this s)))\n      (and\n        (< $result 1800)\n      )\n    )\n  )\n) :named _xkassert352))\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (deref-isa-RocketMachine (TopLevelDeclarations!myRocket this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert353))\n\n\n\n; -----------------------------\n;   Invariant for class time:\n; -----------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-time time)\n(declare-const const-2-time time)\n(declare-const const-3-time time)\n(declare-const const-4-time time)\n\n\n\n; ------------------------------\n;   Invariant for class Event:\n; ------------------------------\n\n; --- Constants: ---\n\n(declare-const const-5-Event Event)\n(declare-const const-6-Event Event)\n(declare-const const-7-Event Event)\n\n; --- Invariant 1: ---\n\n(define-fun Event.inv1 ((this Ref)) Bool\n  (deref-isa-time (Event!duration this))\n)\n\n(assert (! (Event.inv1 5) :named _xkassert354))\n(assert (! (Event.inv1 6) :named _xkassert355))\n(assert (! (Event.inv1 7) :named _xkassert356))\n\n\n\n; --------------------------------------\n;   Invariant for class RocketMachine:\n; --------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-8-RocketMachine RocketMachine)\n(declare-const const-9-RocketMachine RocketMachine)\n\n; --- Invariant 1: ---\n\n(define-fun RocketMachine.inv1 ((this Ref)) Bool\n  (= (RocketMachine!impe this) (RocketMachine!imp this (RocketMachine!e this)))\n)\n\n(assert (! (RocketMachine.inv1 8) :named _xkassert357))\n(assert (! (RocketMachine.inv1 9) :named _xkassert358))\n\n; --- Invariant 2: ---\n\n(define-fun RocketMachine.inv2 ((this Ref)) Bool\n  (deref-isa-Event (RocketMachine!e this))\n)\n\n(assert (! (RocketMachine.inv2 8) :named _xkassert359))\n(assert (! (RocketMachine.inv2 9) :named _xkassert360))\n\n; --- Invariant 3: ---\n\n(define-fun RocketMachine.inv3 ((this Ref)) Bool\n  (> (RocketMachine!impe this) 1500)\n)\n\n(assert (! (RocketMachine.inv3 8) :named _xkassert361))\n(assert (! (RocketMachine.inv3 9) :named _xkassert362))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-time const-1-time))\n        2 (lift-time const-2-time))\n        3 (lift-time const-3-time))\n        4 (lift-time const-4-time))\n        5 (lift-Event const-5-Event))\n        6 (lift-Event const-6-Event))\n        7 (lift-Event const-7-Event))\n        8 (lift-RocketMachine const-8-RocketMachine))\n        9 (lift-RocketMachine const-9-RocketMachine))\n  )\n)\n\n","smtModel":"(define-fun const-9-RocketMachine () RocketMachine\n  (mk-RocketMachine 7 1650))\n(define-fun const-7-Event () Event\n  (mk-Event 1))\n(define-fun const-2-time () time\n  (mk-time 32))\n(define-fun const-3-time () time\n  (mk-time 12))\n(define-fun const-5-Event () Event\n  (mk-Event 2))\n(define-fun const-6-Event () Event\n  (mk-Event 1))\n(define-fun const-4-time () time\n  (mk-time 13))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 9))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!10))\n(define-fun const-1-time () time\n  (mk-time 33))\n(define-fun const-8-RocketMachine () RocketMachine\n  (mk-RocketMachine 6 1650))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 2))\n  (ite (= x!1 4) (lift-time (mk-time 13))\n  (ite (= x!1 3) (lift-time (mk-time 12))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9))\n  (ite (= x!1 2) (lift-time (mk-time 32))\n  (ite (= x!1 1) (lift-time (mk-time 33))\n  (ite (= x!1 6) (lift-Event (mk-Event 1))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-time (mk-time 12))\n  (ite (= x!1 2) (lift-time (mk-time 32))\n  (ite (= x!1 1) (lift-time (mk-time 33))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9))\n    null))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 2))\n  (ite (= x!1 4) (lift-time (mk-time 13))\n  (ite (= x!1 3) (lift-time (mk-time 12))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9))\n  (ite (= x!1 8) (lift-RocketMachine (mk-RocketMachine 6 1650))\n  (ite (= x!1 2) (lift-time (mk-time 32))\n  (ite (= x!1 1) (lift-time (mk-time 33))\n  (ite (= x!1 7) (lift-Event (mk-Event 1))\n  (ite (= x!1 6) (lift-Event (mk-Event 1))\n    null))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 2))\n  (ite (= x!1 4) (lift-time (mk-time 13))\n  (ite (= x!1 3) (lift-time (mk-time 12))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9))\n  (ite (= x!1 2) (lift-time (mk-time 32))\n  (ite (= x!1 1) (lift-time (mk-time 33))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-time (mk-time 32))\n  (ite (= x!1 1) (lift-time (mk-time 33))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 2))\n  (ite (= x!1 4) (lift-time (mk-time 13))\n  (ite (= x!1 3) (lift-time (mk-time 12))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9))\n  (ite (= x!1 2) (lift-time (mk-time 32))\n  (ite (= x!1 1) (lift-time (mk-time 33))\n  (ite (= x!1 7) (lift-Event (mk-Event 1))\n  (ite (= x!1 6) (lift-Event (mk-Event 1))\n    null)))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 4) (lift-time (mk-time 13))\n  (ite (= x!1 3) (lift-time (mk-time 12))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9))\n  (ite (= x!1 2) (lift-time (mk-time 32))\n  (ite (= x!1 1) (lift-time (mk-time 33))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-time (mk-time 33))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9))\n    null)))\n(define-fun k!10 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 2))\n  (ite (= x!1 4) (lift-time (mk-time 13))\n  (ite (= x!1 3) (lift-time (mk-time 12))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9))\n  (ite (= x!1 8) (lift-RocketMachine (mk-RocketMachine 6 1650))\n  (ite (= x!1 2) (lift-time (mk-time 32))\n  (ite (= x!1 1) (lift-time (mk-time 33))\n  (ite (= x!1 9) (lift-RocketMachine (mk-RocketMachine 7 1650))\n  (ite (= x!1 7) (lift-Event (mk-Event 1))\n  (ite (= x!1 6) (lift-Event (mk-Event 1))\n    null)))))))))))"},"unsat5.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"a","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"x"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"x","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"a","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"unsat5.k","model":"\nclass A {\n  x:Int\n\n  req x > 10\n}\n\nclass B {\n  a:A\n\n  req a.x < 1\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (a Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B.a ((this Ref)) Ref\n  (a (deref-B this))\n)\n\n(define-fun B!a ((this Ref)) Ref\n  (a (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n(declare-const const-2-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (> (A!x this) 10)\n)\n\n(assert (! (A.inv1 1) :named _xkassert606))\n(assert (! (A.inv1 2) :named _xkassert607))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (deref-isa-A (B!a this))\n)\n\n(assert (! (B.inv1 3) :named _xkassert608))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (< (A.x (B!a this)) 1)\n)\n\n(assert (! (B.inv2 3) :named _xkassert609))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-A const-2-A))\n        3 (lift-B const-3-B))\n  )\n)\n\n","smtModel":"()"},"inheritance11.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"a","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"b","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"c","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"d","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"e","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"f","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"g","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"a"},{"type":"ElementValue","element":"b"}]},{"type":"ElementValue","element":"c"}]},{"type":"ElementValue","element":"d"}]},{"type":"ElementValue","element":"e"}]},{"type":"ElementValue","element":"f"}]},{"type":"ElementValue","element":"g"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},90]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["C"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"E","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["D"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"F","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["E"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"G","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["F"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"H","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["G"],"type":"QualifiedName"}]}]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"objectA","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"TypeCastCheckExp","element":"ElementValue"},"false",{"type":"ElementValue","element":"objectA"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["H"],"type":"QualifiedName"}]}]}}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"a","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"b","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"c","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"d","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"e","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"f","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"g","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"i":90,"type":"LiteralInteger"},"exp1":{"op":"Plus","exp2":{"ident":"g","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"f","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"e","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"d","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"c","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["C"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"E","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["D"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"F","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["E"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"G","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["F"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"H","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["G"],"type":"QualifiedName"},"type":"IdentType"}]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"objectA","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"cast":"false","ty":{"args":[],"ident":{"names":["H"],"type":"QualifiedName"},"type":"IdentType"},"type":"TypeCastCheckExp","exp":{"ident":"objectA","type":"IdentExp"}}}],"type":"Model"},"typeChecks":true,"name":"inheritance11.k","model":"\nclass A {\n  a:Int\n  b:Int\n  c:Int\n  d:Int\n  e:Int\n  f:Int\n  g:Int\n\n  req a + b + c + d + e + f + g = 90\n}\n\nclass B extending A\n\nclass C extending B\n\nclass D extending C\n\nclass E extending D\n\nclass F extending E\n\nclass G extending F\n\nclass H extending G\n\nobjectA:A\n\nreq objectA is H\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (objectA Ref)))))\n(declare-datatypes () ((A (mk-A (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((D (mk-D (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((E (mk-E (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((F (mk-F (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((G (mk-G (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((H (mk-H (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-E (sel-E E))\n  (lift-F (sel-F F))\n  (lift-G (sel-G G))\n  (lift-H (sel-H H))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-E ((this Ref)) Bool\n  (is-lift-E (deref this))\n)\n\n(define-fun deref-E ((this Ref)) E\n  (sel-E (deref this))\n)\n\n(define-fun deref-is-F ((this Ref)) Bool\n  (is-lift-F (deref this))\n)\n\n(define-fun deref-F ((this Ref)) F\n  (sel-F (deref this))\n)\n\n(define-fun deref-is-G ((this Ref)) Bool\n  (is-lift-G (deref this))\n)\n\n(define-fun deref-G ((this Ref)) G\n  (sel-G (deref this))\n)\n\n(define-fun deref-is-H ((this Ref)) Bool\n  (is-lift-H (deref this))\n)\n\n(define-fun deref-H ((this Ref)) H\n  (sel-H (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (or\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-E ((this Ref)) Bool\n  (or\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-F ((this Ref)) Bool\n  (or\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-G ((this Ref)) Bool\n  (or\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-H ((this Ref)) Bool\n  (deref-is-H this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.objectA: ---\n\n(define-fun TopLevelDeclarations!objectA ((this Ref)) Ref\n  (objectA (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; --- getters for A.b: ---\n\n(define-fun A!b ((this Ref)) Int\n  (b (deref-A this))\n)\n\n; --- getters for A.c: ---\n\n(define-fun A!c ((this Ref)) Int\n  (c (deref-A this))\n)\n\n; --- getters for A.d: ---\n\n(define-fun A!d ((this Ref)) Int\n  (d (deref-A this))\n)\n\n; --- getters for A.e: ---\n\n(define-fun A!e ((this Ref)) Int\n  (e (deref-A this))\n)\n\n; --- getters for A.f: ---\n\n(define-fun A!f ((this Ref)) Int\n  (f (deref-A this))\n)\n\n; --- getters for A.g: ---\n\n(define-fun A!g ((this Ref)) Int\n  (g (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; --- getters for B.c: ---\n\n(define-fun B!c ((this Ref)) Int\n  (c (deref-B this))\n)\n\n; --- getters for B.d: ---\n\n(define-fun B!d ((this Ref)) Int\n  (d (deref-B this))\n)\n\n; --- getters for B.e: ---\n\n(define-fun B!e ((this Ref)) Int\n  (e (deref-B this))\n)\n\n; --- getters for B.f: ---\n\n(define-fun B!f ((this Ref)) Int\n  (f (deref-B this))\n)\n\n; --- getters for B.g: ---\n\n(define-fun B!g ((this Ref)) Int\n  (g (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.a: ---\n\n(define-fun C!a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n; --- getters for C.b: ---\n\n(define-fun C!b ((this Ref)) Int\n  (b (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; --- getters for C.d: ---\n\n(define-fun C!d ((this Ref)) Int\n  (d (deref-C this))\n)\n\n; --- getters for C.e: ---\n\n(define-fun C!e ((this Ref)) Int\n  (e (deref-C this))\n)\n\n; --- getters for C.f: ---\n\n(define-fun C!f ((this Ref)) Int\n  (f (deref-C this))\n)\n\n; --- getters for C.g: ---\n\n(define-fun C!g ((this Ref)) Int\n  (g (deref-C this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.a: ---\n\n(define-fun D!a ((this Ref)) Int\n  (a (deref-D this))\n)\n\n; --- getters for D.b: ---\n\n(define-fun D!b ((this Ref)) Int\n  (b (deref-D this))\n)\n\n; --- getters for D.c: ---\n\n(define-fun D!c ((this Ref)) Int\n  (c (deref-D this))\n)\n\n; --- getters for D.d: ---\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; --- getters for D.e: ---\n\n(define-fun D!e ((this Ref)) Int\n  (e (deref-D this))\n)\n\n; --- getters for D.f: ---\n\n(define-fun D!f ((this Ref)) Int\n  (f (deref-D this))\n)\n\n; --- getters for D.g: ---\n\n(define-fun D!g ((this Ref)) Int\n  (g (deref-D this))\n)\n\n; ------------------------\n;   Getters for class E:\n; ------------------------\n\n; --- getters for E.a: ---\n\n(define-fun E!a ((this Ref)) Int\n  (a (deref-E this))\n)\n\n; --- getters for E.b: ---\n\n(define-fun E!b ((this Ref)) Int\n  (b (deref-E this))\n)\n\n; --- getters for E.c: ---\n\n(define-fun E!c ((this Ref)) Int\n  (c (deref-E this))\n)\n\n; --- getters for E.d: ---\n\n(define-fun E!d ((this Ref)) Int\n  (d (deref-E this))\n)\n\n; --- getters for E.e: ---\n\n(define-fun E!e ((this Ref)) Int\n  (e (deref-E this))\n)\n\n; --- getters for E.f: ---\n\n(define-fun E!f ((this Ref)) Int\n  (f (deref-E this))\n)\n\n; --- getters for E.g: ---\n\n(define-fun E!g ((this Ref)) Int\n  (g (deref-E this))\n)\n\n; ------------------------\n;   Getters for class F:\n; ------------------------\n\n; --- getters for F.a: ---\n\n(define-fun F!a ((this Ref)) Int\n  (a (deref-F this))\n)\n\n; --- getters for F.b: ---\n\n(define-fun F!b ((this Ref)) Int\n  (b (deref-F this))\n)\n\n; --- getters for F.c: ---\n\n(define-fun F!c ((this Ref)) Int\n  (c (deref-F this))\n)\n\n; --- getters for F.d: ---\n\n(define-fun F!d ((this Ref)) Int\n  (d (deref-F this))\n)\n\n; --- getters for F.e: ---\n\n(define-fun F!e ((this Ref)) Int\n  (e (deref-F this))\n)\n\n; --- getters for F.f: ---\n\n(define-fun F!f ((this Ref)) Int\n  (f (deref-F this))\n)\n\n; --- getters for F.g: ---\n\n(define-fun F!g ((this Ref)) Int\n  (g (deref-F this))\n)\n\n; ------------------------\n;   Getters for class G:\n; ------------------------\n\n; --- getters for G.a: ---\n\n(define-fun G!a ((this Ref)) Int\n  (a (deref-G this))\n)\n\n; --- getters for G.b: ---\n\n(define-fun G!b ((this Ref)) Int\n  (b (deref-G this))\n)\n\n; --- getters for G.c: ---\n\n(define-fun G!c ((this Ref)) Int\n  (c (deref-G this))\n)\n\n; --- getters for G.d: ---\n\n(define-fun G!d ((this Ref)) Int\n  (d (deref-G this))\n)\n\n; --- getters for G.e: ---\n\n(define-fun G!e ((this Ref)) Int\n  (e (deref-G this))\n)\n\n; --- getters for G.f: ---\n\n(define-fun G!f ((this Ref)) Int\n  (f (deref-G this))\n)\n\n; --- getters for G.g: ---\n\n(define-fun G!g ((this Ref)) Int\n  (g (deref-G this))\n)\n\n; ------------------------\n;   Getters for class H:\n; ------------------------\n\n; --- getters for H.a: ---\n\n(define-fun H.a ((this Ref)) Int\n  (a (deref-H this))\n)\n\n(define-fun H!a ((this Ref)) Int\n  (a (deref-H this))\n)\n\n; --- getters for H.b: ---\n\n(define-fun H.b ((this Ref)) Int\n  (b (deref-H this))\n)\n\n(define-fun H!b ((this Ref)) Int\n  (b (deref-H this))\n)\n\n; --- getters for H.c: ---\n\n(define-fun H.c ((this Ref)) Int\n  (c (deref-H this))\n)\n\n(define-fun H!c ((this Ref)) Int\n  (c (deref-H this))\n)\n\n; --- getters for H.d: ---\n\n(define-fun H.d ((this Ref)) Int\n  (d (deref-H this))\n)\n\n(define-fun H!d ((this Ref)) Int\n  (d (deref-H this))\n)\n\n; --- getters for H.e: ---\n\n(define-fun H.e ((this Ref)) Int\n  (e (deref-H this))\n)\n\n(define-fun H!e ((this Ref)) Int\n  (e (deref-H this))\n)\n\n; --- getters for H.f: ---\n\n(define-fun H.f ((this Ref)) Int\n  (f (deref-H this))\n)\n\n(define-fun H!f ((this Ref)) Int\n  (f (deref-H this))\n)\n\n; --- getters for H.g: ---\n\n(define-fun H.g ((this Ref)) Int\n  (g (deref-H this))\n)\n\n(define-fun H!g ((this Ref)) Int\n  (g (deref-H this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (deref-isa-A (TopLevelDeclarations!objectA this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert20))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-H (TopLevelDeclarations!objectA this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert21))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-A A)\n(declare-const const-4-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (+ (+ (+ (+ (+ (+ (A!a this) (A!b this)) (A!c this)) (A!d this)) (A!e this)) (A!f this)) (A!g this)) 90)\n)\n\n(assert (! (A.inv1 3) :named _xkassert22))\n(assert (! (A.inv1 4) :named _xkassert23))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-6-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (+ (+ (+ (+ (+ (+ (B!a this) (B!b this)) (B!c this)) (B!d this)) (B!e this)) (B!f this)) (B!g this)) 90)\n)\n\n(assert (! (B.inv1 6) :named _xkassert24))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-7-C C)\n\n; --- Invariant 1: ---\n\n(define-fun C.inv1 ((this Ref)) Bool\n  (= (+ (+ (+ (+ (+ (+ (C!a this) (C!b this)) (C!c this)) (C!d this)) (C!e this)) (C!f this)) (C!g this)) 90)\n)\n\n(assert (! (C.inv1 7) :named _xkassert25))\n\n\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-9-D D)\n\n; --- Invariant 1: ---\n\n(define-fun D.inv1 ((this Ref)) Bool\n  (= (+ (+ (+ (+ (+ (+ (D!a this) (D!b this)) (D!c this)) (D!d this)) (D!e this)) (D!f this)) (D!g this)) 90)\n)\n\n(assert (! (D.inv1 9) :named _xkassert26))\n\n\n\n; --------------------------\n;   Invariant for class E:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-E E)\n\n; --- Invariant 1: ---\n\n(define-fun E.inv1 ((this Ref)) Bool\n  (= (+ (+ (+ (+ (+ (+ (E!a this) (E!b this)) (E!c this)) (E!d this)) (E!e this)) (E!f this)) (E!g this)) 90)\n)\n\n(assert (! (E.inv1 1) :named _xkassert27))\n\n\n\n; --------------------------\n;   Invariant for class F:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-F F)\n\n; --- Invariant 1: ---\n\n(define-fun F.inv1 ((this Ref)) Bool\n  (= (+ (+ (+ (+ (+ (+ (F!a this) (F!b this)) (F!c this)) (F!d this)) (F!e this)) (F!f this)) (F!g this)) 90)\n)\n\n(assert (! (F.inv1 2) :named _xkassert28))\n\n\n\n; --------------------------\n;   Invariant for class G:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-5-G G)\n\n; --- Invariant 1: ---\n\n(define-fun G.inv1 ((this Ref)) Bool\n  (= (+ (+ (+ (+ (+ (+ (G!a this) (G!b this)) (G!c this)) (G!d this)) (G!e this)) (G!f this)) (G!g this)) 90)\n)\n\n(assert (! (G.inv1 5) :named _xkassert29))\n\n\n\n; --------------------------\n;   Invariant for class H:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-8-H H)\n\n; --- Invariant 1: ---\n\n(define-fun H.inv1 ((this Ref)) Bool\n  (= (+ (+ (+ (+ (+ (+ (H!a this) (H!b this)) (H!c this)) (H!d this)) (H!e this)) (H!f this)) (H!g this)) 90)\n)\n\n(assert (! (H.inv1 8) :named _xkassert30))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        3 (lift-A const-3-A))\n        4 (lift-A const-4-A))\n        6 (lift-B const-6-B))\n        7 (lift-C const-7-C))\n        9 (lift-D const-9-D))\n        1 (lift-E const-1-E))\n        2 (lift-F const-2-F))\n        5 (lift-G const-5-G))\n        8 (lift-H const-8-H))\n  )\n)\n\n","smtModel":"(define-fun const-9-D () D\n  (mk-D 239 3152 1818 3502 (- 15611) 4186 2804))\n(define-fun const-7-C () C\n  (mk-C 2747 5259 5941 (- 38102) 7373 8869 8003))\n(define-fun const-6-B () B\n  (mk-B 4683 7854 5598 4770 4096 3212 (- 30123)))\n(define-fun const-1-E () E\n  (mk-E 531 3023 334 (- 12781) 1391 6019 1573))\n(define-fun const-4-A () A\n  (mk-A (- 24239) 2112 4135 6926 1102 1650 8404))\n(define-fun const-8-H () H\n  (mk-H 2772 (- 20427) 6811 2061 3565 5189 119))\n(define-fun const-5-G () G\n  (mk-G (- 23153) 1246 3634 5618 5725 2699 4321))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 8))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!10))\n(define-fun const-3-A () A\n  (mk-A 8746 4386 (- 26525) 1648 2328 7176 2331))\n(define-fun const-2-F () F\n  (mk-F 7065 3960 624 (- 26120) 7567 2829 4165))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 8746 4386 (- 26525) 1648 2328 7176 2331))\n  (ite (= x!1 6) (lift-B (mk-B 4683 7854 5598 4770 4096 3212 (- 30123)))\n  (ite (= x!1 1) (lift-E (mk-E 531 3023 334 (- 12781) 1391 6019 1573))\n  (ite (= x!1 9) (lift-D (mk-D 239 3152 1818 3502 (- 15611) 4186 2804))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 7) (lift-C (mk-C 2747 5259 5941 (- 38102) 7373 8869 8003))\n  (ite (= x!1 4) (lift-A (mk-A (- 24239) 2112 4135 6926 1102 1650 8404))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 8746 4386 (- 26525) 1648 2328 7176 2331))\n  (ite (= x!1 4) (lift-A (mk-A (- 24239) 2112 4135 6926 1102 1650 8404))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 6) (lift-B (mk-B 4683 7854 5598 4770 4096 3212 (- 30123)))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n    null))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-G (mk-G (- 23153) 1246 3634 5618 5725 2699 4321))\n  (ite (= x!1 3) (lift-A (mk-A 8746 4386 (- 26525) 1648 2328 7176 2331))\n  (ite (= x!1 4) (lift-A (mk-A (- 24239) 2112 4135 6926 1102 1650 8404))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 2) (lift-F (mk-F 7065 3960 624 (- 26120) 7567 2829 4165))\n  (ite (= x!1 1) (lift-E (mk-E 531 3023 334 (- 12781) 1391 6019 1573))\n  (ite (= x!1 9) (lift-D (mk-D 239 3152 1818 3502 (- 15611) 4186 2804))\n  (ite (= x!1 7) (lift-C (mk-C 2747 5259 5941 (- 38102) 7373 8869 8003))\n  (ite (= x!1 6) (lift-B (mk-B 4683 7854 5598 4770 4096 3212 (- 30123)))\n    null))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 8746 4386 (- 26525) 1648 2328 7176 2331))\n  (ite (= x!1 6) (lift-B (mk-B 4683 7854 5598 4770 4096 3212 (- 30123)))\n  (ite (= x!1 9) (lift-D (mk-D 239 3152 1818 3502 (- 15611) 4186 2804))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 7) (lift-C (mk-C 2747 5259 5941 (- 38102) 7373 8869 8003))\n  (ite (= x!1 4) (lift-A (mk-A (- 24239) 2112 4135 6926 1102 1650 8404))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 8746 4386 (- 26525) 1648 2328 7176 2331))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 4) (lift-A (mk-A (- 24239) 2112 4135 6926 1102 1650 8404))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 8746 4386 (- 26525) 1648 2328 7176 2331))\n  (ite (= x!1 4) (lift-A (mk-A (- 24239) 2112 4135 6926 1102 1650 8404))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 2) (lift-F (mk-F 7065 3960 624 (- 26120) 7567 2829 4165))\n  (ite (= x!1 1) (lift-E (mk-E 531 3023 334 (- 12781) 1391 6019 1573))\n  (ite (= x!1 9) (lift-D (mk-D 239 3152 1818 3502 (- 15611) 4186 2804))\n  (ite (= x!1 7) (lift-C (mk-C 2747 5259 5941 (- 38102) 7373 8869 8003))\n  (ite (= x!1 6) (lift-B (mk-B 4683 7854 5598 4770 4096 3212 (- 30123)))\n    null)))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 8746 4386 (- 26525) 1648 2328 7176 2331))\n  (ite (= x!1 6) (lift-B (mk-B 4683 7854 5598 4770 4096 3212 (- 30123)))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 7) (lift-C (mk-C 2747 5259 5941 (- 38102) 7373 8869 8003))\n  (ite (= x!1 4) (lift-A (mk-A (- 24239) 2112 4135 6926 1102 1650 8404))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 8746 4386 (- 26525) 1648 2328 7176 2331))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n    null)))\n(define-fun k!10 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 8746 4386 (- 26525) 1648 2328 7176 2331))\n  (ite (= x!1 4) (lift-A (mk-A (- 24239) 2112 4135 6926 1102 1650 8404))\n  (ite (= x!1 5) (lift-G (mk-G (- 23153) 1246 3634 5618 5725 2699 4321))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 2) (lift-F (mk-F 7065 3960 624 (- 26120) 7567 2829 4165))\n  (ite (= x!1 8) (lift-H (mk-H 2772 (- 20427) 6811 2061 3565 5189 119))\n  (ite (= x!1 1) (lift-E (mk-E 531 3023 334 (- 12781) 1391 6019 1573))\n  (ite (= x!1 9) (lift-D (mk-D 239 3152 1818 3502 (- 15611) 4186 2804))\n  (ite (= x!1 7) (lift-C (mk-C 2747 5259 5941 (- 38102) 7373 8869 8003))\n  (ite (= x!1 6) (lift-B (mk-B 4683 7854 5598 4770 4096 3212 (- 30123)))\n    null)))))))))))"},"tc1.k":{"json2":"","json1":"","typeChecks":false,"name":"tc1.k","model":"","smt":"","smtModel":""},"testsets5.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"Null","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]},"type":"PropertyDecl","modifiers":[]},{"entityToken":"class","typeparams":[],"ident":"Car","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"vin","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Honda","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"streetValue","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Car"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"Garage","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Car"],"type":"QualifiedName"}]}]},"name":"cars","type":"PropertyDecl","modifiers":[]},{"name":"r2","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"QuantifiedExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"Forall","element":"ElementValue"}]},{"bindings":[{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"ExpCollection","element":"ElementValue"},{"type":"ElementValue","element":"Car"}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"c"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Implies",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"c"},{"type":"ElementValue","element":"cars"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"c"},"vin"]},{"type":"ElementValue","element":"Null"}]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"ChopShop","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Honda"],"type":"QualifiedName"}]}]},"name":"goodCars","type":"PropertyDecl","modifiers":[]},{"name":"r4","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Subset",{"type":"ElementValue","element":"goodCars"},{"type":"ElementValue","element":"cars"}]}},{"name":"r5","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"QuantifiedExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"Forall","element":"ElementValue"}]},{"bindings":[{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"ExpCollection","element":"ElementValue"},{"type":"ElementValue","element":"Honda"}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"gc"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Implies",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"gc"},{"type":"ElementValue","element":"goodCars"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"gc"},"streetValue"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},5000]}]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Garage"],"type":"QualifiedName"}]}]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"IntType"},"assignment":false,"name":"Null","expr":{"i":0,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"entityToken":"class","typeparams":[],"ident":"Car","members":[{"ty":{"type":"IntType"},"name":"vin","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Honda","members":[{"ty":{"type":"IntType"},"name":"streetValue","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["Car"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"Garage","members":[{"ty":{"args":[{"args":[],"ident":{"names":["Car"],"type":"QualifiedName"},"type":"IdentType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"cars","type":"PropertyDecl","modifiers":[]},{"name":"r2","type":"ConstraintDecl","exp":{"bindings":[{"patterns":[{"ident":"c","type":"IdentPattern"}],"collection":{"type":"ExpCollection","exp":{"ident":"Car","type":"IdentExp"}},"type":"RngBinding"}],"quant":{"type":"Quantifier","element":"Forall"},"exp":{"op":"Implies","exp2":{"op":"NotEQ","exp2":{"ident":"Null","type":"IdentExp"},"exp1":{"ident":"vin","exp":{"ident":"c","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"IsIn","exp2":{"ident":"cars","type":"IdentExp"},"exp1":{"ident":"c","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"QuantifiedExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"ChopShop","members":[{"ty":{"args":[{"args":[],"ident":{"names":["Honda"],"type":"QualifiedName"},"type":"IdentType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"goodCars","type":"PropertyDecl","modifiers":[]},{"name":"r4","type":"ConstraintDecl","exp":{"op":"Subset","exp2":{"ident":"cars","type":"IdentExp"},"exp1":{"ident":"goodCars","type":"IdentExp"},"type":"BinExp"}},{"name":"r5","type":"ConstraintDecl","exp":{"bindings":[{"patterns":[{"ident":"gc","type":"IdentPattern"}],"collection":{"type":"ExpCollection","exp":{"ident":"Honda","type":"IdentExp"}},"type":"RngBinding"}],"quant":{"type":"Quantifier","element":"Forall"},"exp":{"op":"Implies","exp2":{"op":"GT","exp2":{"i":5000,"type":"LiteralInteger"},"exp1":{"ident":"streetValue","exp":{"ident":"gc","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"IsIn","exp2":{"ident":"goodCars","type":"IdentExp"},"exp1":{"ident":"gc","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"QuantifiedExp"}}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["Garage"],"type":"QualifiedName"},"type":"IdentType"}]}],"type":"Model"},"typeChecks":true,"name":"testsets5.k","model":"\nNull:Int = 0\n\nclass Car {\n  vin:Int\n}\n\nclass Honda extending Car {\n  streetValue:Int\n}\n\nclass Garage {\n  cars:Set[Car]\n\n  req r2: forall c : Car . c isin cars => c.vin != Null\n}\n\nclass ChopShop extending Garage {\n  goodCars:Set[Honda]\n\n  req r4: goodCars subset cars\n\n  req r5: forall gc : Honda . gc isin goodCars => gc.streetValue > 5000\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (Null Int)))))\n(declare-datatypes () ((Car (mk-Car (vin Int)))))\n(declare-datatypes () ((Garage (mk-Garage (cars (Set Ref))))))\n(declare-datatypes () ((Honda (mk-Honda (vin Int)(streetValue Int)))))\n(declare-datatypes () ((ChopShop (mk-ChopShop (cars (Set Ref))(goodCars (Set Ref))))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Car (sel-Car Car))\n  (lift-Garage (sel-Garage Garage))\n  (lift-Honda (sel-Honda Honda))\n  (lift-ChopShop (sel-ChopShop ChopShop))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Car ((this Ref)) Bool\n  (is-lift-Car (deref this))\n)\n\n(define-fun deref-Car ((this Ref)) Car\n  (sel-Car (deref this))\n)\n\n(define-fun deref-is-Garage ((this Ref)) Bool\n  (is-lift-Garage (deref this))\n)\n\n(define-fun deref-Garage ((this Ref)) Garage\n  (sel-Garage (deref this))\n)\n\n(define-fun deref-is-Honda ((this Ref)) Bool\n  (is-lift-Honda (deref this))\n)\n\n(define-fun deref-Honda ((this Ref)) Honda\n  (sel-Honda (deref this))\n)\n\n(define-fun deref-is-ChopShop ((this Ref)) Bool\n  (is-lift-ChopShop (deref this))\n)\n\n(define-fun deref-ChopShop ((this Ref)) ChopShop\n  (sel-ChopShop (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Car ((this Ref)) Bool\n  (or\n    (deref-is-Car this)\n    (deref-is-Honda this)\n  )\n)\n\n(define-fun deref-isa-Garage ((this Ref)) Bool\n  (or\n    (deref-is-Garage this)\n    (deref-is-ChopShop this)\n  )\n)\n\n(define-fun deref-isa-Honda ((this Ref)) Bool\n  (deref-is-Honda this)\n)\n\n(define-fun deref-isa-ChopShop ((this Ref)) Bool\n  (deref-is-ChopShop this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.Null: ---\n\n(define-fun TopLevelDeclarations!Null ((this Ref)) Int\n  (Null (deref-TopLevelDeclarations this))\n)\n\n; --------------------------\n;   Getters for class Car:\n; --------------------------\n\n; --- getters for Car.vin: ---\n\n(define-fun Car.vin ((this Ref)) Int\n  (ite (deref-is-Car this) (vin (deref-Car this))\n  (vin (deref-Honda this)))\n)\n\n; -----------------------------\n;   Getters for class Garage:\n; -----------------------------\n\n; --- getters for Garage.cars: ---\n\n(define-fun Garage!cars ((this Ref)) (Set Ref)\n  (cars (deref-Garage this))\n)\n\n; ----------------------------\n;   Getters for class Honda:\n; ----------------------------\n\n; --- getters for Honda.streetValue: ---\n\n(define-fun Honda.streetValue ((this Ref)) Int\n  (streetValue (deref-Honda this))\n)\n\n; -------------------------------\n;   Getters for class ChopShop:\n; -------------------------------\n\n; --- getters for ChopShop.cars: ---\n\n(define-fun ChopShop!cars ((this Ref)) (Set Ref)\n  (cars (deref-ChopShop this))\n)\n\n; --- getters for ChopShop.goodCars: ---\n\n(define-fun ChopShop!goodCars ((this Ref)) (Set Ref)\n  (goodCars (deref-ChopShop this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (TopLevelDeclarations!Null this) 0)\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert248))\n\n\n\n; ----------------------------\n;   Invariant for class Car:\n; ----------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-Car Car)\n\n\n\n; -------------------------------\n;   Invariant for class Garage:\n; -------------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-Garage Garage)\n\n; --- Invariant 1: ---\n\n(define-fun Garage.inv1 ((this Ref)) Bool\n  (forall ((c Ref)) (=> (select (Garage!cars this) c) (not (= (Car.vin c) (TopLevelDeclarations!Null 0)))))\n)\n\n(assert (! (Garage.inv1 2) :named _xkassert249))\n\n\n\n; ------------------------------\n;   Invariant for class Honda:\n; ------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Honda Honda)\n\n\n\n; ---------------------------------\n;   Invariant for class ChopShop:\n; ---------------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-ChopShop ChopShop)\n\n; --- Invariant 1: ---\n\n(define-fun ChopShop.inv1 ((this Ref)) Bool\n  (forall ((c Ref)) (=> (select (ChopShop!cars this) c) (not (= (Car.vin c) (TopLevelDeclarations!Null 0)))))\n)\n\n(assert (! (ChopShop.inv1 3) :named _xkassert250))\n\n; --- Invariant 2: ---\n\n(define-fun ChopShop.inv2 ((this Ref)) Bool\n  (subset (ChopShop!goodCars this) (ChopShop!cars this))\n)\n\n(assert (! (ChopShop.inv2 3) :named _xkassert251))\n\n; --- Invariant 3: ---\n\n(define-fun ChopShop.inv3 ((this Ref)) Bool\n  (forall ((gc Ref)) (=> (select (ChopShop!goodCars this) gc) (> (Honda.streetValue gc) 5000)))\n)\n\n(assert (! (ChopShop.inv3 3) :named _xkassert252))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        4 (lift-Car const-4-Car))\n        2 (lift-Garage const-2-Garage))\n        1 (lift-Honda const-1-Honda))\n        3 (lift-ChopShop const-3-ChopShop))\n  )\n)\n\n","smtModel":"(define-fun const-4-Car () Car\n  (mk-Car 5))\n(define-fun const-3-ChopShop () ChopShop\n  (mk-ChopShop (_ as-array k!75) (_ as-array k!75)))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 0))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!83))\n(define-fun const-2-Garage () Garage\n  (mk-Garage (_ as-array k!75)))\n(define-fun const-1-Honda () Honda\n  (mk-Honda 6 7578))\n(define-fun k!79 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 0))\n    null))\n(define-fun k!76 ((x!1 Int)) Bool\n  true)\n(define-fun k!81 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Garage (mk-Garage (_ as-array k!75)))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 0))\n  (ite (= x!1 4) (lift-Car (mk-Car 5))\n    null))))\n(define-fun k!78 ((x!1 Int)) Any\n  null)\n(define-fun k!75 ((x!1 Int)) Bool\n  false)\n(define-fun k!83 ((x!1 Int)) Any\n  (ite (= x!1 3)\n    (lift-ChopShop (mk-ChopShop (_ as-array k!75) (_ as-array k!75)))\n  (ite (= x!1 2) (lift-Garage (mk-Garage (_ as-array k!75)))\n  (ite (= x!1 1) (lift-Honda (mk-Honda 6 7578))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 0))\n  (ite (= x!1 4) (lift-Car (mk-Car 5))\n    null))))))\n(define-fun k!80 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 0))\n  (ite (= x!1 4) (lift-Car (mk-Car 5))\n    null)))\n(define-fun k!77 ((x!1 Int)) Bool\n  false)\n(define-fun k!82 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Garage (mk-Garage (_ as-array k!75)))\n  (ite (= x!1 1) (lift-Honda (mk-Honda 6 7578))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 0))\n  (ite (= x!1 4) (lift-Car (mk-Car 5))\n    null)))))"},"testsets3.k":{"json2":{"imports":[],"annotations":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"instances","type":"AnnotationDecl"}],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"PropertyDecl","modifiers":[]}],"annotations":[{"name":"instances","type":"Annotation","exp":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]}}],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},"name":"s1","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"a1","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"a2","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"a3","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"a1"},{"type":"ElementValue","element":"a2"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"a2"},{"type":"ElementValue","element":"a3"}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"a1"},{"type":"ElementValue","element":"a3"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s1"},{"type":"Expression","operand":[{"type":"CollectionEnumExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"a1"},{"type":"ElementValue","element":"a2"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"a1"},{"type":"ElementValue","element":"s1"}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotIn",{"type":"ElementValue","element":"a3"},{"type":"ElementValue","element":"s1"}]}},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},"name":"s2","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s2"},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"a"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"x"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]},{"type":"Expression","operand":[{"type":"ParenExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"OR",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"a"},{"type":"ElementValue","element":"a1"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"a"},{"type":"ElementValue","element":"a2"}]}]}]}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"ExpCollection","element":"ElementValue"},{"type":"ElementValue","element":"A"}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"a"]}]}]}]}}],"annotations":[{"name":"instances","type":"Annotation","exp":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}}],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]},"name":"b","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[{"ty":{"type":"IntType"},"name":"instances","type":"AnnotationDecl"}],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"x","type":"PropertyDecl","modifiers":[]}],"annotations":[{"name":"instances","type":"Annotation","exp":{"i":3,"type":"LiteralInteger"}}],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"args":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s1","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"a1","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"a2","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"a3","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"And","exp2":{"op":"NotEQ","exp2":{"ident":"a3","type":"IdentExp"},"exp1":{"ident":"a1","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"NotEQ","exp2":{"ident":"a3","type":"IdentExp"},"exp1":{"ident":"a2","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"NotEQ","exp2":{"ident":"a2","type":"IdentExp"},"exp1":{"ident":"a1","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"kind":"Set","exps":[{"ident":"a1","type":"IdentExp"},{"ident":"a2","type":"IdentExp"}],"type":"CollectionEnumExp"},"exp1":{"ident":"s1","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"IsIn","exp2":{"ident":"s1","type":"IdentExp"},"exp1":{"ident":"a1","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"NotIn","exp2":{"ident":"s1","type":"IdentExp"},"exp1":{"ident":"a3","type":"IdentExp"},"type":"BinExp"}},{"ty":{"args":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s2","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"a","type":"IdentPattern"}],"collection":{"type":"ExpCollection","exp":{"ident":"A","type":"IdentExp"}},"type":"RngBinding"}],"exp2":{"op":"And","exp2":{"exp":{"op":"OR","exp2":{"op":"EQ","exp2":{"ident":"a2","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"ident":"a1","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"ParenExp"},"exp1":{"op":"EQ","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"x","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"},"exp1":{"ident":"a","type":"IdentExp"},"type":"CollectionComprExp"},"exp1":{"ident":"s2","type":"IdentExp"},"type":"BinExp"}}],"annotations":[{"name":"instances","type":"Annotation","exp":{"i":1,"type":"LiteralInteger"}}],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"},"name":"b","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"testsets3.k","model":"\nannotation instances : Int\n\n@instances(3)\n\nclass A {\n  x:Int\n}\n\n@instances(1)\n\nclass B {\n  s1:Set[A]\n  a1:A\n  a2:A\n  a3:A\n\n  req a1 != a2 && a2 != a3 && a1 != a3\n\n  req s1 = Set{a1,a2}\n\n  req a1 isin s1\n\n  req a3 !isin s1\n  s2:Set[A]\n\n  req s2 = Set{a | a : A . a.x = 10 && (a = a1 || a = a2)}\n}\n\nb:B\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (b Ref)))))\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (s1 (Set Ref))(a1 Ref)(a2 Ref)(a3 Ref)(s2 (Set Ref))))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.b: ---\n\n(define-fun TopLevelDeclarations!b ((this Ref)) Ref\n  (b (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.s1: ---\n\n(define-fun B!s1 ((this Ref)) (Set Ref)\n  (s1 (deref-B this))\n)\n\n; --- getters for B.a1: ---\n\n(define-fun B!a1 ((this Ref)) Ref\n  (a1 (deref-B this))\n)\n\n; --- getters for B.a2: ---\n\n(define-fun B!a2 ((this Ref)) Ref\n  (a2 (deref-B this))\n)\n\n; --- getters for B.a3: ---\n\n(define-fun B!a3 ((this Ref)) Ref\n  (a3 (deref-B this))\n)\n\n; --- getters for B.s2: ---\n\n(define-fun B!s2 ((this Ref)) (Set Ref)\n  (s2 (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (deref-isa-B (TopLevelDeclarations!b this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert237))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n(declare-const const-2-A A)\n(declare-const const-3-A A)\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (deref-isa-A (B!a1 this))\n)\n\n(assert (! (B.inv1 4) :named _xkassert238))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (deref-isa-A (B!a2 this))\n)\n\n(assert (! (B.inv2 4) :named _xkassert239))\n\n; --- Invariant 3: ---\n\n(define-fun B.inv3 ((this Ref)) Bool\n  (deref-isa-A (B!a3 this))\n)\n\n(assert (! (B.inv3 4) :named _xkassert240))\n\n; --- Invariant 4: ---\n\n(define-fun B.inv4 ((this Ref)) Bool\n  (and (and (not (= (B!a1 this) (B!a2 this))) (not (= (B!a2 this) (B!a3 this)))) (not (= (B!a1 this) (B!a3 this))))\n)\n\n(assert (! (B.inv4 4) :named _xkassert241))\n\n; --- Invariant 5: ---\n\n(define-fun B.inv5 ((this Ref)) Bool\n  (= (B!s1 this) (store (store ((as const (Set Int)) false) (B!a1 this) true) (B!a2 this) true))\n)\n\n(assert (! (B.inv5 4) :named _xkassert242))\n\n; --- Invariant 6: ---\n\n(define-fun B.inv6 ((this Ref)) Bool\n  (select (B!s1 this) (B!a1 this))\n)\n\n(assert (! (B.inv6 4) :named _xkassert243))\n\n; --- Invariant 7: ---\n\n(define-fun B.inv7 ((this Ref)) Bool\n  (not (select (B!s1 this) (B!a3 this)))\n)\n\n(assert (! (B.inv7 4) :named _xkassert244))\n\n; --- Invariant 8: ---\n\n(define-fun B.inv8 ((this Ref)) Bool\n  (forall ((var_11 Ref)) (= (select (B!s2 this) var_11) (and (= (A.x var_11) 10) (or (= var_11 (B!a1 this)) (= var_11 (B!a2 this))))))\n)\n\n(assert (! (B.inv8 4) :named _xkassert245))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-A const-2-A))\n        3 (lift-A const-3-A))\n        4 (lift-B const-4-B))\n  )\n)\n\n","smtModel":"(define-fun const-1-A () A\n  (mk-A 6))\n(define-fun const-2-A () A\n  (mk-A 5))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 4))\n(define-fun const-4-B () B\n  (mk-B (_ as-array k!8) 2 1 3 (_ as-array k!7)))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!9))\n(define-fun const-3-A () A\n  (mk-A 7))\n(define-fun k!7 ((x!1 Int)) Bool\n  false)\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4))\n    null)))\n(define-fun k!1 ((x!1 Int)) Bool\n  (ite (= x!1 2) true\n    false))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 5))\n  (ite (= x!1 3) (lift-A (mk-A 7))\n  (ite (= x!1 1) (lift-A (mk-A 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4))\n  (ite (= x!1 4) (lift-B (mk-B (_ as-array k!8) 2 1 3 (_ as-array k!7)))\n    null))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 7))\n  (ite (= x!1 2) (lift-A (mk-A 5))\n  (ite (= x!1 1) (lift-A (mk-A 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4))\n    null)))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4))\n    null))\n(define-fun k!0 ((x!1 Int)) Bool\n  false)\n(define-fun k!8 ((x!1 Int)) Bool\n  (ite (= x!1 2) true\n  (ite (= x!1 1) true\n    false)))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 5))\n  (ite (= x!1 1) (lift-A (mk-A 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4))\n    null))))\n(define-fun k!2 ((x!1 Int)) Any\n  null)"},"testsmt2.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"ERROR"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},42]},{"type":"ElementValue","element":"ERROR"}]}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"Duration","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"t1","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"t2","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"ident":"before","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Duration"],"type":"QualifiedName"}]},"name":"other","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"t2"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"other"},"t1"]}]}}],"spec":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"t1"},{"type":"ElementValue","element":"t2"}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"t1"},{"type":"ElementValue","element":"t2"}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Duration"],"type":"QualifiedName"}]},"name":"duration","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"min","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Minus",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"duration"},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"duration"},"t1"]}]},{"type":"ElementValue","element":"min"}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Minus",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"duration"},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"duration"},"t1"]}]},{"type":"ElementValue","element":"min"}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"a","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"b","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"min"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},"min"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},20]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"duration"]},"before"]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},"duration"]}]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"min"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},"min"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},20]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"duration"]},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},"duration"]},"t1"]}]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"IntType"},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"ERROR","type":"IdentExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"BoolType"},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"trueBranch":{"i":42,"type":"LiteralInteger"},"falseBranch":{"ident":"ERROR","type":"IdentExp"},"type":"IfExp","cond":{"ident":"b","type":"IdentExp"}}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"Duration","members":[{"ty":{"type":"IntType"},"name":"t1","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"t2","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"BoolType"},"ident":"before","typeParams":[],"type":"FunDecl","params":[{"ty":{"args":[],"ident":{"names":["Duration"],"type":"QualifiedName"},"type":"IdentType"},"name":"other","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"LT","exp2":{"ident":"t1","exp":{"ident":"other","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","type":"IdentExp"},"type":"BinExp"}}],"spec":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"LT","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"args":[],"ident":{"names":["Duration"],"type":"QualifiedName"},"type":"IdentType"},"name":"duration","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"min","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"GTE","exp2":{"ident":"min","type":"IdentExp"},"exp1":{"op":"Minus","exp2":{"ident":"t1","exp":{"ident":"duration","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"duration","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"GTE","exp2":{"ident":"min","type":"IdentExp"},"exp1":{"op":"Minus","exp2":{"ident":"t1","exp":{"ident":"duration","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"duration","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"a","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"b","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"min","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"i":20,"type":"LiteralInteger"},"exp1":{"ident":"min","exp":{"ident":"b","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"ident":"duration","exp":{"ident":"b","type":"IdentExp"},"type":"DotExp"}}],"exp1":{"ident":"before","exp":{"ident":"duration","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"DotExp"},"type":"FunApplExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"And","exp2":{"op":"LT","exp2":{"ident":"t1","exp":{"ident":"duration","exp":{"ident":"b","type":"IdentExp"},"type":"DotExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"duration","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"EQ","exp2":{"i":20,"type":"LiteralInteger"},"exp1":{"ident":"min","exp":{"ident":"b","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"min","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt2.k","model":"\nERROR:Int\n\nreq ERROR < 0\n\nfun CHECK(b:Bool) : Int\n{\n  if b then\n    42\n  else\n    ERROR\n}\n\nclass Duration {\n  t1:Int\n  t2:Int\n\n  fun before(other:Duration) : Bool\n  {\n    t2 < other.t1\n  }\n\n  req t1 < t2\n  RESULT:Int = CHECK(t1 < t2)\n}\n\nclass Event {\n  duration:Duration\n  min:Int\n\n  req duration.t2 - duration.t1 >= min\n  RESULT:Int = CHECK(duration.t2 - duration.t1 >= min)\n}\n\na:Event\n\nb:Event\n\nreq a.min = 10\n\nreq b.min = 20\n\nreq a.duration.before(b.duration)\n\nRESULT:Int = CHECK(a.min = 10 && b.min = 20 && a.duration.t2 < b.duration.t1)\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (ERROR Int)(a Ref)(b Ref)(RESULT Int)))))\n(declare-datatypes () ((Duration (mk-Duration (t1 Int)(t2 Int)(RESULT Int)))))\n(declare-datatypes () ((Event (mk-Event (duration Ref)(min Int)(RESULT Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Duration (sel-Duration Duration))\n  (lift-Event (sel-Event Event))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Duration ((this Ref)) Bool\n  (is-lift-Duration (deref this))\n)\n\n(define-fun deref-Duration ((this Ref)) Duration\n  (sel-Duration (deref this))\n)\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Duration ((this Ref)) Bool\n  (deref-is-Duration this)\n)\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.ERROR: ---\n\n(define-fun TopLevelDeclarations.ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations!ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.a: ---\n\n(define-fun TopLevelDeclarations!a ((this Ref)) Ref\n  (a (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.b: ---\n\n(define-fun TopLevelDeclarations!b ((this Ref)) Ref\n  (b (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.RESULT: ---\n\n(define-fun TopLevelDeclarations!RESULT ((this Ref)) Int\n  (RESULT (deref-TopLevelDeclarations this))\n)\n\n; -------------------------------\n;   Getters for class Duration:\n; -------------------------------\n\n; --- getters for Duration.t1: ---\n\n(define-fun Duration.t1 ((this Ref)) Int\n  (t1 (deref-Duration this))\n)\n\n(define-fun Duration!t1 ((this Ref)) Int\n  (t1 (deref-Duration this))\n)\n\n; --- getters for Duration.t2: ---\n\n(define-fun Duration.t2 ((this Ref)) Int\n  (t2 (deref-Duration this))\n)\n\n(define-fun Duration!t2 ((this Ref)) Int\n  (t2 (deref-Duration this))\n)\n\n; --- getters for Duration.RESULT: ---\n\n(define-fun Duration!RESULT ((this Ref)) Int\n  (RESULT (deref-Duration this))\n)\n\n; ----------------------------\n;   Getters for class Event:\n; ----------------------------\n\n; --- getters for Event.duration: ---\n\n(define-fun Event.duration ((this Ref)) Ref\n  (duration (deref-Event this))\n)\n\n(define-fun Event!duration ((this Ref)) Ref\n  (duration (deref-Event this))\n)\n\n; --- getters for Event.min: ---\n\n(define-fun Event.min ((this Ref)) Int\n  (min (deref-Event this))\n)\n\n(define-fun Event!min ((this Ref)) Int\n  (min (deref-Event this))\n)\n\n; --- getters for Event.RESULT: ---\n\n(define-fun Event!RESULT ((this Ref)) Int\n  (RESULT (deref-Event this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------------------\n;   Methods for class TopLevelDeclarations:\n; -------------------------------------------\n\n(define-fun TopLevelDeclarations.CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations.ERROR this))\n)\n\n(define-fun TopLevelDeclarations!CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations!ERROR this))\n)\n\n; -------------------------------\n;   Methods for class Duration:\n; -------------------------------\n\n(define-fun Duration.before ((this Ref)(other Ref)) Bool\n  (< (Duration.t2 this) (Duration.t1 other))\n)\n\n(define-fun Duration!before ((this Ref)(other Ref)) Bool\n  (< (Duration!t2 this) (Duration.t1 other))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (TopLevelDeclarations!RESULT this) (TopLevelDeclarations!CHECK this (and (and (= (Event.min (TopLevelDeclarations!a this)) 10) (= (Event.min (TopLevelDeclarations!b this)) 20)) (< (Duration.t2 (Event.duration (TopLevelDeclarations!a this))) (Duration.t1 (Event.duration (TopLevelDeclarations!b this)))))))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert328))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-Event (TopLevelDeclarations!a this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert329))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (deref-isa-Event (TopLevelDeclarations!b this))\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert330))\n\n; --- Invariant 4: ---\n\n(define-fun TopLevelDeclarations.inv4 ((this Ref)) Bool\n  (< (TopLevelDeclarations!ERROR this) 0)\n)\n\n(assert (! (TopLevelDeclarations.inv4 0) :named _xkassert331))\n\n; --- Invariant 5: ---\n\n(define-fun TopLevelDeclarations.inv5 ((this Ref)) Bool\n  (= (Event.min (TopLevelDeclarations!a this)) 10)\n)\n\n(assert (! (TopLevelDeclarations.inv5 0) :named _xkassert332))\n\n; --- Invariant 6: ---\n\n(define-fun TopLevelDeclarations.inv6 ((this Ref)) Bool\n  (= (Event.min (TopLevelDeclarations!b this)) 20)\n)\n\n(assert (! (TopLevelDeclarations.inv6 0) :named _xkassert333))\n\n; --- Invariant 7: ---\n\n(define-fun TopLevelDeclarations.inv7 ((this Ref)) Bool\n  (Duration.before (Event.duration (TopLevelDeclarations!a this)) (Event.duration (TopLevelDeclarations!b this)))\n)\n\n(assert (! (TopLevelDeclarations.inv7 0) :named _xkassert334))\n\n\n\n; ---------------------------------\n;   Invariant for class Duration:\n; ---------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Duration Duration)\n(declare-const const-2-Duration Duration)\n(declare-const const-3-Duration Duration)\n(declare-const const-4-Duration Duration)\n\n; --- Invariant 1: ---\n\n(define-fun Duration.inv1 ((this Ref)) Bool\n  (= (Duration!RESULT this) (TopLevelDeclarations!CHECK 0 (< (Duration!t1 this) (Duration!t2 this))))\n)\n\n(assert (! (Duration.inv1 1) :named _xkassert335))\n(assert (! (Duration.inv1 2) :named _xkassert336))\n(assert (! (Duration.inv1 3) :named _xkassert337))\n(assert (! (Duration.inv1 4) :named _xkassert338))\n\n; --- Invariant 2: ---\n\n(define-fun Duration.inv2 ((this Ref)) Bool\n  (< (Duration!t1 this) (Duration!t2 this))\n)\n\n(assert (! (Duration.inv2 1) :named _xkassert339))\n(assert (! (Duration.inv2 2) :named _xkassert340))\n(assert (! (Duration.inv2 3) :named _xkassert341))\n(assert (! (Duration.inv2 4) :named _xkassert342))\n\n\n\n; ------------------------------\n;   Invariant for class Event:\n; ------------------------------\n\n; --- Constants: ---\n\n(declare-const const-5-Event Event)\n(declare-const const-6-Event Event)\n(declare-const const-7-Event Event)\n\n; --- Invariant 1: ---\n\n(define-fun Event.inv1 ((this Ref)) Bool\n  (= (Event!RESULT this) (TopLevelDeclarations!CHECK 0 (>= (- (Duration.t2 (Event!duration this)) (Duration.t1 (Event!duration this))) (Event!min this))))\n)\n\n(assert (! (Event.inv1 5) :named _xkassert343))\n(assert (! (Event.inv1 6) :named _xkassert344))\n(assert (! (Event.inv1 7) :named _xkassert345))\n\n; --- Invariant 2: ---\n\n(define-fun Event.inv2 ((this Ref)) Bool\n  (deref-isa-Duration (Event!duration this))\n)\n\n(assert (! (Event.inv2 5) :named _xkassert346))\n(assert (! (Event.inv2 6) :named _xkassert347))\n(assert (! (Event.inv2 7) :named _xkassert348))\n\n; --- Invariant 3: ---\n\n(define-fun Event.inv3 ((this Ref)) Bool\n  (>= (- (Duration.t2 (Event!duration this)) (Duration.t1 (Event!duration this))) (Event!min this))\n)\n\n(assert (! (Event.inv3 5) :named _xkassert349))\n(assert (! (Event.inv3 6) :named _xkassert350))\n(assert (! (Event.inv3 7) :named _xkassert351))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-Duration const-1-Duration))\n        2 (lift-Duration const-2-Duration))\n        3 (lift-Duration const-3-Duration))\n        4 (lift-Duration const-4-Duration))\n        5 (lift-Event const-5-Event))\n        6 (lift-Event const-6-Event))\n        7 (lift-Event const-7-Event))\n  )\n)\n\n","smtModel":"(define-fun const-1-Duration () Duration\n  (mk-Duration 8097 8098 42))\n(define-fun const-7-Event () Event\n  (mk-Event 3 6293 42))\n(define-fun const-5-Event () Event\n  (mk-Event 4 20 42))\n(define-fun const-3-Duration () Duration\n  (mk-Duration 2652 8945 42))\n(define-fun const-6-Event () Event\n  (mk-Event 3 10 42))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations (- 1) 6 5 42))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!8))\n(define-fun const-4-Duration () Duration\n  (mk-Duration 9555 9575 42))\n(define-fun const-2-Duration () Duration\n  (mk-Duration 281 282 42))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Duration (mk-Duration 281 282 42))\n  (ite (= x!1 3) (lift-Duration (mk-Duration 2652 8945 42))\n  (ite (= x!1 4) (lift-Duration (mk-Duration 9555 9575 42))\n  (ite (= x!1 1) (lift-Duration (mk-Duration 8097 8098 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 6 5 42))\n  (ite (= x!1 5) (lift-Event (mk-Event 4 20 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 3 10 42))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Duration (mk-Duration 2652 8945 42))\n  (ite (= x!1 2) (lift-Duration (mk-Duration 281 282 42))\n  (ite (= x!1 1) (lift-Duration (mk-Duration 8097 8098 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 6 5 42))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 6 5 42))\n    null))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 4 20 42))\n  (ite (= x!1 2) (lift-Duration (mk-Duration 281 282 42))\n  (ite (= x!1 3) (lift-Duration (mk-Duration 2652 8945 42))\n  (ite (= x!1 1) (lift-Duration (mk-Duration 8097 8098 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 6 5 42))\n  (ite (= x!1 4) (lift-Duration (mk-Duration 9555 9575 42))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Duration (mk-Duration 281 282 42))\n  (ite (= x!1 1) (lift-Duration (mk-Duration 8097 8098 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 6 5 42))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Duration (mk-Duration 2652 8945 42))\n  (ite (= x!1 5) (lift-Event (mk-Event 4 20 42))\n  (ite (= x!1 4) (lift-Duration (mk-Duration 9555 9575 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 6 5 42))\n  (ite (= x!1 2) (lift-Duration (mk-Duration 281 282 42))\n  (ite (= x!1 1) (lift-Duration (mk-Duration 8097 8098 42))\n  (ite (= x!1 7) (lift-Event (mk-Event 3 6293 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 3 10 42))\n    null)))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Duration (mk-Duration 281 282 42))\n  (ite (= x!1 3) (lift-Duration (mk-Duration 2652 8945 42))\n  (ite (= x!1 1) (lift-Duration (mk-Duration 8097 8098 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 6 5 42))\n  (ite (= x!1 4) (lift-Duration (mk-Duration 9555 9575 42))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Duration (mk-Duration 8097 8098 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 6 5 42))\n    null)))"},"testsets1.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Sets","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},"name":"s1","type":"PropertyDecl","modifiers":[]},{"name":"r01","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s1"},{"type":"Expression","operand":[{"type":"CollectionEnumExp","element":"ElementValue"},"Set",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]}]}]}},{"name":"r02","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},{"type":"ElementValue","element":"s1"}]}},{"name":"r03","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotIn",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},4]},{"type":"ElementValue","element":"s1"}]}},{"name":"r04","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"s1"},{"type":"Expression","operand":[{"type":"CollectionEnumExp","element":"ElementValue"},"Set"]}]}},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},"name":"s2","type":"PropertyDecl","modifiers":[]},{"name":"r05","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s2"},{"type":"Expression","operand":[{"type":"CollectionEnumExp","element":"ElementValue"},"Set"]}]}},{"name":"r06","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"s1"},{"type":"ElementValue","element":"s2"}]}},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},"name":"s3","type":"PropertyDecl","modifiers":[]},{"name":"r07","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s3"},{"type":"Expression","operand":[{"type":"CollectionRangeExp","element":"ElementValue"},"Set",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},5]}]}]}},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},"name":"s4","type":"PropertyDecl","modifiers":[]},{"name":"r08","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s4"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Inter",{"type":"ElementValue","element":"s1"},{"type":"ElementValue","element":"s3"}]}]}},{"name":"r09","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Subset",{"type":"ElementValue","element":"s4"},{"type":"ElementValue","element":"s1"}]}},{"name":"r10","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"PSubset",{"type":"ElementValue","element":"s4"},{"type":"ElementValue","element":"s1"}]}},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},"name":"s5","type":"PropertyDecl","modifiers":[]},{"name":"r11","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s5"},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]},{"type":"ElementValue","element":"x"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},15]}]}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"x"]}]}]}]}},{"name":"r12","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]},{"type":"ElementValue","element":"s5"}]}},{"name":"r13","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotIn",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},9]},{"type":"ElementValue","element":"s5"}]}},{"name":"r14","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Subset",{"type":"Expression","operand":[{"type":"CollectionRangeExp","element":"ElementValue"},"Set",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},11]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},13]}]},{"type":"ElementValue","element":"s5"}]}},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},"name":"s6","type":"PropertyDecl","modifiers":[]},{"name":"r15","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s6"},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"y"},{"type":"ElementValue","element":"s5"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},15]}]}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"y"]}]}]}]}},{"name":"r16","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"PSubset",{"type":"ElementValue","element":"s6"},{"type":"ElementValue","element":"s5"}]}},{"name":"r17","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"s6"},{"type":"ElementValue","element":"s5"}]}},{"name":"r18","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"x"},{"type":"ElementValue","element":"s5"}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"x"]}]}]},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},9]},{"type":"ElementValue","element":"y"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Minus",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},17]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}]}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"y"]}]}]}]}},{"name":"r19","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Subset",{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"x"},{"type":"ElementValue","element":"s6"}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"x"]}]}]},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"y"},{"type":"ElementValue","element":"s5"}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"y"]}]}]}]}},{"name":"r20","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"PSubset",{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"x"},{"type":"ElementValue","element":"s6"}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"x"]}]}]},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"y"},{"type":"ElementValue","element":"s5"}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"y"]}]}]}]}},{"name":"r21","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"x"},{"type":"ElementValue","element":"s6"}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"x"]}]}]},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"y"},{"type":"ElementValue","element":"s5"}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"y"]}]}]}]}},{"name":"r22","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},12]},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"y"},{"type":"ElementValue","element":"s5"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},15]}]}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"y"]}]}]}]}},{"name":"r23","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotIn",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},15]},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"y"},{"type":"ElementValue","element":"s5"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},15]}]}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"y"]}]}]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"min","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"max","type":"PropertyDecl","modifiers":[]},{"name":"r24","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"min"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},9]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"max"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},14]}]}]}},{"name":"r25","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s5"},{"type":"Expression","operand":[{"type":"CollectionRangeExp","element":"ElementValue"},"Set",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"min"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"max"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}]}]}},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]}]},"name":"s7","type":"PropertyDecl","modifiers":[]},{"name":"r26","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s7"},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"UnaryExp","element":"ElementValue"},"Not",{"type":"ElementValue","element":"x"}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"x"]}]}]}]}},{"name":"r27","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"Expression","operand":[{"type":"BooleanLiteral","element":"ElementValue"},false]},{"type":"ElementValue","element":"s7"}]}},{"name":"r28","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotIn",{"type":"Expression","operand":[{"type":"BooleanLiteral","element":"ElementValue"},true]},{"type":"ElementValue","element":"s7"}]}},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]}]},"name":"s8","type":"PropertyDecl","modifiers":[]},{"name":"r29","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"Expression","operand":[{"type":"CollectionEnumExp","element":"ElementValue"},"Set",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]}]},{"type":"ElementValue","element":"s8"}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Sets"],"type":"QualifiedName"}]},"name":"main","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Sets","members":[{"ty":{"args":[{"type":"IntType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s1","type":"PropertyDecl","modifiers":[]},{"name":"r01","type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"kind":"Set","exps":[{"i":1,"type":"LiteralInteger"},{"i":2,"type":"LiteralInteger"},{"i":3,"type":"LiteralInteger"}],"type":"CollectionEnumExp"},"exp1":{"ident":"s1","type":"IdentExp"},"type":"BinExp"}},{"name":"r02","type":"ConstraintDecl","exp":{"op":"IsIn","exp2":{"ident":"s1","type":"IdentExp"},"exp1":{"i":1,"type":"LiteralInteger"},"type":"BinExp"}},{"name":"r03","type":"ConstraintDecl","exp":{"op":"NotIn","exp2":{"ident":"s1","type":"IdentExp"},"exp1":{"i":4,"type":"LiteralInteger"},"type":"BinExp"}},{"name":"r04","type":"ConstraintDecl","exp":{"op":"NotEQ","exp2":{"kind":"Set","exps":[],"type":"CollectionEnumExp"},"exp1":{"ident":"s1","type":"IdentExp"},"type":"BinExp"}},{"ty":{"args":[{"type":"IntType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s2","type":"PropertyDecl","modifiers":[]},{"name":"r05","type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"kind":"Set","exps":[],"type":"CollectionEnumExp"},"exp1":{"ident":"s2","type":"IdentExp"},"type":"BinExp"}},{"name":"r06","type":"ConstraintDecl","exp":{"op":"NotEQ","exp2":{"ident":"s2","type":"IdentExp"},"exp1":{"ident":"s1","type":"IdentExp"},"type":"BinExp"}},{"ty":{"args":[{"type":"IntType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s3","type":"PropertyDecl","modifiers":[]},{"name":"r07","type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"kind":"Set","exp2":{"i":5,"type":"LiteralInteger"},"exp1":{"i":3,"type":"LiteralInteger"},"type":"CollectionRangeExp"},"exp1":{"ident":"s3","type":"IdentExp"},"type":"BinExp"}},{"ty":{"args":[{"type":"IntType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s4","type":"PropertyDecl","modifiers":[]},{"name":"r08","type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"op":"Inter","exp2":{"ident":"s3","type":"IdentExp"},"exp1":{"ident":"s1","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"s4","type":"IdentExp"},"type":"BinExp"}},{"name":"r09","type":"ConstraintDecl","exp":{"op":"Subset","exp2":{"ident":"s1","type":"IdentExp"},"exp1":{"ident":"s4","type":"IdentExp"},"type":"BinExp"}},{"name":"r10","type":"ConstraintDecl","exp":{"op":"PSubset","exp2":{"ident":"s1","type":"IdentExp"},"exp1":{"ident":"s4","type":"IdentExp"},"type":"BinExp"}},{"ty":{"args":[{"type":"IntType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s5","type":"PropertyDecl","modifiers":[]},{"name":"r11","type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"x","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"And","exp2":{"op":"LTE","exp2":{"i":15,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"LTE","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"i":10,"type":"LiteralInteger"},"type":"BinExp"},"type":"BinExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"CollectionComprExp"},"exp1":{"ident":"s5","type":"IdentExp"},"type":"BinExp"}},{"name":"r12","type":"ConstraintDecl","exp":{"op":"IsIn","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"i":10,"type":"LiteralInteger"},"type":"BinExp"}},{"name":"r13","type":"ConstraintDecl","exp":{"op":"NotIn","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"i":9,"type":"LiteralInteger"},"type":"BinExp"}},{"name":"r14","type":"ConstraintDecl","exp":{"op":"Subset","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"kind":"Set","exp2":{"i":13,"type":"LiteralInteger"},"exp1":{"i":11,"type":"LiteralInteger"},"type":"CollectionRangeExp"},"type":"BinExp"}},{"ty":{"args":[{"type":"IntType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s6","type":"PropertyDecl","modifiers":[]},{"name":"r15","type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"y","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"And","exp2":{"op":"LT","exp2":{"i":15,"type":"LiteralInteger"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"IsIn","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"CollectionComprExp"},"exp1":{"ident":"s6","type":"IdentExp"},"type":"BinExp"}},{"name":"r16","type":"ConstraintDecl","exp":{"op":"PSubset","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"ident":"s6","type":"IdentExp"},"type":"BinExp"}},{"name":"r17","type":"ConstraintDecl","exp":{"op":"NotEQ","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"ident":"s6","type":"IdentExp"},"type":"BinExp"}},{"name":"r18","type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"y","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"And","exp2":{"op":"LT","exp2":{"op":"Minus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"i":17,"type":"LiteralInteger"},"type":"BinExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"LT","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"i":9,"type":"LiteralInteger"},"type":"BinExp"},"type":"BinExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"CollectionComprExp"},"exp1":{"kind":"Set","bindings":[{"patterns":[{"ident":"x","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"IsIn","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"CollectionComprExp"},"type":"BinExp"}},{"name":"r19","type":"ConstraintDecl","exp":{"op":"Subset","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"y","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"IsIn","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"CollectionComprExp"},"exp1":{"kind":"Set","bindings":[{"patterns":[{"ident":"x","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"IsIn","exp2":{"ident":"s6","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"CollectionComprExp"},"type":"BinExp"}},{"name":"r20","type":"ConstraintDecl","exp":{"op":"PSubset","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"y","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"IsIn","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"CollectionComprExp"},"exp1":{"kind":"Set","bindings":[{"patterns":[{"ident":"x","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"IsIn","exp2":{"ident":"s6","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"CollectionComprExp"},"type":"BinExp"}},{"name":"r21","type":"ConstraintDecl","exp":{"op":"NotEQ","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"y","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"IsIn","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"CollectionComprExp"},"exp1":{"kind":"Set","bindings":[{"patterns":[{"ident":"x","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"IsIn","exp2":{"ident":"s6","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"CollectionComprExp"},"type":"BinExp"}},{"name":"r22","type":"ConstraintDecl","exp":{"op":"IsIn","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"y","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"And","exp2":{"op":"LT","exp2":{"i":15,"type":"LiteralInteger"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"IsIn","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"CollectionComprExp"},"exp1":{"i":12,"type":"LiteralInteger"},"type":"BinExp"}},{"name":"r23","type":"ConstraintDecl","exp":{"op":"NotIn","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"y","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"And","exp2":{"op":"LT","exp2":{"i":15,"type":"LiteralInteger"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"IsIn","exp2":{"ident":"s5","type":"IdentExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"CollectionComprExp"},"exp1":{"i":15,"type":"LiteralInteger"},"type":"BinExp"}},{"ty":{"type":"IntType"},"name":"min","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"max","type":"PropertyDecl","modifiers":[]},{"name":"r24","type":"ConstraintDecl","exp":{"op":"And","exp2":{"op":"EQ","exp2":{"i":14,"type":"LiteralInteger"},"exp1":{"ident":"max","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"i":9,"type":"LiteralInteger"},"exp1":{"ident":"min","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}},{"name":"r25","type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"kind":"Set","exp2":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"max","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"min","type":"IdentExp"},"type":"BinExp"},"type":"CollectionRangeExp"},"exp1":{"ident":"s5","type":"IdentExp"},"type":"BinExp"}},{"ty":{"args":[{"type":"BoolType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s7","type":"PropertyDecl","modifiers":[]},{"name":"r26","type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"x","type":"IdentPattern"}],"collection":{"ty":{"type":"BoolType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"Not","exp":{"ident":"x","type":"IdentExp"},"type":"UnaryExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"CollectionComprExp"},"exp1":{"ident":"s7","type":"IdentExp"},"type":"BinExp"}},{"name":"r27","type":"ConstraintDecl","exp":{"op":"IsIn","exp2":{"ident":"s7","type":"IdentExp"},"exp1":{"b":false,"type":"LiteralBoolean"},"type":"BinExp"}},{"name":"r28","type":"ConstraintDecl","exp":{"op":"NotIn","exp2":{"ident":"s7","type":"IdentExp"},"exp1":{"b":true,"type":"LiteralBoolean"},"type":"BinExp"}},{"ty":{"args":[{"args":[{"type":"IntType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s8","type":"PropertyDecl","modifiers":[]},{"name":"r29","type":"ConstraintDecl","exp":{"op":"IsIn","exp2":{"ident":"s8","type":"IdentExp"},"exp1":{"kind":"Set","exps":[{"i":1,"type":"LiteralInteger"},{"i":2,"type":"LiteralInteger"},{"i":3,"type":"LiteralInteger"}],"type":"CollectionEnumExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["Sets"],"type":"QualifiedName"},"type":"IdentType"},"name":"main","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"testsets1.k","model":"\nclass Sets {\n  s1:Set[Int]\n\n  req r01: s1 = Set{1,2,3}\n\n  req r02: 1 isin s1\n\n  req r03: 4 !isin s1\n\n  req r04: s1 != Set{}\n  s2:Set[Int]\n\n  req r05: s2 = Set{}\n\n  req r06: s1 != s2\n  s3:Set[Int]\n\n  req r07: s3 = Set{3 .. 5}\n  s4:Set[Int]\n\n  req r08: s4 = s1 inter s3\n\n  req r09: s4 subset s1\n\n  req r10: s4 psubset s1\n  s5:Set[Int]\n\n  req r11: s5 = Set{x | x : Int . 10 <= x && x <= 15}\n\n  req r12: 10 isin s5\n\n  req r13: 9 !isin s5\n\n  req r14: Set{11 .. 13} subset s5\n  s6:Set[Int]\n\n  req r15: s6 = Set{y | y : Int . y isin s5 && y < 15}\n\n  req r16: s6 psubset s5\n\n  req r17: s6 != s5\n\n  req r18: Set{x | x : Int . x isin s5} = Set{y | y : Int . 9 < y && y < 17 - 1}\n\n  req r19: Set{x | x : Int . x isin s6} subset Set{y | y : Int . y isin s5}\n\n  req r20: Set{x | x : Int . x isin s6} psubset Set{y | y : Int . y isin s5}\n\n  req r21: Set{x | x : Int . x isin s6} != Set{y | y : Int . y isin s5}\n\n  req r22: 12 isin Set{y | y : Int . y isin s5 && y < 15}\n\n  req r23: 15 !isin Set{y | y : Int . y isin s5 && y < 15}\n  min:Int\n  max:Int\n\n  req r24: min = 9 && max = 14\n\n  req r25: s5 = Set{min + 1 .. max + 1}\n  s7:Set[Bool]\n\n  req r26: s7 = Set{x | x : Bool . !x}\n\n  req r27: false isin s7\n\n  req r28: true !isin s7\n  s8:Set[Set[Int]]\n\n  req r29: Set{1,2,3} isin s8\n}\n\nmain:Sets\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (main Ref)))))\n(declare-datatypes () ((Sets (mk-Sets (s1 (Set Int))(s2 (Set Int))(s3 (Set Int))(s4 (Set Int))(s5 (Set Int))(s6 (Set Int))(min Int)(max Int)(s7 (Set Bool))(s8 (Set (Set Int)))))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Sets (sel-Sets Sets))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Sets ((this Ref)) Bool\n  (is-lift-Sets (deref this))\n)\n\n(define-fun deref-Sets ((this Ref)) Sets\n  (sel-Sets (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Sets ((this Ref)) Bool\n  (deref-is-Sets this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.main: ---\n\n(define-fun TopLevelDeclarations!main ((this Ref)) Ref\n  (main (deref-TopLevelDeclarations this))\n)\n\n; ---------------------------\n;   Getters for class Sets:\n; ---------------------------\n\n; --- getters for Sets.s1: ---\n\n(define-fun Sets!s1 ((this Ref)) (Set Int)\n  (s1 (deref-Sets this))\n)\n\n; --- getters for Sets.s2: ---\n\n(define-fun Sets!s2 ((this Ref)) (Set Int)\n  (s2 (deref-Sets this))\n)\n\n; --- getters for Sets.s3: ---\n\n(define-fun Sets!s3 ((this Ref)) (Set Int)\n  (s3 (deref-Sets this))\n)\n\n; --- getters for Sets.s4: ---\n\n(define-fun Sets!s4 ((this Ref)) (Set Int)\n  (s4 (deref-Sets this))\n)\n\n; --- getters for Sets.s5: ---\n\n(define-fun Sets!s5 ((this Ref)) (Set Int)\n  (s5 (deref-Sets this))\n)\n\n; --- getters for Sets.s6: ---\n\n(define-fun Sets!s6 ((this Ref)) (Set Int)\n  (s6 (deref-Sets this))\n)\n\n; --- getters for Sets.min: ---\n\n(define-fun Sets!min ((this Ref)) Int\n  (min (deref-Sets this))\n)\n\n; --- getters for Sets.max: ---\n\n(define-fun Sets!max ((this Ref)) Int\n  (max (deref-Sets this))\n)\n\n; --- getters for Sets.s7: ---\n\n(define-fun Sets!s7 ((this Ref)) (Set Bool)\n  (s7 (deref-Sets this))\n)\n\n; --- getters for Sets.s8: ---\n\n(define-fun Sets!s8 ((this Ref)) (Set (Set Int))\n  (s8 (deref-Sets this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (deref-isa-Sets (TopLevelDeclarations!main this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert174))\n\n\n\n; -----------------------------\n;   Invariant for class Sets:\n; -----------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Sets Sets)\n(declare-const const-2-Sets Sets)\n\n; --- Invariant 1: ---\n\n(define-fun Sets.inv1 ((this Ref)) Bool\n  (= (Sets!s1 this) (store (store (store ((as const (Set Int)) false) 1 true) 2 true) 3 true))\n)\n\n(assert (! (Sets.inv1 1) :named _xkassert175))\n(assert (! (Sets.inv1 2) :named _xkassert176))\n\n; --- Invariant 2: ---\n\n(define-fun Sets.inv2 ((this Ref)) Bool\n  (select (Sets!s1 this) 1)\n)\n\n(assert (! (Sets.inv2 1) :named _xkassert177))\n(assert (! (Sets.inv2 2) :named _xkassert178))\n\n; --- Invariant 3: ---\n\n(define-fun Sets.inv3 ((this Ref)) Bool\n  (not (select (Sets!s1 this) 4))\n)\n\n(assert (! (Sets.inv3 1) :named _xkassert179))\n(assert (! (Sets.inv3 2) :named _xkassert180))\n\n; --- Invariant 4: ---\n\n(define-fun Sets.inv4 ((this Ref)) Bool\n  (not (= (Sets!s1 this) ((as const (Set Int)) false)))\n)\n\n(assert (! (Sets.inv4 1) :named _xkassert181))\n(assert (! (Sets.inv4 2) :named _xkassert182))\n\n; --- Invariant 5: ---\n\n(define-fun Sets.inv5 ((this Ref)) Bool\n  (= (Sets!s2 this) ((as const (Set Int)) false))\n)\n\n(assert (! (Sets.inv5 1) :named _xkassert183))\n(assert (! (Sets.inv5 2) :named _xkassert184))\n\n; --- Invariant 6: ---\n\n(define-fun Sets.inv6 ((this Ref)) Bool\n  (not (= (Sets!s1 this) (Sets!s2 this)))\n)\n\n(assert (! (Sets.inv6 1) :named _xkassert185))\n(assert (! (Sets.inv6 2) :named _xkassert186))\n\n; --- Invariant 7: ---\n\n(define-fun Sets.inv7 ((this Ref)) Bool\n  (= (Sets!s3 this) (store (store (store ((as const (Set Int)) false) 3 true) 4 true) 5 true))\n)\n\n(assert (! (Sets.inv7 1) :named _xkassert187))\n(assert (! (Sets.inv7 2) :named _xkassert188))\n\n; --- Invariant 8: ---\n\n(define-fun Sets.inv8 ((this Ref)) Bool\n  (= (Sets!s4 this) (intersect (Sets!s1 this) (Sets!s3 this)))\n)\n\n(assert (! (Sets.inv8 1) :named _xkassert189))\n(assert (! (Sets.inv8 2) :named _xkassert190))\n\n; --- Invariant 9: ---\n\n(define-fun Sets.inv9 ((this Ref)) Bool\n  (subset (Sets!s4 this) (Sets!s1 this))\n)\n\n(assert (! (Sets.inv9 1) :named _xkassert191))\n(assert (! (Sets.inv9 2) :named _xkassert192))\n\n; --- Invariant 10: ---\n\n(define-fun Sets.inv10 ((this Ref)) Bool\n  (and (subset (Sets!s4 this) (Sets!s1 this)) (not (= (Sets!s4 this) (Sets!s1 this))))\n)\n\n(assert (! (Sets.inv10 1) :named _xkassert193))\n(assert (! (Sets.inv10 2) :named _xkassert194))\n\n; --- Invariant 11: ---\n\n(define-fun Sets.inv11 ((this Ref)) Bool\n  (forall ((var_1 Int)) (= (select (Sets!s5 this) var_1) (and (<= 10 var_1) (<= var_1 15))))\n)\n\n(assert (! (Sets.inv11 1) :named _xkassert195))\n(assert (! (Sets.inv11 2) :named _xkassert196))\n\n; --- Invariant 12: ---\n\n(define-fun Sets.inv12 ((this Ref)) Bool\n  (select (Sets!s5 this) 10)\n)\n\n(assert (! (Sets.inv12 1) :named _xkassert197))\n(assert (! (Sets.inv12 2) :named _xkassert198))\n\n; --- Invariant 13: ---\n\n(define-fun Sets.inv13 ((this Ref)) Bool\n  (not (select (Sets!s5 this) 9))\n)\n\n(assert (! (Sets.inv13 1) :named _xkassert199))\n(assert (! (Sets.inv13 2) :named _xkassert200))\n\n; --- Invariant 14: ---\n\n(define-fun Sets.inv14 ((this Ref)) Bool\n  (subset (store (store (store ((as const (Set Int)) false) 11 true) 12 true) 13 true) (Sets!s5 this))\n)\n\n(assert (! (Sets.inv14 1) :named _xkassert201))\n(assert (! (Sets.inv14 2) :named _xkassert202))\n\n; --- Invariant 15: ---\n\n(define-fun Sets.inv15 ((this Ref)) Bool\n  (forall ((var_2 Int)) (= (select (Sets!s6 this) var_2) (and (select (Sets!s5 this) var_2) (< var_2 15))))\n)\n\n(assert (! (Sets.inv15 1) :named _xkassert203))\n(assert (! (Sets.inv15 2) :named _xkassert204))\n\n; --- Invariant 16: ---\n\n(define-fun Sets.inv16 ((this Ref)) Bool\n  (and (subset (Sets!s6 this) (Sets!s5 this)) (not (= (Sets!s6 this) (Sets!s5 this))))\n)\n\n(assert (! (Sets.inv16 1) :named _xkassert205))\n(assert (! (Sets.inv16 2) :named _xkassert206))\n\n; --- Invariant 17: ---\n\n(define-fun Sets.inv17 ((this Ref)) Bool\n  (not (= (Sets!s6 this) (Sets!s5 this)))\n)\n\n(assert (! (Sets.inv17 1) :named _xkassert207))\n(assert (! (Sets.inv17 2) :named _xkassert208))\n\n; --- Invariant 18: ---\n\n(define-fun Sets.inv18 ((this Ref)) Bool\n  (forall ((var_3 Int)) (= (select (Sets!s5 this) var_3) (and (< 9 var_3) (< var_3 (- 17 1)))))\n)\n\n(assert (! (Sets.inv18 1) :named _xkassert209))\n(assert (! (Sets.inv18 2) :named _xkassert210))\n\n; --- Invariant 19: ---\n\n(define-fun Sets.inv19 ((this Ref)) Bool\n  (forall ((var_4 Int)) (=> (select (Sets!s6 this) var_4) (select (Sets!s5 this) var_4)))\n)\n\n(assert (! (Sets.inv19 1) :named _xkassert211))\n(assert (! (Sets.inv19 2) :named _xkassert212))\n\n; --- Invariant 20: ---\n\n(define-fun Sets.inv20 ((this Ref)) Bool\n  (and (forall ((var_5 Int)) (=> (select (Sets!s6 this) var_5) (select (Sets!s5 this) var_5))) (exists ((var_5 Int)) (and (not (select (Sets!s6 this) var_5)) (select (Sets!s5 this) var_5))))\n)\n\n(assert (! (Sets.inv20 1) :named _xkassert213))\n(assert (! (Sets.inv20 2) :named _xkassert214))\n\n; --- Invariant 21: ---\n\n(define-fun Sets.inv21 ((this Ref)) Bool\n  (not (forall ((var_6 Int)) (= (select (Sets!s6 this) var_6) (select (Sets!s5 this) var_6))))\n)\n\n(assert (! (Sets.inv21 1) :named _xkassert215))\n(assert (! (Sets.inv21 2) :named _xkassert216))\n\n; --- Invariant 22: ---\n\n(define-fun Sets.inv22 ((this Ref)) Bool\n  (and (select (Sets!s5 this) 12) (< 12 15))\n)\n\n(assert (! (Sets.inv22 1) :named _xkassert217))\n(assert (! (Sets.inv22 2) :named _xkassert218))\n\n; --- Invariant 23: ---\n\n(define-fun Sets.inv23 ((this Ref)) Bool\n  (not (and (select (Sets!s5 this) 15) (< 15 15)))\n)\n\n(assert (! (Sets.inv23 1) :named _xkassert219))\n(assert (! (Sets.inv23 2) :named _xkassert220))\n\n; --- Invariant 24: ---\n\n(define-fun Sets.inv24 ((this Ref)) Bool\n  (and (= (Sets!min this) 9) (= (Sets!max this) 14))\n)\n\n(assert (! (Sets.inv24 1) :named _xkassert221))\n(assert (! (Sets.inv24 2) :named _xkassert222))\n\n; --- Invariant 25: ---\n\n(define-fun Sets.inv25 ((this Ref)) Bool\n  (forall ((var_7 Int)) (= (select (Sets!s5 this) var_7) (and (<= (+ (Sets!min this) 1) var_7) (<= var_7 (+ (Sets!max this) 1)))))\n)\n\n(assert (! (Sets.inv25 1) :named _xkassert223))\n(assert (! (Sets.inv25 2) :named _xkassert224))\n\n; --- Invariant 26: ---\n\n(define-fun Sets.inv26 ((this Ref)) Bool\n  (forall ((var_8 Bool)) (= (select (Sets!s7 this) var_8) (not var_8)))\n)\n\n(assert (! (Sets.inv26 1) :named _xkassert225))\n(assert (! (Sets.inv26 2) :named _xkassert226))\n\n; --- Invariant 27: ---\n\n(define-fun Sets.inv27 ((this Ref)) Bool\n  (select (Sets!s7 this) false)\n)\n\n(assert (! (Sets.inv27 1) :named _xkassert227))\n(assert (! (Sets.inv27 2) :named _xkassert228))\n\n; --- Invariant 28: ---\n\n(define-fun Sets.inv28 ((this Ref)) Bool\n  (not (select (Sets!s7 this) true))\n)\n\n(assert (! (Sets.inv28 1) :named _xkassert229))\n(assert (! (Sets.inv28 2) :named _xkassert230))\n\n; --- Invariant 29: ---\n\n(define-fun Sets.inv29 ((this Ref)) Bool\n  (select (Sets!s8 this) (store (store (store ((as const (Set Int)) false) 1 true) 2 true) 3 true))\n)\n\n(assert (! (Sets.inv29 1) :named _xkassert231))\n(assert (! (Sets.inv29 2) :named _xkassert232))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-Sets const-1-Sets))\n        2 (lift-Sets const-2-Sets))\n  )\n)\n\n","smtModel":"(define-fun const-2-Sets () Sets\n  (mk-Sets (_ as-array k!5)\n         (_ as-array k!12)\n         (_ as-array k!11)\n         (_ as-array k!10)\n         (_ as-array k!9)\n         (_ as-array k!8)\n         9\n         14\n         (_ as-array k!7)\n         (_ as-array k!6)))\n(define-fun const-1-Sets () Sets\n  (mk-Sets (_ as-array k!5)\n         (_ as-array k!12)\n         (_ as-array k!11)\n         (_ as-array k!10)\n         (_ as-array k!9)\n         (_ as-array k!8)\n         9\n         14\n         (_ as-array k!7)\n         (_ as-array k!24)))\n(define-fun var_6!2 () Int\n  15)\n(define-fun var_5!0 () Int\n  15)\n(define-fun var_5!1 () Int\n  15)\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 1))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!26))\n(define-fun var_6!3 () Int\n  15)\n(define-fun k!23 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 1))\n    null))\n(define-fun k!24 ((x!1 (Array Int Bool))) Bool\n  (ite (= x!1 (_ as-array k!5)) true\n  (ite (= x!1 (_ as-array k!4)) true\n    false)))\n(define-fun k!12 ((x!1 Int)) Bool\n  false)\n(define-fun k!17 ((x!1 Int)) Bool\n  (ite (= x!1 3) false\n  (ite (= x!1 2) false\n  (ite (= x!1 1) false\n    true))))\n(define-fun k!7 ((x!1 Bool)) Bool\n  (ite (= x!1 false) true\n    false))\n(define-fun k!22 ((x!1 Int)) Any\n  null)\n(define-fun k!11 ((x!1 Int)) Bool\n  (ite (= x!1 5) true\n  (ite (= x!1 3) true\n  (ite (= x!1 4) true\n    false))))\n(define-fun k!16 ((x!1 Int)) Bool\n  (ite (= x!1 3) true\n  (ite (= x!1 4) true\n    false)))\n(define-fun k!5 ((x!1 Int)) Bool\n  (ite (= x!1 3) true\n  (ite (= x!1 2) true\n  (ite (= x!1 1) true\n    false))))\n(define-fun k!6 ((x!1 (Array Int Bool))) Bool\n  (ite (= x!1 (_ as-array k!5)) true\n    false))\n(define-fun k!10 ((x!1 Int)) Bool\n  (ite (= x!1 3) true\n    false))\n(define-fun k!21 ((x!1 Int)) Bool\n  (ite (= x!1 15) false\n  (ite (= x!1 12) false\n  (ite (= x!1 13) false\n  (ite (= x!1 14) false\n  (ite (= x!1 11) false\n  (ite (= x!1 10) false\n    true)))))))\n(define-fun k!15 ((x!1 Int)) Bool\n  (ite (= x!1 3) true\n    false))\n(define-fun k!26 ((x!1 Int)) Any\n  (ite (= x!1 2)\n    (lift-Sets (mk-Sets (_ as-array k!5)\n                        (_ as-array k!12)\n                        (_ as-array k!11)\n                        (_ as-array k!10)\n                        (_ as-array k!9)\n                        (_ as-array k!8)\n                        9\n                        14\n                        (_ as-array k!7)\n                        (_ as-array k!6)))\n  (ite (= x!1 1)\n    (lift-Sets (mk-Sets (_ as-array k!5)\n                        (_ as-array k!12)\n                        (_ as-array k!11)\n                        (_ as-array k!10)\n                        (_ as-array k!9)\n                        (_ as-array k!8)\n                        9\n                        14\n                        (_ as-array k!7)\n                        (_ as-array k!24)))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 1))\n    null))))\n(define-fun k!4 ((x!1 Int)) Bool\n  false)\n(define-fun k!20 ((x!1 Int)) Bool\n  (ite (= x!1 12) true\n  (ite (= x!1 11) true\n  (ite (= x!1 13) true\n    false))))\n(define-fun k!9 ((x!1 Int)) Bool\n  (ite (= x!1 15) true\n  (ite (= x!1 12) true\n  (ite (= x!1 14) true\n  (ite (= x!1 13) true\n  (ite (= x!1 11) true\n  (ite (= x!1 10) true\n    false)))))))\n(define-fun k!25 ((x!1 Int)) Any\n  (ite (= x!1 1)\n    (lift-Sets (mk-Sets (_ as-array k!5)\n                        (_ as-array k!12)\n                        (_ as-array k!11)\n                        (_ as-array k!10)\n                        (_ as-array k!9)\n                        (_ as-array k!8)\n                        9\n                        14\n                        (_ as-array k!7)\n                        (_ as-array k!24)))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 1))\n    null)))\n(define-fun k!14 ((x!1 Int)) Bool\n  (ite (= x!1 2) true\n  (ite (= x!1 1) true\n    false)))\n(define-fun k!19 ((x!1 Int)) Bool\n  (ite (= x!1 12) true\n  (ite (= x!1 11) true\n    false)))\n(define-fun k!8 ((x!1 Int)) Bool\n  (ite (= x!1 12) true\n  (ite (= x!1 14) true\n  (ite (= x!1 13) true\n  (ite (= x!1 11) true\n  (ite (= x!1 10) true\n    false))))))\n(define-fun k!13 ((x!1 Int)) Bool\n  (ite (= x!1 1) true\n    false))\n(define-fun k!18 ((x!1 Int)) Bool\n  (ite (= x!1 11) true\n    false))"},"is.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Fruit","members":[{"ty":{"type":"Expression","operand":[{"type":"RealType","element":"ElementValue"}]},"name":"mass","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"CitrusFruit","members":[{"ty":{"type":"Expression","operand":[{"type":"RealType","element":"ElementValue"}]},"name":"vitC","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Fruit"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"Legume","members":[{"ty":{"type":"Expression","operand":[{"type":"RealType","element":"ElementValue"}]},"name":"protein","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Fruit"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"Berry","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Fruit"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"SeedyFruit","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"seeds","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Fruit"],"type":"QualifiedName"}]},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["CitrusFruit"],"type":"QualifiedName"}]}]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["CitrusFruit"],"type":"QualifiedName"}]},"name":"apple","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Legume"],"type":"QualifiedName"}]},"name":"peanut","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"TypeCastCheckExp","element":"ElementValue"},"false",{"type":"ElementValue","element":"apple"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["SeedyFruit"],"type":"QualifiedName"}]}]}}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Fruit","members":[{"ty":{"type":"RealType"},"name":"mass","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"CitrusFruit","members":[{"ty":{"type":"RealType"},"name":"vitC","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["Fruit"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"Legume","members":[{"ty":{"type":"RealType"},"name":"protein","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["Fruit"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"Berry","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["Fruit"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"SeedyFruit","members":[{"ty":{"type":"IntType"},"name":"seeds","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["Fruit"],"type":"QualifiedName"},"type":"IdentType"},{"args":[],"ident":{"names":["CitrusFruit"],"type":"QualifiedName"},"type":"IdentType"}]},{"ty":{"args":[],"ident":{"names":["CitrusFruit"],"type":"QualifiedName"},"type":"IdentType"},"name":"apple","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Legume"],"type":"QualifiedName"},"type":"IdentType"},"name":"peanut","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"cast":"false","ty":{"args":[],"ident":{"names":["SeedyFruit"],"type":"QualifiedName"},"type":"IdentType"},"type":"TypeCastCheckExp","exp":{"ident":"apple","type":"IdentExp"}}}],"type":"Model"},"typeChecks":true,"name":"is.k","model":"\nclass Fruit {\n  mass:Real\n}\n\nclass CitrusFruit extending Fruit {\n  vitC:Real\n}\n\nclass Legume extending Fruit {\n  protein:Real\n}\n\nclass Berry extending Fruit\n\nclass SeedyFruit extending Fruit,CitrusFruit {\n  seeds:Int\n}\n\napple:CitrusFruit\n\npeanut:Legume\n\nreq apple is SeedyFruit\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (apple Ref)(peanut Ref)))))\n(declare-datatypes () ((Fruit (mk-Fruit (mass Real)))))\n(declare-datatypes () ((CitrusFruit (mk-CitrusFruit (mass Real)(vitC Real)))))\n(declare-datatypes () ((Legume (mk-Legume (mass Real)(protein Real)))))\n(declare-datatypes () ((Berry (mk-Berry (mass Real)))))\n(declare-datatypes () ((SeedyFruit (mk-SeedyFruit (mass Real)(vitC Real)(seeds Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Fruit (sel-Fruit Fruit))\n  (lift-CitrusFruit (sel-CitrusFruit CitrusFruit))\n  (lift-Legume (sel-Legume Legume))\n  (lift-Berry (sel-Berry Berry))\n  (lift-SeedyFruit (sel-SeedyFruit SeedyFruit))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Fruit ((this Ref)) Bool\n  (is-lift-Fruit (deref this))\n)\n\n(define-fun deref-Fruit ((this Ref)) Fruit\n  (sel-Fruit (deref this))\n)\n\n(define-fun deref-is-CitrusFruit ((this Ref)) Bool\n  (is-lift-CitrusFruit (deref this))\n)\n\n(define-fun deref-CitrusFruit ((this Ref)) CitrusFruit\n  (sel-CitrusFruit (deref this))\n)\n\n(define-fun deref-is-Legume ((this Ref)) Bool\n  (is-lift-Legume (deref this))\n)\n\n(define-fun deref-Legume ((this Ref)) Legume\n  (sel-Legume (deref this))\n)\n\n(define-fun deref-is-Berry ((this Ref)) Bool\n  (is-lift-Berry (deref this))\n)\n\n(define-fun deref-Berry ((this Ref)) Berry\n  (sel-Berry (deref this))\n)\n\n(define-fun deref-is-SeedyFruit ((this Ref)) Bool\n  (is-lift-SeedyFruit (deref this))\n)\n\n(define-fun deref-SeedyFruit ((this Ref)) SeedyFruit\n  (sel-SeedyFruit (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Fruit ((this Ref)) Bool\n  (or\n    (deref-is-Fruit this)\n    (deref-is-CitrusFruit this)\n    (deref-is-Legume this)\n    (deref-is-Berry this)\n    (deref-is-SeedyFruit this)\n  )\n)\n\n(define-fun deref-isa-CitrusFruit ((this Ref)) Bool\n  (or\n    (deref-is-CitrusFruit this)\n    (deref-is-SeedyFruit this)\n  )\n)\n\n(define-fun deref-isa-Legume ((this Ref)) Bool\n  (deref-is-Legume this)\n)\n\n(define-fun deref-isa-Berry ((this Ref)) Bool\n  (deref-is-Berry this)\n)\n\n(define-fun deref-isa-SeedyFruit ((this Ref)) Bool\n  (deref-is-SeedyFruit this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.apple: ---\n\n(define-fun TopLevelDeclarations!apple ((this Ref)) Ref\n  (apple (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.peanut: ---\n\n(define-fun TopLevelDeclarations!peanut ((this Ref)) Ref\n  (peanut (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (deref-isa-CitrusFruit (TopLevelDeclarations!apple this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert170))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-Legume (TopLevelDeclarations!peanut this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert171))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (deref-isa-SeedyFruit (TopLevelDeclarations!apple this))\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert172))\n\n\n\n; ------------------------------\n;   Invariant for class Fruit:\n; ------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Fruit Fruit)\n\n\n\n; ------------------------------------\n;   Invariant for class CitrusFruit:\n; ------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-6-CitrusFruit CitrusFruit)\n(declare-const const-7-CitrusFruit CitrusFruit)\n\n\n\n; -------------------------------\n;   Invariant for class Legume:\n; -------------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-Legume Legume)\n(declare-const const-4-Legume Legume)\n\n\n\n; ------------------------------\n;   Invariant for class Berry:\n; ------------------------------\n\n; --- Constants: ---\n\n(declare-const const-5-Berry Berry)\n\n\n\n; -----------------------------------\n;   Invariant for class SeedyFruit:\n; -----------------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-SeedyFruit SeedyFruit)\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-Fruit const-1-Fruit))\n        6 (lift-CitrusFruit const-6-CitrusFruit))\n        7 (lift-CitrusFruit const-7-CitrusFruit))\n        3 (lift-Legume const-3-Legume))\n        4 (lift-Legume const-4-Legume))\n        5 (lift-Berry const-5-Berry))\n        2 (lift-SeedyFruit const-2-SeedyFruit))\n  )\n)\n\n","smtModel":"(define-fun const-7-CitrusFruit () CitrusFruit\n  (mk-CitrusFruit 3.0 4.0))\n(define-fun const-5-Berry () Berry\n  (mk-Berry 7.0))\n(define-fun const-2-SeedyFruit () SeedyFruit\n  (mk-SeedyFruit 10.0 11.0 8))\n(define-fun const-1-Fruit () Fruit\n  (mk-Fruit 0.0))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 2 3))\n(define-fun const-3-Legume () Legume\n  (mk-Legume 8.0 9.0))\n(define-fun const-4-Legume () Legume\n  (mk-Legume 5.0 6.0))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!8))\n(define-fun const-6-CitrusFruit () CitrusFruit\n  (mk-CitrusFruit 1.0 2.0))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Berry (mk-Berry 7.0))\n  (ite (= x!1 3) (lift-Legume (mk-Legume 8.0 9.0))\n  (ite (= x!1 6) (lift-CitrusFruit (mk-CitrusFruit 1.0 2.0))\n  (ite (= x!1 1) (lift-Fruit (mk-Fruit 0.0))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 3))\n  (ite (= x!1 7) (lift-CitrusFruit (mk-CitrusFruit 3.0 4.0))\n  (ite (= x!1 4) (lift-Legume (mk-Legume 5.0 6.0))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Fruit (mk-Fruit 0.0))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 3))\n  (ite (= x!1 7) (lift-CitrusFruit (mk-CitrusFruit 3.0 4.0))\n  (ite (= x!1 6) (lift-CitrusFruit (mk-CitrusFruit 1.0 2.0))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 3))\n    null))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Legume (mk-Legume 8.0 9.0))\n  (ite (= x!1 6) (lift-CitrusFruit (mk-CitrusFruit 1.0 2.0))\n  (ite (= x!1 1) (lift-Fruit (mk-Fruit 0.0))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 3))\n  (ite (= x!1 7) (lift-CitrusFruit (mk-CitrusFruit 3.0 4.0))\n  (ite (= x!1 4) (lift-Legume (mk-Legume 5.0 6.0))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Fruit (mk-Fruit 0.0))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 3))\n  (ite (= x!1 6) (lift-CitrusFruit (mk-CitrusFruit 1.0 2.0))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Legume (mk-Legume 8.0 9.0))\n  (ite (= x!1 5) (lift-Berry (mk-Berry 7.0))\n  (ite (= x!1 4) (lift-Legume (mk-Legume 5.0 6.0))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 3))\n  (ite (= x!1 2) (lift-SeedyFruit (mk-SeedyFruit 10.0 11.0 8))\n  (ite (= x!1 1) (lift-Fruit (mk-Fruit 0.0))\n  (ite (= x!1 7) (lift-CitrusFruit (mk-CitrusFruit 3.0 4.0))\n  (ite (= x!1 6) (lift-CitrusFruit (mk-CitrusFruit 1.0 2.0))\n    null)))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Legume (mk-Legume 8.0 9.0))\n  (ite (= x!1 1) (lift-Fruit (mk-Fruit 0.0))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 3))\n  (ite (= x!1 7) (lift-CitrusFruit (mk-CitrusFruit 3.0 4.0))\n  (ite (= x!1 6) (lift-CitrusFruit (mk-CitrusFruit 1.0 2.0))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Fruit (mk-Fruit 0.0))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 3))\n    null)))"},"testsmt6.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"ERROR"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},42]},{"type":"ElementValue","element":"ERROR"}]}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"id","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"State","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"id","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"RocketMachine","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["State"],"type":"QualifiedName"}]},"name":"off","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["State"],"type":"QualifiedName"}]},"name":"ready","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["State"],"type":"QualifiedName"}]},"name":"firing","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"turn_on","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"fire","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"turn_off","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"off"},{"type":"ElementValue","element":"ready"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"off"},{"type":"ElementValue","element":"firing"}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"firing"},{"type":"ElementValue","element":"ready"}]}]}},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["State"],"type":"QualifiedName"}]},"ident":"move","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["State"],"type":"QualifiedName"}]},"name":"s","type":"Param"},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"e","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s"},{"type":"ElementValue","element":"off"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"e"},{"type":"ElementValue","element":"turn_on"}]}]},{"type":"ElementValue","element":"ready"},{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s"},{"type":"ElementValue","element":"ready"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"e"},{"type":"ElementValue","element":"fire"}]}]},{"type":"ElementValue","element":"firing"},{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s"},{"type":"ElementValue","element":"firing"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"e"},{"type":"ElementValue","element":"turn_off"}]}]},{"type":"ElementValue","element":"off"},{"type":"ElementValue","element":"s"}]}]}]}}],"spec":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"move"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"off"}]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"turn_on"}]}]},{"type":"ElementValue","element":"ready"}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"move"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"ready"}]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"fire"}]}]},{"type":"ElementValue","element":"firing"}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"move"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"firing"}]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"turn_off"}]}]},{"type":"ElementValue","element":"off"}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"off"},{"type":"ElementValue","element":"ready"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"off"},{"type":"ElementValue","element":"firing"}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"firing"},{"type":"ElementValue","element":"ready"}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"move"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"off"}]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"turn_on"}]}]},{"type":"ElementValue","element":"ready"}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"move"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"ready"}]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"fire"}]}]},{"type":"ElementValue","element":"firing"}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"move"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"firing"}]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"turn_off"}]}]},{"type":"ElementValue","element":"off"}]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["RocketMachine"],"type":"QualifiedName"}]},"name":"machine","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"IntType"},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"ERROR","type":"IdentExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"BoolType"},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"trueBranch":{"i":42,"type":"LiteralInteger"},"falseBranch":{"ident":"ERROR","type":"IdentExp"},"type":"IfExp","cond":{"ident":"b","type":"IdentExp"}}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"type":"IntType"},"name":"id","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"State","members":[{"ty":{"type":"IntType"},"name":"id","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"RocketMachine","members":[{"ty":{"args":[],"ident":{"names":["State"],"type":"QualifiedName"},"type":"IdentType"},"name":"off","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["State"],"type":"QualifiedName"},"type":"IdentType"},"name":"ready","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["State"],"type":"QualifiedName"},"type":"IdentType"},"name":"firing","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"turn_on","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"fire","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"turn_off","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"And","exp2":{"op":"NotEQ","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"ident":"firing","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"NotEQ","exp2":{"ident":"firing","type":"IdentExp"},"exp1":{"ident":"off","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"NotEQ","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"ident":"off","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}},{"ty":{"args":[],"ident":{"names":["State"],"type":"QualifiedName"},"type":"IdentType"},"ident":"move","typeParams":[],"type":"FunDecl","params":[{"ty":{"args":[],"ident":{"names":["State"],"type":"QualifiedName"},"type":"IdentType"},"name":"s","type":"Param"},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"e","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"trueBranch":{"ident":"ready","type":"IdentExp"},"falseBranch":{"trueBranch":{"ident":"firing","type":"IdentExp"},"falseBranch":{"trueBranch":{"ident":"off","type":"IdentExp"},"falseBranch":{"ident":"s","type":"IdentExp"},"type":"IfExp","cond":{"op":"And","exp2":{"op":"EQ","exp2":{"ident":"turn_off","type":"IdentExp"},"exp1":{"ident":"e","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"ident":"firing","type":"IdentExp"},"exp1":{"ident":"s","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}},"type":"IfExp","cond":{"op":"And","exp2":{"op":"EQ","exp2":{"ident":"fire","type":"IdentExp"},"exp1":{"ident":"e","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"ident":"s","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}},"type":"IfExp","cond":{"op":"And","exp2":{"op":"EQ","exp2":{"ident":"turn_on","type":"IdentExp"},"exp1":{"ident":"e","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"ident":"off","type":"IdentExp"},"exp1":{"ident":"s","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}}}],"spec":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"args":[{"type":"PositionalArgument","exp":{"ident":"off","type":"IdentExp"}},{"type":"PositionalArgument","exp":{"ident":"turn_on","type":"IdentExp"}}],"exp1":{"ident":"move","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"ident":"firing","type":"IdentExp"},"exp1":{"args":[{"type":"PositionalArgument","exp":{"ident":"ready","type":"IdentExp"}},{"type":"PositionalArgument","exp":{"ident":"fire","type":"IdentExp"}}],"exp1":{"ident":"move","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"ident":"off","type":"IdentExp"},"exp1":{"args":[{"type":"PositionalArgument","exp":{"ident":"firing","type":"IdentExp"}},{"type":"PositionalArgument","exp":{"ident":"turn_off","type":"IdentExp"}}],"exp1":{"ident":"move","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"And","exp2":{"op":"EQ","exp2":{"ident":"off","type":"IdentExp"},"exp1":{"args":[{"type":"PositionalArgument","exp":{"ident":"firing","type":"IdentExp"}},{"type":"PositionalArgument","exp":{"ident":"turn_off","type":"IdentExp"}}],"exp1":{"ident":"move","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"EQ","exp2":{"ident":"firing","type":"IdentExp"},"exp1":{"args":[{"type":"PositionalArgument","exp":{"ident":"ready","type":"IdentExp"}},{"type":"PositionalArgument","exp":{"ident":"fire","type":"IdentExp"}}],"exp1":{"ident":"move","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"EQ","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"args":[{"type":"PositionalArgument","exp":{"ident":"off","type":"IdentExp"}},{"type":"PositionalArgument","exp":{"ident":"turn_on","type":"IdentExp"}}],"exp1":{"ident":"move","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"NotEQ","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"ident":"firing","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"NotEQ","exp2":{"ident":"firing","type":"IdentExp"},"exp1":{"ident":"off","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"NotEQ","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"ident":"off","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["RocketMachine"],"type":"QualifiedName"},"type":"IdentType"},"name":"machine","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt6.k","model":"\nERROR:Int\n\nreq ERROR < 0\n\nfun CHECK(b:Bool) : Int\n{\n  if b then\n    42\n  else\n    ERROR\n}\n\nclass Event {\n  id:Int\n}\n\nclass State {\n  id:Int\n}\n\nclass RocketMachine {\n  off:State\n  ready:State\n  firing:State\n  turn_on:Event\n  fire:Event\n  turn_off:Event\n\n  req off != ready && off != firing && firing != ready\n\n  fun move(s:State,e:Event) : State\n  {\n    if s = off && e = turn_on then\n      ready\n    else\n      if s = ready && e = fire then\n        firing\n      else\n        if s = firing && e = turn_off then\n          off\n        else\n          s\n  }\n\n  req move(off,turn_on) = ready\n\n  req move(ready,fire) = firing\n\n  req move(firing,turn_off) = off\n  RESULT:Int = CHECK(off != ready && off != firing && firing != ready && move(off,turn_on) = ready && move(ready,fire) = firing && move(firing,turn_off) = off)\n}\n\nmachine:RocketMachine\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (ERROR Int)(machine Ref)))))\n(declare-datatypes () ((Event (mk-Event (id Int)))))\n(declare-datatypes () ((State (mk-State (id Int)))))\n(declare-datatypes () ((RocketMachine (mk-RocketMachine (off Ref)(ready Ref)(firing Ref)(turn_on Ref)(fire Ref)(turn_off Ref)(RESULT Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Event (sel-Event Event))\n  (lift-State (sel-State State))\n  (lift-RocketMachine (sel-RocketMachine RocketMachine))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-State ((this Ref)) Bool\n  (is-lift-State (deref this))\n)\n\n(define-fun deref-State ((this Ref)) State\n  (sel-State (deref this))\n)\n\n(define-fun deref-is-RocketMachine ((this Ref)) Bool\n  (is-lift-RocketMachine (deref this))\n)\n\n(define-fun deref-RocketMachine ((this Ref)) RocketMachine\n  (sel-RocketMachine (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-State ((this Ref)) Bool\n  (deref-is-State this)\n)\n\n(define-fun deref-isa-RocketMachine ((this Ref)) Bool\n  (deref-is-RocketMachine this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.ERROR: ---\n\n(define-fun TopLevelDeclarations.ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations!ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.machine: ---\n\n(define-fun TopLevelDeclarations!machine ((this Ref)) Ref\n  (machine (deref-TopLevelDeclarations this))\n)\n\n; ------------------------------------\n;   Getters for class RocketMachine:\n; ------------------------------------\n\n; --- getters for RocketMachine.off: ---\n\n(define-fun RocketMachine.off ((this Ref)) Ref\n  (off (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!off ((this Ref)) Ref\n  (off (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.ready: ---\n\n(define-fun RocketMachine.ready ((this Ref)) Ref\n  (ready (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!ready ((this Ref)) Ref\n  (ready (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.firing: ---\n\n(define-fun RocketMachine.firing ((this Ref)) Ref\n  (firing (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!firing ((this Ref)) Ref\n  (firing (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.turn_on: ---\n\n(define-fun RocketMachine.turn_on ((this Ref)) Ref\n  (turn_on (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!turn_on ((this Ref)) Ref\n  (turn_on (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.fire: ---\n\n(define-fun RocketMachine.fire ((this Ref)) Ref\n  (fire (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!fire ((this Ref)) Ref\n  (fire (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.turn_off: ---\n\n(define-fun RocketMachine.turn_off ((this Ref)) Ref\n  (turn_off (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!turn_off ((this Ref)) Ref\n  (turn_off (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.RESULT: ---\n\n(define-fun RocketMachine!RESULT ((this Ref)) Int\n  (RESULT (deref-RocketMachine this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------------------\n;   Methods for class TopLevelDeclarations:\n; -------------------------------------------\n\n(define-fun TopLevelDeclarations.CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations.ERROR this))\n)\n\n(define-fun TopLevelDeclarations!CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations!ERROR this))\n)\n\n; ------------------------------------\n;   Methods for class RocketMachine:\n; ------------------------------------\n\n(define-fun RocketMachine.move ((this Ref)(s Ref)(e Ref)) Ref\n  (ite (and (= s (RocketMachine.off this)) (= e (RocketMachine.turn_on this))) (RocketMachine.ready this) (ite (and (= s (RocketMachine.ready this)) (= e (RocketMachine.fire this))) (RocketMachine.firing this) (ite (and (= s (RocketMachine.firing this)) (= e (RocketMachine.turn_off this))) (RocketMachine.off this) s)))\n)\n\n(define-fun RocketMachine!move ((this Ref)(s Ref)(e Ref)) Ref\n  (ite (and (= s (RocketMachine!off this)) (= e (RocketMachine!turn_on this))) (RocketMachine!ready this) (ite (and (= s (RocketMachine!ready this)) (= e (RocketMachine!fire this))) (RocketMachine!firing this) (ite (and (= s (RocketMachine!firing this)) (= e (RocketMachine!turn_off this))) (RocketMachine!off this) s)))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (deref-isa-RocketMachine (TopLevelDeclarations!machine this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert512))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (< (TopLevelDeclarations!ERROR this) 0)\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert513))\n\n\n\n; ------------------------------\n;   Invariant for class Event:\n; ------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Event Event)\n(declare-const const-2-Event Event)\n(declare-const const-3-Event Event)\n(declare-const const-4-Event Event)\n(declare-const const-5-Event Event)\n(declare-const const-6-Event Event)\n(declare-const const-7-Event Event)\n\n\n\n; ------------------------------\n;   Invariant for class State:\n; ------------------------------\n\n; --- Constants: ---\n\n(declare-const const-8-State State)\n(declare-const const-9-State State)\n(declare-const const-10-State State)\n(declare-const const-11-State State)\n(declare-const const-12-State State)\n(declare-const const-13-State State)\n(declare-const const-14-State State)\n\n\n\n; --------------------------------------\n;   Invariant for class RocketMachine:\n; --------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-15-RocketMachine RocketMachine)\n(declare-const const-16-RocketMachine RocketMachine)\n\n; --- Invariant 1: ---\n\n(define-fun RocketMachine.inv1 ((this Ref)) Bool\n  (= (RocketMachine!RESULT this) (TopLevelDeclarations!CHECK 0 (and (and (and (and (and (not (= (RocketMachine!off this) (RocketMachine!ready this))) (not (= (RocketMachine!off this) (RocketMachine!firing this)))) (not (= (RocketMachine!firing this) (RocketMachine!ready this)))) (= (RocketMachine!move this (RocketMachine!off this) (RocketMachine!turn_on this)) (RocketMachine!ready this))) (= (RocketMachine!move this (RocketMachine!ready this) (RocketMachine!fire this)) (RocketMachine!firing this))) (= (RocketMachine!move this (RocketMachine!firing this) (RocketMachine!turn_off this)) (RocketMachine!off this)))))\n)\n\n(assert (! (RocketMachine.inv1 15) :named _xkassert514))\n(assert (! (RocketMachine.inv1 16) :named _xkassert515))\n\n; --- Invariant 2: ---\n\n(define-fun RocketMachine.inv2 ((this Ref)) Bool\n  (deref-isa-State (RocketMachine!off this))\n)\n\n(assert (! (RocketMachine.inv2 15) :named _xkassert516))\n(assert (! (RocketMachine.inv2 16) :named _xkassert517))\n\n; --- Invariant 3: ---\n\n(define-fun RocketMachine.inv3 ((this Ref)) Bool\n  (deref-isa-State (RocketMachine!ready this))\n)\n\n(assert (! (RocketMachine.inv3 15) :named _xkassert518))\n(assert (! (RocketMachine.inv3 16) :named _xkassert519))\n\n; --- Invariant 4: ---\n\n(define-fun RocketMachine.inv4 ((this Ref)) Bool\n  (deref-isa-State (RocketMachine!firing this))\n)\n\n(assert (! (RocketMachine.inv4 15) :named _xkassert520))\n(assert (! (RocketMachine.inv4 16) :named _xkassert521))\n\n; --- Invariant 5: ---\n\n(define-fun RocketMachine.inv5 ((this Ref)) Bool\n  (deref-isa-Event (RocketMachine!turn_on this))\n)\n\n(assert (! (RocketMachine.inv5 15) :named _xkassert522))\n(assert (! (RocketMachine.inv5 16) :named _xkassert523))\n\n; --- Invariant 6: ---\n\n(define-fun RocketMachine.inv6 ((this Ref)) Bool\n  (deref-isa-Event (RocketMachine!fire this))\n)\n\n(assert (! (RocketMachine.inv6 15) :named _xkassert524))\n(assert (! (RocketMachine.inv6 16) :named _xkassert525))\n\n; --- Invariant 7: ---\n\n(define-fun RocketMachine.inv7 ((this Ref)) Bool\n  (deref-isa-Event (RocketMachine!turn_off this))\n)\n\n(assert (! (RocketMachine.inv7 15) :named _xkassert526))\n(assert (! (RocketMachine.inv7 16) :named _xkassert527))\n\n; --- Invariant 8: ---\n\n(define-fun RocketMachine.inv8 ((this Ref)) Bool\n  (and (and (not (= (RocketMachine!off this) (RocketMachine!ready this))) (not (= (RocketMachine!off this) (RocketMachine!firing this)))) (not (= (RocketMachine!firing this) (RocketMachine!ready this))))\n)\n\n(assert (! (RocketMachine.inv8 15) :named _xkassert528))\n(assert (! (RocketMachine.inv8 16) :named _xkassert529))\n\n; --- Invariant 9: ---\n\n(define-fun RocketMachine.inv9 ((this Ref)) Bool\n  (= (RocketMachine!move this (RocketMachine!off this) (RocketMachine!turn_on this)) (RocketMachine!ready this))\n)\n\n(assert (! (RocketMachine.inv9 15) :named _xkassert530))\n(assert (! (RocketMachine.inv9 16) :named _xkassert531))\n\n; --- Invariant 10: ---\n\n(define-fun RocketMachine.inv10 ((this Ref)) Bool\n  (= (RocketMachine!move this (RocketMachine!ready this) (RocketMachine!fire this)) (RocketMachine!firing this))\n)\n\n(assert (! (RocketMachine.inv10 15) :named _xkassert532))\n(assert (! (RocketMachine.inv10 16) :named _xkassert533))\n\n; --- Invariant 11: ---\n\n(define-fun RocketMachine.inv11 ((this Ref)) Bool\n  (= (RocketMachine!move this (RocketMachine!firing this) (RocketMachine!turn_off this)) (RocketMachine!off this))\n)\n\n(assert (! (RocketMachine.inv11 15) :named _xkassert534))\n(assert (! (RocketMachine.inv11 16) :named _xkassert535))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-Event const-1-Event))\n        2 (lift-Event const-2-Event))\n        3 (lift-Event const-3-Event))\n        4 (lift-Event const-4-Event))\n        5 (lift-Event const-5-Event))\n        6 (lift-Event const-6-Event))\n        7 (lift-Event const-7-Event))\n        8 (lift-State const-8-State))\n        9 (lift-State const-9-State))\n        10 (lift-State const-10-State))\n        11 (lift-State const-11-State))\n        12 (lift-State const-12-State))\n        13 (lift-State const-13-State))\n        14 (lift-State const-14-State))\n        15 (lift-RocketMachine const-15-RocketMachine))\n        16 (lift-RocketMachine const-16-RocketMachine))\n  )\n)\n\n","smtModel":"(define-fun const-8-State () State\n  (mk-State 19))\n(define-fun const-9-State () State\n  (mk-State 20))\n(define-fun const-13-State () State\n  (mk-State 24))\n(define-fun const-5-Event () Event\n  (mk-Event 28))\n(define-fun const-15-RocketMachine () RocketMachine\n  (mk-RocketMachine 12 13 14 1 5 7 42))\n(define-fun const-1-Event () Event\n  (mk-Event 26))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations (- 1) 16))\n(define-fun const-12-State () State\n  (mk-State 23))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!17))\n(define-fun const-7-Event () Event\n  (mk-Event 29))\n(define-fun const-11-State () State\n  (mk-State 22))\n(define-fun const-4-Event () Event\n  (mk-Event 27))\n(define-fun const-3-Event () Event\n  (mk-Event 18))\n(define-fun const-14-State () State\n  (mk-State 25))\n(define-fun const-6-Event () Event\n  (mk-Event 30))\n(define-fun const-16-RocketMachine () RocketMachine\n  (mk-RocketMachine 12 14 13 4 7 6 42))\n(define-fun const-10-State () State\n  (mk-State 21))\n(define-fun const-2-Event () Event\n  (mk-Event 17))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 6) (lift-Event (mk-Event 30))\n    null))))))))\n(define-fun k!12 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 6) (lift-Event (mk-Event 30))\n  (ite (= x!1 11) (lift-State (mk-State 22))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 8) (lift-State (mk-State 19))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 10) (lift-State (mk-State 21))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 9) (lift-State (mk-State 20))\n  (ite (= x!1 7) (lift-Event (mk-Event 29))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n    null)))))))))))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n    null))\n(define-fun k!17 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 11) (lift-State (mk-State 22))\n  (ite (= x!1 15) (lift-RocketMachine (mk-RocketMachine 12 13 14 1 5 7 42))\n  (ite (= x!1 10) (lift-State (mk-State 21))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 9) (lift-State (mk-State 20))\n  (ite (= x!1 16) (lift-RocketMachine (mk-RocketMachine 12 14 13 4 7 6 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n  (ite (= x!1 12) (lift-State (mk-State 23))\n  (ite (= x!1 14) (lift-State (mk-State 25))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 13) (lift-State (mk-State 24))\n  (ite (= x!1 8) (lift-State (mk-State 19))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 7) (lift-Event (mk-Event 29))\n  (ite (= x!1 6) (lift-Event (mk-Event 30))\n    null))))))))))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n    null)))))))\n(define-fun k!11 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 6) (lift-Event (mk-Event 30))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 8) (lift-State (mk-State 19))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 10) (lift-State (mk-State 21))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 9) (lift-State (mk-State 20))\n  (ite (= x!1 7) (lift-Event (mk-Event 29))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n    null))))))))))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!16 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 11) (lift-State (mk-State 22))\n  (ite (= x!1 15) (lift-RocketMachine (mk-RocketMachine 12 13 14 1 5 7 42))\n  (ite (= x!1 10) (lift-State (mk-State 21))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 9) (lift-State (mk-State 20))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n  (ite (= x!1 12) (lift-State (mk-State 23))\n  (ite (= x!1 14) (lift-State (mk-State 25))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 13) (lift-State (mk-State 24))\n  (ite (= x!1 8) (lift-State (mk-State 19))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 7) (lift-Event (mk-Event 29))\n  (ite (= x!1 6) (lift-Event (mk-Event 30))\n    null)))))))))))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n    null))))))\n(define-fun k!10 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 8) (lift-State (mk-State 19))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 9) (lift-State (mk-State 20))\n  (ite (= x!1 7) (lift-Event (mk-Event 29))\n  (ite (= x!1 6) (lift-Event (mk-Event 30))\n    null)))))))))))\n(define-fun k!15 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 11) (lift-State (mk-State 22))\n  (ite (= x!1 10) (lift-State (mk-State 21))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 9) (lift-State (mk-State 20))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n  (ite (= x!1 12) (lift-State (mk-State 23))\n  (ite (= x!1 14) (lift-State (mk-State 25))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 13) (lift-State (mk-State 24))\n  (ite (= x!1 8) (lift-State (mk-State 19))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 7) (lift-Event (mk-Event 29))\n  (ite (= x!1 6) (lift-Event (mk-Event 30))\n    null))))))))))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n    null)))))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 8) (lift-State (mk-State 19))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 7) (lift-Event (mk-Event 29))\n  (ite (= x!1 6) (lift-Event (mk-Event 30))\n    null))))))))))\n(define-fun k!14 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 11) (lift-State (mk-State 22))\n  (ite (= x!1 10) (lift-State (mk-State 21))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 9) (lift-State (mk-State 20))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n  (ite (= x!1 12) (lift-State (mk-State 23))\n  (ite (= x!1 13) (lift-State (mk-State 24))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 8) (lift-State (mk-State 19))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 7) (lift-Event (mk-Event 29))\n  (ite (= x!1 6) (lift-Event (mk-Event 30))\n    null)))))))))))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n    null))))\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 7) (lift-Event (mk-Event 29))\n  (ite (= x!1 6) (lift-Event (mk-Event 30))\n    null)))))))))\n(define-fun k!13 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 28))\n  (ite (= x!1 12) (lift-State (mk-State 23))\n  (ite (= x!1 6) (lift-Event (mk-Event 30))\n  (ite (= x!1 11) (lift-State (mk-State 22))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n  (ite (= x!1 3) (lift-Event (mk-Event 18))\n  (ite (= x!1 8) (lift-State (mk-State 19))\n  (ite (= x!1 2) (lift-Event (mk-Event 17))\n  (ite (= x!1 10) (lift-State (mk-State 21))\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 9) (lift-State (mk-State 20))\n  (ite (= x!1 7) (lift-Event (mk-Event 29))\n  (ite (= x!1 4) (lift-Event (mk-Event 27))\n    null))))))))))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Event (mk-Event 26))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 16))\n    null)))"},"testsmt4.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"ERROR"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},42]},{"type":"ElementValue","element":"ERROR"}]}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"t1","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"t2","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"t1"},{"type":"ElementValue","element":"t2"}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Minus",{"type":"ElementValue","element":"t2"},{"type":"ElementValue","element":"t1"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"t1"},{"type":"ElementValue","element":"t2"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Minus",{"type":"ElementValue","element":"t2"},{"type":"ElementValue","element":"t1"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Schedule","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"a","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"b","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"c","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"d","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"ident":"before","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"e1","type":"Param"},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"e2","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"e1"},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"e2"},"t1"]}]}}],"spec":[]},{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"ident":"meets","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"e1","type":"Param"},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"e2","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"e1"},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"e2"},"t1"]}]}}],"spec":[]},{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"ident":"contains","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"e1","type":"Param"},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"e2","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"e1"},"t1"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"e2"},"t1"]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"e2"},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"e1"},"t2"]}]}]}}],"spec":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"meets"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"a"}]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"b"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"before"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"b"}]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"c"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"contains"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"c"}]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"d"}]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},"t1"]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"c"},"t1"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"c"},"t1"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"d"},"t1"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"d"},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"c"},"t2"]}]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Schedule"],"type":"QualifiedName"}]},"name":"schedule","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"IntType"},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"ERROR","type":"IdentExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"BoolType"},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"trueBranch":{"i":42,"type":"LiteralInteger"},"falseBranch":{"ident":"ERROR","type":"IdentExp"},"type":"IfExp","cond":{"ident":"b","type":"IdentExp"}}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"type":"IntType"},"name":"t1","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"t2","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"op":"Minus","exp2":{"ident":"t1","type":"IdentExp"},"exp1":{"ident":"t2","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"And","exp2":{"op":"LT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"op":"Minus","exp2":{"ident":"t1","type":"IdentExp"},"exp1":{"ident":"t2","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"exp1":{"op":"LT","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Schedule","members":[{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"a","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"b","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"c","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"d","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"BoolType"},"ident":"before","typeParams":[],"type":"FunDecl","params":[{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"e1","type":"Param"},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"e2","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"LT","exp2":{"ident":"t1","exp":{"ident":"e2","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"e1","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}}],"spec":[]},{"ty":{"type":"BoolType"},"ident":"meets","typeParams":[],"type":"FunDecl","params":[{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"e1","type":"Param"},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"e2","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"EQ","exp2":{"ident":"t1","exp":{"ident":"e2","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"e1","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}}],"spec":[]},{"ty":{"type":"BoolType"},"ident":"contains","typeParams":[],"type":"FunDecl","params":[{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"e1","type":"Param"},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"e2","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"And","exp2":{"op":"LT","exp2":{"ident":"t2","exp":{"ident":"e1","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"e2","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"LT","exp2":{"ident":"t1","exp":{"ident":"e2","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t1","exp":{"ident":"e1","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"}}],"spec":[]},{"type":"ConstraintDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"ident":"a","type":"IdentExp"}},{"type":"PositionalArgument","exp":{"ident":"b","type":"IdentExp"}}],"exp1":{"ident":"meets","type":"IdentExp"},"type":"FunApplExp"}},{"type":"ConstraintDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"ident":"b","type":"IdentExp"}},{"type":"PositionalArgument","exp":{"ident":"c","type":"IdentExp"}}],"exp1":{"ident":"before","type":"IdentExp"},"type":"FunApplExp"}},{"type":"ConstraintDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"ident":"c","type":"IdentExp"}},{"type":"PositionalArgument","exp":{"ident":"d","type":"IdentExp"}}],"exp1":{"ident":"contains","type":"IdentExp"},"type":"FunApplExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"And","exp2":{"op":"LTE","exp2":{"ident":"t2","exp":{"ident":"c","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"d","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"LTE","exp2":{"ident":"t1","exp":{"ident":"d","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t1","exp":{"ident":"c","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"LT","exp2":{"ident":"t1","exp":{"ident":"c","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"b","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"ident":"t1","exp":{"ident":"b","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["Schedule"],"type":"QualifiedName"},"type":"IdentType"},"name":"schedule","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt4.k","model":"\nERROR:Int\n\nreq ERROR < 0\n\nfun CHECK(b:Bool) : Int\n{\n  if b then\n    42\n  else\n    ERROR\n}\n\nclass Event {\n  t1:Int\n  t2:Int\n\n  req t1 < t2\n\n  req t2 - t1 < 10\n  RESULT:Int = CHECK(t1 < t2 && t2 - t1 < 10)\n}\n\nclass Schedule {\n  a:Event\n  b:Event\n  c:Event\n  d:Event\n\n  fun before(e1:Event,e2:Event) : Bool\n  {\n    e1.t2 < e2.t1\n  }\n\n  fun meets(e1:Event,e2:Event) : Bool\n  {\n    e1.t2 = e2.t1\n  }\n\n  fun contains(e1:Event,e2:Event) : Bool\n  {\n    e1.t1 < e2.t1 && e2.t2 < e1.t2\n  }\n\n  req meets(a,b)\n\n  req before(b,c)\n\n  req contains(c,d)\n  RESULT:Int = CHECK(a.t2 = b.t1 && b.t2 < c.t1 && c.t1 <= d.t1 && d.t2 <= c.t2)\n}\n\nschedule:Schedule\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (ERROR Int)(schedule Ref)))))\n(declare-datatypes () ((Event (mk-Event (t1 Int)(t2 Int)(RESULT Int)))))\n(declare-datatypes () ((Schedule (mk-Schedule (a Ref)(b Ref)(c Ref)(d Ref)(RESULT Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Event (sel-Event Event))\n  (lift-Schedule (sel-Schedule Schedule))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-Schedule ((this Ref)) Bool\n  (is-lift-Schedule (deref this))\n)\n\n(define-fun deref-Schedule ((this Ref)) Schedule\n  (sel-Schedule (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-Schedule ((this Ref)) Bool\n  (deref-is-Schedule this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.ERROR: ---\n\n(define-fun TopLevelDeclarations.ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations!ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.schedule: ---\n\n(define-fun TopLevelDeclarations!schedule ((this Ref)) Ref\n  (schedule (deref-TopLevelDeclarations this))\n)\n\n; ----------------------------\n;   Getters for class Event:\n; ----------------------------\n\n; --- getters for Event.t1: ---\n\n(define-fun Event.t1 ((this Ref)) Int\n  (t1 (deref-Event this))\n)\n\n(define-fun Event!t1 ((this Ref)) Int\n  (t1 (deref-Event this))\n)\n\n; --- getters for Event.t2: ---\n\n(define-fun Event.t2 ((this Ref)) Int\n  (t2 (deref-Event this))\n)\n\n(define-fun Event!t2 ((this Ref)) Int\n  (t2 (deref-Event this))\n)\n\n; --- getters for Event.RESULT: ---\n\n(define-fun Event!RESULT ((this Ref)) Int\n  (RESULT (deref-Event this))\n)\n\n; -------------------------------\n;   Getters for class Schedule:\n; -------------------------------\n\n; --- getters for Schedule.a: ---\n\n(define-fun Schedule!a ((this Ref)) Ref\n  (a (deref-Schedule this))\n)\n\n; --- getters for Schedule.b: ---\n\n(define-fun Schedule!b ((this Ref)) Ref\n  (b (deref-Schedule this))\n)\n\n; --- getters for Schedule.c: ---\n\n(define-fun Schedule!c ((this Ref)) Ref\n  (c (deref-Schedule this))\n)\n\n; --- getters for Schedule.d: ---\n\n(define-fun Schedule!d ((this Ref)) Ref\n  (d (deref-Schedule this))\n)\n\n; --- getters for Schedule.RESULT: ---\n\n(define-fun Schedule!RESULT ((this Ref)) Int\n  (RESULT (deref-Schedule this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------------------\n;   Methods for class TopLevelDeclarations:\n; -------------------------------------------\n\n(define-fun TopLevelDeclarations.CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations.ERROR this))\n)\n\n(define-fun TopLevelDeclarations!CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations!ERROR this))\n)\n\n; -------------------------------\n;   Methods for class Schedule:\n; -------------------------------\n\n(define-fun Schedule.before ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (< (Event.t2 e1) (Event.t1 e2))\n)\n\n(define-fun Schedule!before ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (< (Event.t2 e1) (Event.t1 e2))\n)\n\n(define-fun Schedule.meets ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (= (Event.t2 e1) (Event.t1 e2))\n)\n\n(define-fun Schedule!meets ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (= (Event.t2 e1) (Event.t1 e2))\n)\n\n(define-fun Schedule.contains ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (and (< (Event.t1 e1) (Event.t1 e2)) (< (Event.t2 e2) (Event.t2 e1)))\n)\n\n(define-fun Schedule!contains ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (and (< (Event.t1 e1) (Event.t1 e2)) (< (Event.t2 e2) (Event.t2 e1)))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (deref-isa-Schedule (TopLevelDeclarations!schedule this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert422))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (< (TopLevelDeclarations!ERROR this) 0)\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert423))\n\n\n\n; ------------------------------\n;   Invariant for class Event:\n; ------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Event Event)\n(declare-const const-2-Event Event)\n(declare-const const-3-Event Event)\n(declare-const const-4-Event Event)\n(declare-const const-5-Event Event)\n(declare-const const-6-Event Event)\n(declare-const const-7-Event Event)\n(declare-const const-8-Event Event)\n(declare-const const-9-Event Event)\n\n; --- Invariant 1: ---\n\n(define-fun Event.inv1 ((this Ref)) Bool\n  (= (Event!RESULT this) (TopLevelDeclarations!CHECK 0 (and (< (Event!t1 this) (Event!t2 this)) (< (- (Event!t2 this) (Event!t1 this)) 10))))\n)\n\n(assert (! (Event.inv1 1) :named _xkassert424))\n(assert (! (Event.inv1 2) :named _xkassert425))\n(assert (! (Event.inv1 3) :named _xkassert426))\n(assert (! (Event.inv1 4) :named _xkassert427))\n(assert (! (Event.inv1 5) :named _xkassert428))\n(assert (! (Event.inv1 6) :named _xkassert429))\n(assert (! (Event.inv1 7) :named _xkassert430))\n(assert (! (Event.inv1 8) :named _xkassert431))\n(assert (! (Event.inv1 9) :named _xkassert432))\n\n; --- Invariant 2: ---\n\n(define-fun Event.inv2 ((this Ref)) Bool\n  (< (Event!t1 this) (Event!t2 this))\n)\n\n(assert (! (Event.inv2 1) :named _xkassert433))\n(assert (! (Event.inv2 2) :named _xkassert434))\n(assert (! (Event.inv2 3) :named _xkassert435))\n(assert (! (Event.inv2 4) :named _xkassert436))\n(assert (! (Event.inv2 5) :named _xkassert437))\n(assert (! (Event.inv2 6) :named _xkassert438))\n(assert (! (Event.inv2 7) :named _xkassert439))\n(assert (! (Event.inv2 8) :named _xkassert440))\n(assert (! (Event.inv2 9) :named _xkassert441))\n\n; --- Invariant 3: ---\n\n(define-fun Event.inv3 ((this Ref)) Bool\n  (< (- (Event!t2 this) (Event!t1 this)) 10)\n)\n\n(assert (! (Event.inv3 1) :named _xkassert442))\n(assert (! (Event.inv3 2) :named _xkassert443))\n(assert (! (Event.inv3 3) :named _xkassert444))\n(assert (! (Event.inv3 4) :named _xkassert445))\n(assert (! (Event.inv3 5) :named _xkassert446))\n(assert (! (Event.inv3 6) :named _xkassert447))\n(assert (! (Event.inv3 7) :named _xkassert448))\n(assert (! (Event.inv3 8) :named _xkassert449))\n(assert (! (Event.inv3 9) :named _xkassert450))\n\n\n\n; ---------------------------------\n;   Invariant for class Schedule:\n; ---------------------------------\n\n; --- Constants: ---\n\n(declare-const const-10-Schedule Schedule)\n(declare-const const-11-Schedule Schedule)\n\n; --- Invariant 1: ---\n\n(define-fun Schedule.inv1 ((this Ref)) Bool\n  (= (Schedule!RESULT this) (TopLevelDeclarations!CHECK 0 (and (and (and (= (Event.t2 (Schedule!a this)) (Event.t1 (Schedule!b this))) (< (Event.t2 (Schedule!b this)) (Event.t1 (Schedule!c this)))) (<= (Event.t1 (Schedule!c this)) (Event.t1 (Schedule!d this)))) (<= (Event.t2 (Schedule!d this)) (Event.t2 (Schedule!c this))))))\n)\n\n(assert (! (Schedule.inv1 10) :named _xkassert451))\n(assert (! (Schedule.inv1 11) :named _xkassert452))\n\n; --- Invariant 2: ---\n\n(define-fun Schedule.inv2 ((this Ref)) Bool\n  (deref-isa-Event (Schedule!a this))\n)\n\n(assert (! (Schedule.inv2 10) :named _xkassert453))\n(assert (! (Schedule.inv2 11) :named _xkassert454))\n\n; --- Invariant 3: ---\n\n(define-fun Schedule.inv3 ((this Ref)) Bool\n  (deref-isa-Event (Schedule!b this))\n)\n\n(assert (! (Schedule.inv3 10) :named _xkassert455))\n(assert (! (Schedule.inv3 11) :named _xkassert456))\n\n; --- Invariant 4: ---\n\n(define-fun Schedule.inv4 ((this Ref)) Bool\n  (deref-isa-Event (Schedule!c this))\n)\n\n(assert (! (Schedule.inv4 10) :named _xkassert457))\n(assert (! (Schedule.inv4 11) :named _xkassert458))\n\n; --- Invariant 5: ---\n\n(define-fun Schedule.inv5 ((this Ref)) Bool\n  (deref-isa-Event (Schedule!d this))\n)\n\n(assert (! (Schedule.inv5 10) :named _xkassert459))\n(assert (! (Schedule.inv5 11) :named _xkassert460))\n\n; --- Invariant 6: ---\n\n(define-fun Schedule.inv6 ((this Ref)) Bool\n  (Schedule!meets this (Schedule!a this) (Schedule!b this))\n)\n\n(assert (! (Schedule.inv6 10) :named _xkassert461))\n(assert (! (Schedule.inv6 11) :named _xkassert462))\n\n; --- Invariant 7: ---\n\n(define-fun Schedule.inv7 ((this Ref)) Bool\n  (Schedule!before this (Schedule!b this) (Schedule!c this))\n)\n\n(assert (! (Schedule.inv7 10) :named _xkassert463))\n(assert (! (Schedule.inv7 11) :named _xkassert464))\n\n; --- Invariant 8: ---\n\n(define-fun Schedule.inv8 ((this Ref)) Bool\n  (Schedule!contains this (Schedule!c this) (Schedule!d this))\n)\n\n(assert (! (Schedule.inv8 10) :named _xkassert465))\n(assert (! (Schedule.inv8 11) :named _xkassert466))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-Event const-1-Event))\n        2 (lift-Event const-2-Event))\n        3 (lift-Event const-3-Event))\n        4 (lift-Event const-4-Event))\n        5 (lift-Event const-5-Event))\n        6 (lift-Event const-6-Event))\n        7 (lift-Event const-7-Event))\n        8 (lift-Event const-8-Event))\n        9 (lift-Event const-9-Event))\n        10 (lift-Schedule const-10-Schedule))\n        11 (lift-Schedule const-11-Schedule))\n  )\n)\n\n","smtModel":"(define-fun const-9-Event () Event\n  (mk-Event 576 585 42))\n(define-fun const-7-Event () Event\n  (mk-Event 590 591 42))\n(define-fun const-10-Schedule () Schedule\n  (mk-Schedule 9 5 3 7 42))\n(define-fun const-11-Schedule () Schedule\n  (mk-Schedule 2 9 1 7 42))\n(define-fun const-4-Event () Event\n  (mk-Event 590 597 42))\n(define-fun const-5-Event () Event\n  (mk-Event 585 587 42))\n(define-fun const-3-Event () Event\n  (mk-Event 588 596 42))\n(define-fun const-6-Event () Event\n  (mk-Event 583 592 42))\n(define-fun const-1-Event () Event\n  (mk-Event 586 595 42))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations (- 1) 10))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!12))\n(define-fun const-2-Event () Event\n  (mk-Event 575 576 42))\n(define-fun const-8-Event () Event\n  (mk-Event 581 584 42))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Event (mk-Event 575 576 42))\n  (ite (= x!1 3) (lift-Event (mk-Event 588 596 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 590 597 42))\n  (ite (= x!1 1) (lift-Event (mk-Event 586 595 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 5) (lift-Event (mk-Event 585 587 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 583 592 42))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event 588 596 42))\n  (ite (= x!1 2) (lift-Event (mk-Event 575 576 42))\n  (ite (= x!1 1) (lift-Event (mk-Event 586 595 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n    null)))))\n(define-fun k!12 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event 588 596 42))\n  (ite (= x!1 5) (lift-Event (mk-Event 585 587 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 590 597 42))\n  (ite (= x!1 11) (lift-Schedule (mk-Schedule 2 9 1 7 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 2) (lift-Event (mk-Event 575 576 42))\n  (ite (= x!1 8) (lift-Event (mk-Event 581 584 42))\n  (ite (= x!1 10) (lift-Schedule (mk-Schedule 9 5 3 7 42))\n  (ite (= x!1 1) (lift-Event (mk-Event 586 595 42))\n  (ite (= x!1 9) (lift-Event (mk-Event 576 585 42))\n  (ite (= x!1 7) (lift-Event (mk-Event 590 591 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 583 592 42))\n    null)))))))))))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n    null))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event 588 596 42))\n  (ite (= x!1 5) (lift-Event (mk-Event 585 587 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 583 592 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 8) (lift-Event (mk-Event 581 584 42))\n  (ite (= x!1 2) (lift-Event (mk-Event 575 576 42))\n  (ite (= x!1 1) (lift-Event (mk-Event 586 595 42))\n  (ite (= x!1 7) (lift-Event (mk-Event 590 591 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 590 597 42))\n    null))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event 585 587 42))\n  (ite (= x!1 2) (lift-Event (mk-Event 575 576 42))\n  (ite (= x!1 3) (lift-Event (mk-Event 588 596 42))\n  (ite (= x!1 1) (lift-Event (mk-Event 586 595 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 4) (lift-Event (mk-Event 590 597 42))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Event (mk-Event 575 576 42))\n  (ite (= x!1 1) (lift-Event (mk-Event 586 595 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n    null))))\n(define-fun k!11 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event 588 596 42))\n  (ite (= x!1 5) (lift-Event (mk-Event 585 587 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 583 592 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 2) (lift-Event (mk-Event 575 576 42))\n  (ite (= x!1 8) (lift-Event (mk-Event 581 584 42))\n  (ite (= x!1 10) (lift-Schedule (mk-Schedule 9 5 3 7 42))\n  (ite (= x!1 1) (lift-Event (mk-Event 586 595 42))\n  (ite (= x!1 9) (lift-Event (mk-Event 576 585 42))\n  (ite (= x!1 7) (lift-Event (mk-Event 590 591 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 590 597 42))\n    null))))))))))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event 588 596 42))\n  (ite (= x!1 5) (lift-Event (mk-Event 585 587 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 583 592 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 2) (lift-Event (mk-Event 575 576 42))\n  (ite (= x!1 1) (lift-Event (mk-Event 586 595 42))\n  (ite (= x!1 7) (lift-Event (mk-Event 590 591 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 590 597 42))\n    null)))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Event (mk-Event 575 576 42))\n  (ite (= x!1 3) (lift-Event (mk-Event 588 596 42))\n  (ite (= x!1 1) (lift-Event (mk-Event 586 595 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 4) (lift-Event (mk-Event 590 597 42))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Event (mk-Event 586 595 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n    null)))\n(define-fun k!10 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event 588 596 42))\n  (ite (= x!1 5) (lift-Event (mk-Event 585 587 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 583 592 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 2) (lift-Event (mk-Event 575 576 42))\n  (ite (= x!1 8) (lift-Event (mk-Event 581 584 42))\n  (ite (= x!1 1) (lift-Event (mk-Event 586 595 42))\n  (ite (= x!1 9) (lift-Event (mk-Event 576 585 42))\n  (ite (= x!1 7) (lift-Event (mk-Event 590 591 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 590 597 42))\n    null)))))))))))"},"testsmt8.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Person","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"age","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"getAge","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"type":"ElementValue","element":"age"}}],"spec":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"getAge"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},18]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Employee","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Person"],"type":"QualifiedName"}]},"name":"boss","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Employee"],"type":"QualifiedName"}]},"name":"officemate","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"ident":"avoid","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Employee"],"type":"QualifiedName"}]},"name":"p","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"officemate"},{"type":"ElementValue","element":"p"}]}}],"spec":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"boss"},"age"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},30]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"ThisLiteral","element":"ElementValue"}]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"officemate"},"officemate"]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"avoid"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"boss"}]}]}}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Person"],"type":"QualifiedName"}]}]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Person","members":[{"ty":{"type":"IntType"},"name":"age","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"getAge","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"ident":"age","type":"IdentExp"}}],"spec":[]},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":18,"type":"LiteralInteger"},"exp1":{"args":[],"exp1":{"ident":"getAge","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Employee","members":[{"ty":{"args":[],"ident":{"names":["Person"],"type":"QualifiedName"},"type":"IdentType"},"name":"boss","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Employee"],"type":"QualifiedName"},"type":"IdentType"},"name":"officemate","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"BoolType"},"ident":"avoid","typeParams":[],"type":"FunDecl","params":[{"ty":{"args":[],"ident":{"names":["Employee"],"type":"QualifiedName"},"type":"IdentType"},"name":"p","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"NotEQ","exp2":{"ident":"p","type":"IdentExp"},"exp1":{"ident":"officemate","type":"IdentExp"},"type":"BinExp"}}],"spec":[]},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":30,"type":"LiteralInteger"},"exp1":{"ident":"age","exp":{"ident":"boss","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"ident":"officemate","exp":{"ident":"officemate","type":"IdentExp"},"type":"DotExp"},"exp1":{"type":"ThisLiteral"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"ident":"boss","type":"IdentExp"}}],"exp1":{"ident":"avoid","type":"IdentExp"},"type":"FunApplExp"}}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["Person"],"type":"QualifiedName"},"type":"IdentType"}]}],"type":"Model"},"typeChecks":true,"name":"testsmt8.k","model":"\nclass Person {\n  age:Int\n\n  fun getAge : Int\n  {\n    age\n  }\n\n  req getAge() > 18\n}\n\nclass Employee extending Person {\n  boss:Person\n  officemate:Employee\n\n  fun avoid(p:Employee) : Bool\n  {\n    officemate != p\n  }\n\n  req boss.age > 30\n\n  req this = officemate.officemate\n\n  req avoid(boss)\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((Person (mk-Person (age Int)))))\n(declare-datatypes () ((Employee (mk-Employee (age Int)(boss Ref)(officemate Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Person (sel-Person Person))\n  (lift-Employee (sel-Employee Employee))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Person ((this Ref)) Bool\n  (is-lift-Person (deref this))\n)\n\n(define-fun deref-Person ((this Ref)) Person\n  (sel-Person (deref this))\n)\n\n(define-fun deref-is-Employee ((this Ref)) Bool\n  (is-lift-Employee (deref this))\n)\n\n(define-fun deref-Employee ((this Ref)) Employee\n  (sel-Employee (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Person ((this Ref)) Bool\n  (or\n    (deref-is-Person this)\n    (deref-is-Employee this)\n  )\n)\n\n(define-fun deref-isa-Employee ((this Ref)) Bool\n  (deref-is-Employee this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -----------------------------\n;   Getters for class Person:\n; -----------------------------\n\n; --- getters for Person.age: ---\n\n(define-fun Person.age ((this Ref)) Int\n  (ite (deref-is-Person this) (age (deref-Person this))\n  (age (deref-Employee this)))\n)\n\n(define-fun Person!age ((this Ref)) Int\n  (age (deref-Person this))\n)\n\n; -------------------------------\n;   Getters for class Employee:\n; -------------------------------\n\n; --- getters for Employee.age: ---\n\n(define-fun Employee.age ((this Ref)) Int\n  (age (deref-Employee this))\n)\n\n(define-fun Employee!age ((this Ref)) Int\n  (age (deref-Employee this))\n)\n\n; --- getters for Employee.boss: ---\n\n(define-fun Employee!boss ((this Ref)) Ref\n  (boss (deref-Employee this))\n)\n\n; --- getters for Employee.officemate: ---\n\n(define-fun Employee.officemate ((this Ref)) Ref\n  (officemate (deref-Employee this))\n)\n\n(define-fun Employee!officemate ((this Ref)) Ref\n  (officemate (deref-Employee this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -----------------------------\n;   Methods for class Person:\n; -----------------------------\n\n(define-fun Person.getAge ((this Ref)) Int\n  (Person.age this)\n)\n\n(define-fun Person!getAge ((this Ref)) Int\n  (Person!age this)\n)\n\n; -------------------------------\n;   Methods for class Employee:\n; -------------------------------\n\n(define-fun Employee.getAge ((this Ref)) Int\n  (Employee.age this)\n)\n\n(define-fun Employee!getAge ((this Ref)) Int\n  (Employee!age this)\n)\n\n(define-fun Employee.avoid ((this Ref)(p Ref)) Bool\n  (not (= (Employee.officemate this) p))\n)\n\n(define-fun Employee!avoid ((this Ref)(p Ref)) Bool\n  (not (= (Employee!officemate this) p))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; -------------------------------\n;   Invariant for class Person:\n; -------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Person Person)\n(declare-const const-2-Person Person)\n\n; --- Invariant 1: ---\n\n(define-fun Person.inv1 ((this Ref)) Bool\n  (> (Person!getAge this ) 18)\n)\n\n(assert (! (Person.inv1 1) :named _xkassert565))\n(assert (! (Person.inv1 2) :named _xkassert566))\n\n\n\n; ---------------------------------\n;   Invariant for class Employee:\n; ---------------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-Employee Employee)\n(declare-const const-4-Employee Employee)\n\n; --- Invariant 1: ---\n\n(define-fun Employee.inv1 ((this Ref)) Bool\n  (deref-isa-Person (Employee!boss this))\n)\n\n(assert (! (Employee.inv1 3) :named _xkassert567))\n(assert (! (Employee.inv1 4) :named _xkassert568))\n\n; --- Invariant 2: ---\n\n(define-fun Employee.inv2 ((this Ref)) Bool\n  (deref-isa-Employee (Employee!officemate this))\n)\n\n(assert (! (Employee.inv2 3) :named _xkassert569))\n(assert (! (Employee.inv2 4) :named _xkassert570))\n\n; --- Invariant 3: ---\n\n(define-fun Employee.inv3 ((this Ref)) Bool\n  (> (Employee!getAge this ) 18)\n)\n\n(assert (! (Employee.inv3 3) :named _xkassert571))\n(assert (! (Employee.inv3 4) :named _xkassert572))\n\n; --- Invariant 4: ---\n\n(define-fun Employee.inv4 ((this Ref)) Bool\n  (> (Person.age (Employee!boss this)) 30)\n)\n\n(assert (! (Employee.inv4 3) :named _xkassert573))\n(assert (! (Employee.inv4 4) :named _xkassert574))\n\n; --- Invariant 5: ---\n\n(define-fun Employee.inv5 ((this Ref)) Bool\n  (= this (Employee.officemate (Employee!officemate this)))\n)\n\n(assert (! (Employee.inv5 3) :named _xkassert575))\n(assert (! (Employee.inv5 4) :named _xkassert576))\n\n; --- Invariant 6: ---\n\n(define-fun Employee.inv6 ((this Ref)) Bool\n  (Employee!avoid this (Employee!boss this))\n)\n\n(assert (! (Employee.inv6 3) :named _xkassert577))\n(assert (! (Employee.inv6 4) :named _xkassert578))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-Person const-1-Person))\n        2 (lift-Person const-2-Person))\n        3 (lift-Employee const-3-Employee))\n        4 (lift-Employee const-4-Employee))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-4-Employee () Employee\n  (mk-Employee 7738 1 3))\n(define-fun const-1-Person () Person\n  (mk-Person 31))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!5))\n(define-fun const-3-Employee () Employee\n  (mk-Employee 19 2 4))\n(define-fun const-2-Person () Person\n  (mk-Person 1267))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Person (mk-Person 1267))\n  (ite (= x!1 1) (lift-Person (mk-Person 31))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Employee (mk-Employee 19 2 4))\n  (ite (= x!1 2) (lift-Person (mk-Person 1267))\n  (ite (= x!1 1) (lift-Person (mk-Person 31))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Employee (mk-Employee 19 2 4))\n  (ite (= x!1 2) (lift-Person (mk-Person 1267))\n  (ite (= x!1 1) (lift-Person (mk-Person 31))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 4) (lift-Employee (mk-Employee 7738 1 3))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Person (mk-Person 31))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"inheritance8.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"a","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"b","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"c","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]},"name":"bb","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"d","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"E","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"e","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["D"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"F","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"f","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["C"],"type":"QualifiedName"}]},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["E"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"G","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["E"],"type":"QualifiedName"}]},"name":"ee","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"g","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["E"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"H","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"h","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"tsum","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"a"},{"type":"ElementValue","element":"b"}]},{"type":"ElementValue","element":"c"}]},{"type":"ElementValue","element":"d"}]},{"type":"ElementValue","element":"e"}]},{"type":"ElementValue","element":"f"}]},{"type":"ElementValue","element":"g"}]},{"type":"ElementValue","element":"h"}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["F"],"type":"QualifiedName"}]},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["G"],"type":"QualifiedName"}]}]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["H"],"type":"QualifiedName"}]},"assignment":false,"name":"h","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"H"},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"a",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"b",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"c",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"d",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},4]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"e",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},5]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"f",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},6]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"g",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},7]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"h",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},8]}]}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT_36","expr":{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"h"},"tsum"]},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"a","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"name":"b","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"IntType"},"name":"c","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"},"name":"bb","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"d","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"E","members":[{"ty":{"type":"IntType"},"name":"e","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["D"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"F","members":[{"ty":{"type":"IntType"},"name":"f","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["C"],"type":"QualifiedName"},"type":"IdentType"},{"args":[],"ident":{"names":["E"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"G","members":[{"ty":{"args":[],"ident":{"names":["E"],"type":"QualifiedName"},"type":"IdentType"},"name":"ee","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"g","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["E"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"H","members":[{"ty":{"type":"IntType"},"name":"h","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"tsum","expr":{"op":"Plus","exp2":{"ident":"h","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"g","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"f","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"e","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"d","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"c","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["F"],"type":"QualifiedName"},"type":"IdentType"},{"args":[],"ident":{"names":["G"],"type":"QualifiedName"},"type":"IdentType"}]},{"ty":{"args":[],"ident":{"names":["H"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"h","expr":{"args":[{"ident":"a","type":"NamedArgument","exp":{"i":1,"type":"LiteralInteger"}},{"ident":"b","type":"NamedArgument","exp":{"i":2,"type":"LiteralInteger"}},{"ident":"c","type":"NamedArgument","exp":{"i":3,"type":"LiteralInteger"}},{"ident":"d","type":"NamedArgument","exp":{"i":4,"type":"LiteralInteger"}},{"ident":"e","type":"NamedArgument","exp":{"i":5,"type":"LiteralInteger"}},{"ident":"f","type":"NamedArgument","exp":{"i":6,"type":"LiteralInteger"}},{"ident":"g","type":"NamedArgument","exp":{"i":7,"type":"LiteralInteger"}},{"ident":"h","type":"NamedArgument","exp":{"i":8,"type":"LiteralInteger"}}],"exp1":{"ident":"H","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT_36","expr":{"ident":"tsum","exp":{"ident":"h","type":"IdentExp"},"type":"DotExp"},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"inheritance8.k","model":"\nclass A {\n  a:Int\n}\n\nclass B {\n  b:Int\n}\n\nclass C extending A,B {\n  c:Int\n}\n\nclass D {\n  bb:B\n  d:Int\n}\n\nclass E extending D {\n  e:Int\n}\n\nclass F extending C,E {\n  f:Int\n}\n\nclass G extending E {\n  ee:E\n  g:Int\n}\n\nclass H extending F,G {\n  h:Int\n  tsum:Int = a + b + c + d + e + f + g + h\n}\n\nh:H = H(a :: 1,b :: 2,c :: 3,d :: 4,e :: 5,f :: 6,g :: 7,h :: 8)\n\nRESULT_36:Int = h.tsum\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (h Ref)(RESULT_36 Int)))))\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (b Int)))))\n(declare-datatypes () ((D (mk-D (bb Ref)(d Int)))))\n(declare-datatypes () ((E (mk-E (bb Ref)(d Int)(e Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)))))\n(declare-datatypes () ((G (mk-G (bb Ref)(d Int)(e Int)(ee Ref)(g Int)))))\n(declare-datatypes () ((F (mk-F (a Int)(b Int)(c Int)(bb Ref)(d Int)(e Int)(f Int)))))\n(declare-datatypes () ((H (mk-H (a Int)(b Int)(c Int)(bb Ref)(d Int)(e Int)(f Int)(ee Ref)(g Int)(h Int)(tsum Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-D (sel-D D))\n  (lift-E (sel-E E))\n  (lift-C (sel-C C))\n  (lift-G (sel-G G))\n  (lift-F (sel-F F))\n  (lift-H (sel-H H))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-E ((this Ref)) Bool\n  (is-lift-E (deref this))\n)\n\n(define-fun deref-E ((this Ref)) E\n  (sel-E (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-G ((this Ref)) Bool\n  (is-lift-G (deref this))\n)\n\n(define-fun deref-G ((this Ref)) G\n  (sel-G (deref this))\n)\n\n(define-fun deref-is-F ((this Ref)) Bool\n  (is-lift-F (deref this))\n)\n\n(define-fun deref-F ((this Ref)) F\n  (sel-F (deref this))\n)\n\n(define-fun deref-is-H ((this Ref)) Bool\n  (is-lift-H (deref this))\n)\n\n(define-fun deref-H ((this Ref)) H\n  (sel-H (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-C this)\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (or\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-E ((this Ref)) Bool\n  (or\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-G ((this Ref)) Bool\n  (or\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-F ((this Ref)) Bool\n  (or\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-H ((this Ref)) Bool\n  (deref-is-H this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.h: ---\n\n(define-fun TopLevelDeclarations!h ((this Ref)) Ref\n  (h (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.RESULT_36: ---\n\n(define-fun TopLevelDeclarations!RESULT_36 ((this Ref)) Int\n  (RESULT_36 (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.b: ---\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.bb: ---\n\n(define-fun D!bb ((this Ref)) Ref\n  (bb (deref-D this))\n)\n\n; --- getters for D.d: ---\n\n(define-fun D.d ((this Ref)) Int\n  (ite (deref-is-D this) (d (deref-D this))\n  (ite (deref-is-E this) (d (deref-E this))\n  (ite (deref-is-F this) (d (deref-F this))\n  (ite (deref-is-G this) (d (deref-G this))\n  (d (deref-H this))))))\n)\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; ------------------------\n;   Getters for class E:\n; ------------------------\n\n; --- getters for E.bb: ---\n\n(define-fun E!bb ((this Ref)) Ref\n  (bb (deref-E this))\n)\n\n; --- getters for E.d: ---\n\n(define-fun E!d ((this Ref)) Int\n  (d (deref-E this))\n)\n\n; --- getters for E.e: ---\n\n(define-fun E!e ((this Ref)) Int\n  (e (deref-E this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.a: ---\n\n(define-fun C.a ((this Ref)) Int\n  (ite (deref-is-C this) (a (deref-C this))\n  (ite (deref-is-F this) (a (deref-F this))\n  (a (deref-H this))))\n)\n\n(define-fun C!a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n; --- getters for C.b: ---\n\n(define-fun C.b ((this Ref)) Int\n  (ite (deref-is-C this) (b (deref-C this))\n  (ite (deref-is-F this) (b (deref-F this))\n  (b (deref-H this))))\n)\n\n(define-fun C!b ((this Ref)) Int\n  (b (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C.c ((this Ref)) Int\n  (ite (deref-is-C this) (c (deref-C this))\n  (ite (deref-is-F this) (c (deref-F this))\n  (c (deref-H this))))\n)\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; ------------------------\n;   Getters for class G:\n; ------------------------\n\n; --- getters for G.bb: ---\n\n(define-fun G!bb ((this Ref)) Ref\n  (bb (deref-G this))\n)\n\n; --- getters for G.d: ---\n\n(define-fun G!d ((this Ref)) Int\n  (d (deref-G this))\n)\n\n; --- getters for G.e: ---\n\n(define-fun G!e ((this Ref)) Int\n  (e (deref-G this))\n)\n\n; --- getters for G.ee: ---\n\n(define-fun G!ee ((this Ref)) Ref\n  (ee (deref-G this))\n)\n\n; --- getters for G.g: ---\n\n(define-fun G!g ((this Ref)) Int\n  (g (deref-G this))\n)\n\n; ------------------------\n;   Getters for class F:\n; ------------------------\n\n; --- getters for F.a: ---\n\n(define-fun F!a ((this Ref)) Int\n  (a (deref-F this))\n)\n\n; --- getters for F.b: ---\n\n(define-fun F!b ((this Ref)) Int\n  (b (deref-F this))\n)\n\n; --- getters for F.c: ---\n\n(define-fun F!c ((this Ref)) Int\n  (c (deref-F this))\n)\n\n; --- getters for F.bb: ---\n\n(define-fun F!bb ((this Ref)) Ref\n  (bb (deref-F this))\n)\n\n; --- getters for F.d: ---\n\n(define-fun F!d ((this Ref)) Int\n  (d (deref-F this))\n)\n\n; --- getters for F.e: ---\n\n(define-fun F!e ((this Ref)) Int\n  (e (deref-F this))\n)\n\n; --- getters for F.f: ---\n\n(define-fun F!f ((this Ref)) Int\n  (f (deref-F this))\n)\n\n; ------------------------\n;   Getters for class H:\n; ------------------------\n\n; --- getters for H.a: ---\n\n(define-fun H.a ((this Ref)) Int\n  (a (deref-H this))\n)\n\n(define-fun H!a ((this Ref)) Int\n  (a (deref-H this))\n)\n\n; --- getters for H.b: ---\n\n(define-fun H.b ((this Ref)) Int\n  (b (deref-H this))\n)\n\n(define-fun H!b ((this Ref)) Int\n  (b (deref-H this))\n)\n\n; --- getters for H.c: ---\n\n(define-fun H.c ((this Ref)) Int\n  (c (deref-H this))\n)\n\n(define-fun H!c ((this Ref)) Int\n  (c (deref-H this))\n)\n\n; --- getters for H.bb: ---\n\n(define-fun H!bb ((this Ref)) Ref\n  (bb (deref-H this))\n)\n\n; --- getters for H.d: ---\n\n(define-fun H.d ((this Ref)) Int\n  (d (deref-H this))\n)\n\n(define-fun H!d ((this Ref)) Int\n  (d (deref-H this))\n)\n\n; --- getters for H.e: ---\n\n(define-fun H.e ((this Ref)) Int\n  (e (deref-H this))\n)\n\n(define-fun H!e ((this Ref)) Int\n  (e (deref-H this))\n)\n\n; --- getters for H.f: ---\n\n(define-fun H.f ((this Ref)) Int\n  (f (deref-H this))\n)\n\n(define-fun H!f ((this Ref)) Int\n  (f (deref-H this))\n)\n\n; --- getters for H.ee: ---\n\n(define-fun H!ee ((this Ref)) Ref\n  (ee (deref-H this))\n)\n\n; --- getters for H.g: ---\n\n(define-fun H.g ((this Ref)) Int\n  (g (deref-H this))\n)\n\n(define-fun H!g ((this Ref)) Int\n  (g (deref-H this))\n)\n\n; --- getters for H.h: ---\n\n(define-fun H!h ((this Ref)) Int\n  (h (deref-H this))\n)\n\n; --- getters for H.tsum: ---\n\n(define-fun H.tsum ((this Ref)) Int\n  (tsum (deref-H this))\n)\n\n(define-fun H!tsum ((this Ref)) Int\n  (tsum (deref-H this))\n)\n\n; ========================================\n; === Constructor parameter constants: ===\n; ========================================\n\n(declare-const const__1 Ref)\n(declare-const const__2 Ref)\n(declare-const const__3 Int)\n\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (deref (TopLevelDeclarations!h this)) (lift-H (mk-H 1 2 3 const__1 4 5 6 const__2 7 8 const__3)))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert143))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (= (TopLevelDeclarations!RESULT_36 this) (H.tsum (TopLevelDeclarations!h this)))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert144))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (deref-isa-H (TopLevelDeclarations!h this))\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert145))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-A A)\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-6-B B)\n(declare-const const-7-B B)\n\n\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-11-D D)\n\n; --- Invariant 1: ---\n\n(define-fun D.inv1 ((this Ref)) Bool\n  (deref-isa-B (D!bb this))\n)\n\n(assert (! (D.inv1 11) :named _xkassert146))\n\n\n\n; --------------------------\n;   Invariant for class E:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-E E)\n(declare-const const-2-E E)\n\n; --- Invariant 1: ---\n\n(define-fun E.inv1 ((this Ref)) Bool\n  (deref-isa-B (E!bb this))\n)\n\n(assert (! (E.inv1 1) :named _xkassert147))\n(assert (! (E.inv1 2) :named _xkassert148))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-8-C C)\n\n\n\n; --------------------------\n;   Invariant for class G:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-5-G G)\n\n; --- Invariant 1: ---\n\n(define-fun G.inv1 ((this Ref)) Bool\n  (deref-isa-B (G!bb this))\n)\n\n(assert (! (G.inv1 5) :named _xkassert149))\n\n; --- Invariant 2: ---\n\n(define-fun G.inv2 ((this Ref)) Bool\n  (deref-isa-E (G!ee this))\n)\n\n(assert (! (G.inv2 5) :named _xkassert150))\n\n\n\n; --------------------------\n;   Invariant for class F:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-F F)\n\n; --- Invariant 1: ---\n\n(define-fun F.inv1 ((this Ref)) Bool\n  (deref-isa-B (F!bb this))\n)\n\n(assert (! (F.inv1 3) :named _xkassert151))\n\n\n\n; --------------------------\n;   Invariant for class H:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-9-H H)\n(declare-const const-10-H H)\n\n; --- Invariant 1: ---\n\n(define-fun H.inv1 ((this Ref)) Bool\n  (= (H!tsum this) (+ (+ (+ (+ (+ (+ (+ (H!a this) (H!b this)) (H!c this)) (H!d this)) (H!e this)) (H!f this)) (H!g this)) (H!h this)))\n)\n\n(assert (! (H.inv1 9) :named _xkassert152))\n(assert (! (H.inv1 10) :named _xkassert153))\n\n; --- Invariant 2: ---\n\n(define-fun H.inv2 ((this Ref)) Bool\n  (deref-isa-B (H!bb this))\n)\n\n(assert (! (H.inv2 9) :named _xkassert154))\n(assert (! (H.inv2 10) :named _xkassert155))\n\n; --- Invariant 3: ---\n\n(define-fun H.inv3 ((this Ref)) Bool\n  (deref-isa-E (H!ee this))\n)\n\n(assert (! (H.inv3 9) :named _xkassert156))\n(assert (! (H.inv3 10) :named _xkassert157))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        4 (lift-A const-4-A))\n        6 (lift-B const-6-B))\n        7 (lift-B const-7-B))\n        11 (lift-D const-11-D))\n        1 (lift-E const-1-E))\n        2 (lift-E const-2-E))\n        8 (lift-C const-8-C))\n        5 (lift-G const-5-G))\n        3 (lift-F const-3-F))\n        9 (lift-H const-9-H))\n        10 (lift-H const-10-H))\n  )\n)\n\n","smtModel":"(define-fun const__3 () Int\n  36)\n(define-fun const-1-E () E\n  (mk-E 7 30 31))\n(define-fun const-7-B () B\n  (mk-B 48))\n(define-fun const-3-F () F\n  (mk-F 41 42 43 6 44 45 46))\n(define-fun const-8-C () C\n  (mk-C 34 35 37))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 9 36))\n(define-fun const-11-D () D\n  (mk-D 7 29))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!12))\n(define-fun const__2 () Int\n  1)\n(define-fun const-9-H () H\n  (mk-H 1 2 3 6 4 5 6 1 7 8 36))\n(define-fun const-6-B () B\n  (mk-B 47))\n(define-fun const-10-H () H\n  (mk-H 7719 1236 2437 7 8855 1796 8365 1 2282 449 33139))\n(define-fun const-4-A () A\n  (mk-A 28))\n(define-fun const-5-G () G\n  (mk-G 6 38 39 1 40))\n(define-fun const-2-E () E\n  (mk-E 6 32 33))\n(define-fun const__1 () Int\n  6)\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-E (mk-E 6 32 33))\n  (ite (= x!1 4) (lift-A (mk-A 28))\n  (ite (= x!1 11) (lift-D (mk-D 7 29))\n  (ite (= x!1 1) (lift-E (mk-E 7 30 31))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n  (ite (= x!1 7) (lift-B (mk-B 48))\n  (ite (= x!1 6) (lift-B (mk-B 47))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 4) (lift-A (mk-A 28))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n  (ite (= x!1 7) (lift-B (mk-B 48))\n  (ite (= x!1 6) (lift-B (mk-B 47))\n    null)))))\n(define-fun k!12 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-G (mk-G 6 38 39 1 40))\n  (ite (= x!1 3) (lift-F (mk-F 41 42 43 6 44 45 46))\n  (ite (= x!1 11) (lift-D (mk-D 7 29))\n  (ite (= x!1 4) (lift-A (mk-A 28))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n  (ite (= x!1 2) (lift-E (mk-E 6 32 33))\n  (ite (= x!1 8) (lift-C (mk-C 34 35 37))\n  (ite (= x!1 10)\n    (lift-H (mk-H 7719 1236 2437 7 8855 1796 8365 1 2282 449 33139))\n  (ite (= x!1 1) (lift-E (mk-E 7 30 31))\n  (ite (= x!1 9) (lift-H (mk-H 1 2 3 6 4 5 6 1 7 8 36))\n  (ite (= x!1 7) (lift-B (mk-B 48))\n  (ite (= x!1 6) (lift-B (mk-B 47))\n    null)))))))))))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n    null))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-G (mk-G 6 38 39 1 40))\n  (ite (= x!1 4) (lift-A (mk-A 28))\n  (ite (= x!1 11) (lift-D (mk-D 7 29))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n  (ite (= x!1 2) (lift-E (mk-E 6 32 33))\n  (ite (= x!1 8) (lift-C (mk-C 34 35 37))\n  (ite (= x!1 1) (lift-E (mk-E 7 30 31))\n  (ite (= x!1 7) (lift-B (mk-B 48))\n  (ite (= x!1 6) (lift-B (mk-B 47))\n    null))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 4) (lift-A (mk-A 28))\n  (ite (= x!1 11) (lift-D (mk-D 7 29))\n  (ite (= x!1 1) (lift-E (mk-E 7 30 31))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n  (ite (= x!1 7) (lift-B (mk-B 48))\n  (ite (= x!1 6) (lift-B (mk-B 47))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 4) (lift-A (mk-A 28))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n  (ite (= x!1 6) (lift-B (mk-B 47))\n    null))))\n(define-fun k!11 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-G (mk-G 6 38 39 1 40))\n  (ite (= x!1 3) (lift-F (mk-F 41 42 43 6 44 45 46))\n  (ite (= x!1 11) (lift-D (mk-D 7 29))\n  (ite (= x!1 4) (lift-A (mk-A 28))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n  (ite (= x!1 2) (lift-E (mk-E 6 32 33))\n  (ite (= x!1 8) (lift-C (mk-C 34 35 37))\n  (ite (= x!1 1) (lift-E (mk-E 7 30 31))\n  (ite (= x!1 9) (lift-H (mk-H 1 2 3 6 4 5 6 1 7 8 36))\n  (ite (= x!1 7) (lift-B (mk-B 48))\n  (ite (= x!1 6) (lift-B (mk-B 47))\n    null))))))))))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 4) (lift-A (mk-A 28))\n  (ite (= x!1 11) (lift-D (mk-D 7 29))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n  (ite (= x!1 8) (lift-C (mk-C 34 35 37))\n  (ite (= x!1 2) (lift-E (mk-E 6 32 33))\n  (ite (= x!1 1) (lift-E (mk-E 7 30 31))\n  (ite (= x!1 7) (lift-B (mk-B 48))\n  (ite (= x!1 6) (lift-B (mk-B 47))\n    null)))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 4) (lift-A (mk-A 28))\n  (ite (= x!1 11) (lift-D (mk-D 7 29))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n  (ite (= x!1 7) (lift-B (mk-B 48))\n  (ite (= x!1 6) (lift-B (mk-B 47))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n  (ite (= x!1 4) (lift-A (mk-A 28))\n    null)))\n(define-fun k!10 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-F (mk-F 41 42 43 6 44 45 46))\n  (ite (= x!1 5) (lift-G (mk-G 6 38 39 1 40))\n  (ite (= x!1 11) (lift-D (mk-D 7 29))\n  (ite (= x!1 4) (lift-A (mk-A 28))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 9 36))\n  (ite (= x!1 2) (lift-E (mk-E 6 32 33))\n  (ite (= x!1 8) (lift-C (mk-C 34 35 37))\n  (ite (= x!1 1) (lift-E (mk-E 7 30 31))\n  (ite (= x!1 7) (lift-B (mk-B 48))\n  (ite (= x!1 6) (lift-B (mk-B 47))\n    null)))))))))))"},"testsmt12.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"id","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]},{"type":"Expression","operand":[{"type":"BlockExp","element":"ElementValue"},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Minus",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"k"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}}]},{"type":"Expression","operand":[{"type":"BlockExp","element":"ElementValue"},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Minus",{"type":"ElementValue","element":"k"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}}]}]}}],"spec":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT_7","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"id"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},7]}]}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT_m3","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"id"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"UnaryExp","element":"ElementValue"},"Neg",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]}]}]}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT_4","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"RESULT_7"},{"type":"ElementValue","element":"RESULT_m3"}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"ident":"id","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"trueBranch":{"type":"BlockExp","body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k","expr":{"op":"Minus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"k","type":"IdentExp"},"type":"BinExp"}}]},"falseBranch":{"type":"BlockExp","body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k","expr":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"op":"Minus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"k","type":"IdentExp"},"type":"BinExp"}}]},"type":"IfExp","cond":{"op":"GTE","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}}}],"spec":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT_7","expr":{"args":[{"type":"PositionalArgument","exp":{"i":7,"type":"LiteralInteger"}}],"exp1":{"ident":"id","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT_m3","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"Neg","exp":{"i":3,"type":"LiteralInteger"},"type":"UnaryExp"}}],"exp1":{"ident":"id","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT_4","expr":{"op":"Plus","exp2":{"ident":"RESULT_m3","type":"IdentExp"},"exp1":{"ident":"RESULT_7","type":"IdentExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt12.k","model":"\nclass A {\n\n  fun id(x:Int) : Int\n  {\n    if x >= 0 then\n      {\n        k:Int = x - 1\n        k + 1\n      }\n    else\n      {\n        k:Int = x + 1\n        k - 1\n      }\n  }\n  RESULT_7:Int = id(7)\n  RESULT_m3:Int = id(-3)\n  RESULT_4:Int = RESULT_7 + RESULT_m3\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (RESULT_7 Int)(RESULT_m3 Int)(RESULT_4 Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.RESULT_7: ---\n\n(define-fun A!RESULT_7 ((this Ref)) Int\n  (RESULT_7 (deref-A this))\n)\n\n; --- getters for A.RESULT_m3: ---\n\n(define-fun A!RESULT_m3 ((this Ref)) Int\n  (RESULT_m3 (deref-A this))\n)\n\n; --- getters for A.RESULT_4: ---\n\n(define-fun A!RESULT_4 ((this Ref)) Int\n  (RESULT_4 (deref-A this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.id ((this Ref)(x Int)) Int\n  (ite (>= x 0)   (let ((k (- x 1)))\n    (+ k 1))   (let ((k (+ x 1)))\n    (- k 1)))\n)\n\n(define-fun A!id ((this Ref)(x Int)) Int\n  (ite (>= x 0)   (let ((k (- x 1)))\n    (+ k 1))   (let ((k (+ x 1)))\n    (- k 1)))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!RESULT_7 this) (A!id this 7))\n)\n\n(assert (! (A.inv1 1) :named _xkassert285))\n\n; --- Invariant 2: ---\n\n(define-fun A.inv2 ((this Ref)) Bool\n  (= (A!RESULT_m3 this) (A!id this (- 3)))\n)\n\n(assert (! (A.inv2 1) :named _xkassert286))\n\n; --- Invariant 3: ---\n\n(define-fun A.inv3 ((this Ref)) Bool\n  (= (A!RESULT_4 this) (+ (A!RESULT_7 this) (A!RESULT_m3 this)))\n)\n\n(assert (! (A.inv3 1) :named _xkassert287))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-1-A () A\n  (mk-A 7 (- 3) 4))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!2))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 7 (- 3) 4))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"inheritance6.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Person","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Person"],"type":"QualifiedName"}]},"name":"father","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Person"],"type":"QualifiedName"}]},"name":"child","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"father"},"child"]},{"type":"Expression","operand":[{"type":"ThisLiteral","element":"ElementValue"}]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Person"],"type":"QualifiedName"}]},"name":"p1","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Person"],"type":"QualifiedName"}]},"name":"p2","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"p1"},{"type":"ElementValue","element":"p2"}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"p2"},"father"]},{"type":"ElementValue","element":"p1"}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"p1"},"child"]},{"type":"ElementValue","element":"p2"}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"p1"},"father"]},{"type":"ElementValue","element":"p2"}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"p2"},"child"]},{"type":"ElementValue","element":"p1"}]}}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Person","members":[{"ty":{"args":[],"ident":{"names":["Person"],"type":"QualifiedName"},"type":"IdentType"},"name":"father","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Person"],"type":"QualifiedName"},"type":"IdentType"},"name":"child","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"type":"ThisLiteral"},"exp1":{"ident":"child","exp":{"ident":"father","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["Person"],"type":"QualifiedName"},"type":"IdentType"},"name":"p1","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Person"],"type":"QualifiedName"},"type":"IdentType"},"name":"p2","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"NotEQ","exp2":{"ident":"p2","type":"IdentExp"},"exp1":{"ident":"p1","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"ident":"p1","type":"IdentExp"},"exp1":{"ident":"father","exp":{"ident":"p2","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"ident":"p2","type":"IdentExp"},"exp1":{"ident":"child","exp":{"ident":"p1","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"ident":"p2","type":"IdentExp"},"exp1":{"ident":"father","exp":{"ident":"p1","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"ident":"p1","type":"IdentExp"},"exp1":{"ident":"child","exp":{"ident":"p2","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}}],"type":"Model"},"typeChecks":true,"name":"inheritance6.k","model":"\nclass Person {\n  father:Person\n  child:Person\n\n  req father.child = this\n}\n\np1:Person\n\np2:Person\n\nreq p1 != p2\n\nreq p2.father = p1\n\nreq p1.child = p2\n\nreq p1.father = p2\n\nreq p2.child = p1\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (p1 Ref)(p2 Ref)))))\n(declare-datatypes () ((Person (mk-Person (father Ref)(child Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Person (sel-Person Person))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Person ((this Ref)) Bool\n  (is-lift-Person (deref this))\n)\n\n(define-fun deref-Person ((this Ref)) Person\n  (sel-Person (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Person ((this Ref)) Bool\n  (deref-is-Person this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.p1: ---\n\n(define-fun TopLevelDeclarations!p1 ((this Ref)) Ref\n  (p1 (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.p2: ---\n\n(define-fun TopLevelDeclarations!p2 ((this Ref)) Ref\n  (p2 (deref-TopLevelDeclarations this))\n)\n\n; -----------------------------\n;   Getters for class Person:\n; -----------------------------\n\n; --- getters for Person.father: ---\n\n(define-fun Person.father ((this Ref)) Ref\n  (father (deref-Person this))\n)\n\n(define-fun Person!father ((this Ref)) Ref\n  (father (deref-Person this))\n)\n\n; --- getters for Person.child: ---\n\n(define-fun Person.child ((this Ref)) Ref\n  (child (deref-Person this))\n)\n\n(define-fun Person!child ((this Ref)) Ref\n  (child (deref-Person this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (deref-isa-Person (TopLevelDeclarations!p1 this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert73))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-Person (TopLevelDeclarations!p2 this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert74))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (not (= (TopLevelDeclarations!p1 this) (TopLevelDeclarations!p2 this)))\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert75))\n\n; --- Invariant 4: ---\n\n(define-fun TopLevelDeclarations.inv4 ((this Ref)) Bool\n  (= (Person.father (TopLevelDeclarations!p2 this)) (TopLevelDeclarations!p1 this))\n)\n\n(assert (! (TopLevelDeclarations.inv4 0) :named _xkassert76))\n\n; --- Invariant 5: ---\n\n(define-fun TopLevelDeclarations.inv5 ((this Ref)) Bool\n  (= (Person.child (TopLevelDeclarations!p1 this)) (TopLevelDeclarations!p2 this))\n)\n\n(assert (! (TopLevelDeclarations.inv5 0) :named _xkassert77))\n\n; --- Invariant 6: ---\n\n(define-fun TopLevelDeclarations.inv6 ((this Ref)) Bool\n  (= (Person.father (TopLevelDeclarations!p1 this)) (TopLevelDeclarations!p2 this))\n)\n\n(assert (! (TopLevelDeclarations.inv6 0) :named _xkassert78))\n\n; --- Invariant 7: ---\n\n(define-fun TopLevelDeclarations.inv7 ((this Ref)) Bool\n  (= (Person.child (TopLevelDeclarations!p2 this)) (TopLevelDeclarations!p1 this))\n)\n\n(assert (! (TopLevelDeclarations.inv7 0) :named _xkassert79))\n\n\n\n; -------------------------------\n;   Invariant for class Person:\n; -------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Person Person)\n(declare-const const-2-Person Person)\n(declare-const const-3-Person Person)\n(declare-const const-4-Person Person)\n(declare-const const-5-Person Person)\n(declare-const const-6-Person Person)\n(declare-const const-7-Person Person)\n(declare-const const-8-Person Person)\n(declare-const const-9-Person Person)\n\n; --- Invariant 1: ---\n\n(define-fun Person.inv1 ((this Ref)) Bool\n  (deref-isa-Person (Person!father this))\n)\n\n(assert (! (Person.inv1 1) :named _xkassert80))\n(assert (! (Person.inv1 2) :named _xkassert81))\n(assert (! (Person.inv1 3) :named _xkassert82))\n(assert (! (Person.inv1 4) :named _xkassert83))\n(assert (! (Person.inv1 5) :named _xkassert84))\n(assert (! (Person.inv1 6) :named _xkassert85))\n(assert (! (Person.inv1 7) :named _xkassert86))\n(assert (! (Person.inv1 8) :named _xkassert87))\n(assert (! (Person.inv1 9) :named _xkassert88))\n\n; --- Invariant 2: ---\n\n(define-fun Person.inv2 ((this Ref)) Bool\n  (deref-isa-Person (Person!child this))\n)\n\n(assert (! (Person.inv2 1) :named _xkassert89))\n(assert (! (Person.inv2 2) :named _xkassert90))\n(assert (! (Person.inv2 3) :named _xkassert91))\n(assert (! (Person.inv2 4) :named _xkassert92))\n(assert (! (Person.inv2 5) :named _xkassert93))\n(assert (! (Person.inv2 6) :named _xkassert94))\n(assert (! (Person.inv2 7) :named _xkassert95))\n(assert (! (Person.inv2 8) :named _xkassert96))\n(assert (! (Person.inv2 9) :named _xkassert97))\n\n; --- Invariant 3: ---\n\n(define-fun Person.inv3 ((this Ref)) Bool\n  (= (Person.child (Person!father this)) this)\n)\n\n(assert (! (Person.inv3 1) :named _xkassert98))\n(assert (! (Person.inv3 2) :named _xkassert99))\n(assert (! (Person.inv3 3) :named _xkassert100))\n(assert (! (Person.inv3 4) :named _xkassert101))\n(assert (! (Person.inv3 5) :named _xkassert102))\n(assert (! (Person.inv3 6) :named _xkassert103))\n(assert (! (Person.inv3 7) :named _xkassert104))\n(assert (! (Person.inv3 8) :named _xkassert105))\n(assert (! (Person.inv3 9) :named _xkassert106))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-Person const-1-Person))\n        2 (lift-Person const-2-Person))\n        3 (lift-Person const-3-Person))\n        4 (lift-Person const-4-Person))\n        5 (lift-Person const-5-Person))\n        6 (lift-Person const-6-Person))\n        7 (lift-Person const-7-Person))\n        8 (lift-Person const-8-Person))\n        9 (lift-Person const-9-Person))\n  )\n)\n\n","smtModel":"(define-fun const-6-Person () Person\n  (mk-Person 6 6))\n(define-fun const-7-Person () Person\n  (mk-Person 3 1))\n(define-fun const-8-Person () Person\n  (mk-Person 2 2))\n(define-fun const-2-Person () Person\n  (mk-Person 8 8))\n(define-fun const-9-Person () Person\n  (mk-Person 5 5))\n(define-fun const-1-Person () Person\n  (mk-Person 7 3))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 5 9))\n(define-fun const-3-Person () Person\n  (mk-Person 1 7))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!10))\n(define-fun const-5-Person () Person\n  (mk-Person 9 9))\n(define-fun const-4-Person () Person\n  (mk-Person 4 4))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Person (mk-Person 8 8))\n  (ite (= x!1 3) (lift-Person (mk-Person 1 7))\n  (ite (= x!1 4) (lift-Person (mk-Person 4 4))\n  (ite (= x!1 1) (lift-Person (mk-Person 7 3))\n  (ite (= x!1 5) (lift-Person (mk-Person 9 9))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 9))\n  (ite (= x!1 6) (lift-Person (mk-Person 6 6))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Person (mk-Person 1 7))\n  (ite (= x!1 2) (lift-Person (mk-Person 8 8))\n  (ite (= x!1 1) (lift-Person (mk-Person 7 3))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 9))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 9))\n    null))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Person (mk-Person 1 7))\n  (ite (= x!1 5) (lift-Person (mk-Person 9 9))\n  (ite (= x!1 4) (lift-Person (mk-Person 4 4))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 9))\n  (ite (= x!1 8) (lift-Person (mk-Person 2 2))\n  (ite (= x!1 2) (lift-Person (mk-Person 8 8))\n  (ite (= x!1 1) (lift-Person (mk-Person 7 3))\n  (ite (= x!1 7) (lift-Person (mk-Person 3 1))\n  (ite (= x!1 6) (lift-Person (mk-Person 6 6))\n    null))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Person (mk-Person 9 9))\n  (ite (= x!1 2) (lift-Person (mk-Person 8 8))\n  (ite (= x!1 3) (lift-Person (mk-Person 1 7))\n  (ite (= x!1 1) (lift-Person (mk-Person 7 3))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 9))\n  (ite (= x!1 4) (lift-Person (mk-Person 4 4))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Person (mk-Person 8 8))\n  (ite (= x!1 1) (lift-Person (mk-Person 7 3))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 9))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Person (mk-Person 1 7))\n  (ite (= x!1 5) (lift-Person (mk-Person 9 9))\n  (ite (= x!1 4) (lift-Person (mk-Person 4 4))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 9))\n  (ite (= x!1 2) (lift-Person (mk-Person 8 8))\n  (ite (= x!1 1) (lift-Person (mk-Person 7 3))\n  (ite (= x!1 7) (lift-Person (mk-Person 3 1))\n  (ite (= x!1 6) (lift-Person (mk-Person 6 6))\n    null)))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Person (mk-Person 8 8))\n  (ite (= x!1 3) (lift-Person (mk-Person 1 7))\n  (ite (= x!1 1) (lift-Person (mk-Person 7 3))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 9))\n  (ite (= x!1 4) (lift-Person (mk-Person 4 4))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Person (mk-Person 7 3))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 9))\n    null)))\n(define-fun k!10 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Person (mk-Person 1 7))\n  (ite (= x!1 5) (lift-Person (mk-Person 9 9))\n  (ite (= x!1 4) (lift-Person (mk-Person 4 4))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 9))\n  (ite (= x!1 2) (lift-Person (mk-Person 8 8))\n  (ite (= x!1 8) (lift-Person (mk-Person 2 2))\n  (ite (= x!1 1) (lift-Person (mk-Person 7 3))\n  (ite (= x!1 9) (lift-Person (mk-Person 5 5))\n  (ite (= x!1 7) (lift-Person (mk-Person 3 1))\n  (ite (= x!1 6) (lift-Person (mk-Person 6 6))\n    null)))))))))))"},"testsmt10.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"a","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"a"},{"type":"ElementValue","element":"x"}]}}],"spec":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"g","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"f"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"x"}]}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"a"},{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"f"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"x"}]}]}]},{"type":"ElementValue","element":"k"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"b","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"h","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k1","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"a"},{"type":"ElementValue","element":"b"}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k2","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"k1"},{"type":"ElementValue","element":"x"}]},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"g"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"x"}]}]}}],"spec":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT_25","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"h"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"i":1,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"},"type":"BinExp"}}],"spec":[]},{"ty":{"type":"IntType"},"ident":"g","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k","expr":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"args":[{"type":"PositionalArgument","exp":{"ident":"x","type":"IdentExp"}}],"exp1":{"ident":"f","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"op":"Plus","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"args":[{"type":"PositionalArgument","exp":{"ident":"x","type":"IdentExp"}}],"exp1":{"ident":"f","type":"IdentExp"},"type":"FunApplExp"},"exp1":{"ident":"a","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"i":2,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"h","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k1","expr":{"op":"Plus","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"k2","expr":{"op":"Plus","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"ident":"k1","type":"IdentExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"ident":"x","type":"IdentExp"}}],"exp1":{"ident":"g","type":"IdentExp"},"type":"FunApplExp"}}],"spec":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT_25","expr":{"args":[{"type":"PositionalArgument","exp":{"i":10,"type":"LiteralInteger"}}],"exp1":{"ident":"h","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]}],"type":"Model"},"typeChecks":true,"name":"testsmt10.k","model":"\nclass A {\n  a:Int = 1\n\n  fun f(x:Int) : Int\n  {\n    a + x\n  }\n\n  fun g(x:Int) : Int\n  {\n    k:Int = f(x) + 1\n    a + f(x) + k + 1\n  }\n}\n\nclass B extending A {\n  b:Int = 2\n\n  fun h(x:Int) : Int\n  {\n    k1:Int = a + b\n    k2:Int = k1 + x\n    g(x)\n  }\n  RESULT_25:Int = h(10)\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)(RESULT_25 Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (a (deref-B this)))\n)\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B.a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B.b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; --- getters for B.RESULT_25: ---\n\n(define-fun B!RESULT_25 ((this Ref)) Int\n  (RESULT_25 (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.f ((this Ref)(x Int)) Int\n  (+ (A.a this) x)\n)\n\n(define-fun A!f ((this Ref)(x Int)) Int\n  (+ (A!a this) x)\n)\n\n(define-fun A.g ((this Ref)(x Int)) Int\n  (let ((k (+ (A.f this x) 1)))\n    (+ (+ (+ (A.a this) (A.f this x)) k) 1))\n)\n\n(define-fun A!g ((this Ref)(x Int)) Int\n  (let ((k (+ (A!f this x) 1)))\n    (+ (+ (+ (A!a this) (A!f this x)) k) 1))\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.f ((this Ref)(x Int)) Int\n  (+ (B.a this) x)\n)\n\n(define-fun B!f ((this Ref)(x Int)) Int\n  (+ (B!a this) x)\n)\n\n(define-fun B.g ((this Ref)(x Int)) Int\n  (let ((k (+ (B.f this x) 1)))\n    (+ (+ (+ (B.a this) (B.f this x)) k) 1))\n)\n\n(define-fun B!g ((this Ref)(x Int)) Int\n  (let ((k (+ (B!f this x) 1)))\n    (+ (+ (+ (B!a this) (B!f this x)) k) 1))\n)\n\n(define-fun B.h ((this Ref)(x Int)) Int\n  (let ((k1 (+ (B.a this) (B.b this))))\n    (let ((k2 (+ k1 x)))\n      (B.g this x)))\n)\n\n(define-fun B!h ((this Ref)(x Int)) Int\n  (let ((k1 (+ (B!a this) (B!b this))))\n    (let ((k2 (+ k1 x)))\n      (B!g this x)))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!a this) 1)\n)\n\n(assert (! (A.inv1 1) :named _xkassert277))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (B!a this) 1)\n)\n\n(assert (! (B.inv1 2) :named _xkassert278))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (= (B!b this) 2)\n)\n\n(assert (! (B.inv2 2) :named _xkassert279))\n\n; --- Invariant 3: ---\n\n(define-fun B.inv3 ((this Ref)) Bool\n  (= (B!RESULT_25 this) (B!h this 10))\n)\n\n(assert (! (B.inv3 2) :named _xkassert280))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-B const-2-B))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-1-A () A\n  (mk-A 1))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun const-2-B () B\n  (mk-B 1 2 25))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 1 2 25))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"testsmt18.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Body","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"mass","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Planet","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"distanceToEarth","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Body"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"Moon","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Planet"],"type":"QualifiedName"}]},"name":"planet","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Body"],"type":"QualifiedName"}]}]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Planet"],"type":"QualifiedName"}]},"assignment":false,"name":"jupiter","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"Planet"},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"mass",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},50000]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"distanceToEarth",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},588000000]}]}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Moon"],"type":"QualifiedName"}]},"assignment":false,"name":"europa","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"Moon"},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"mass",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"planet",{"type":"ElementValue","element":"jupiter"}]}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Planet"],"type":"QualifiedName"}]},"ident":"getPlanet","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Moon"],"type":"QualifiedName"}]},"name":"moon","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"moon"},"planet"]}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"Trip","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Body"],"type":"QualifiedName"}]},"name":"missionStudy","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Body"],"type":"QualifiedName"}]},"assignment":false,"name":"firstStop","expr":{"type":"ElementValue","element":"europa"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Body"],"type":"QualifiedName"}]},"assignment":false,"name":"secondStop","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"getPlanet"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"firstStop"}]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"missionStudy"},{"type":"ElementValue","element":"europa"}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Trip"],"type":"QualifiedName"}]},"name":"trip","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Body","members":[{"ty":{"type":"IntType"},"name":"mass","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Planet","members":[{"ty":{"type":"IntType"},"name":"distanceToEarth","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["Body"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"Moon","members":[{"ty":{"args":[],"ident":{"names":["Planet"],"type":"QualifiedName"},"type":"IdentType"},"name":"planet","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["Body"],"type":"QualifiedName"},"type":"IdentType"}]},{"ty":{"args":[],"ident":{"names":["Planet"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"jupiter","expr":{"args":[{"ident":"mass","type":"NamedArgument","exp":{"i":50000,"type":"LiteralInteger"}},{"ident":"distanceToEarth","type":"NamedArgument","exp":{"i":588000000,"type":"LiteralInteger"}}],"exp1":{"ident":"Planet","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Moon"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"europa","expr":{"args":[{"ident":"mass","type":"NamedArgument","exp":{"i":1,"type":"LiteralInteger"}},{"ident":"planet","type":"NamedArgument","exp":{"ident":"jupiter","type":"IdentExp"}}],"exp1":{"ident":"Moon","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Planet"],"type":"QualifiedName"},"type":"IdentType"},"ident":"getPlanet","typeParams":[],"type":"FunDecl","params":[{"ty":{"args":[],"ident":{"names":["Moon"],"type":"QualifiedName"},"type":"IdentType"},"name":"moon","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"ident":"planet","exp":{"ident":"moon","type":"IdentExp"},"type":"DotExp"}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"Trip","members":[{"ty":{"args":[],"ident":{"names":["Body"],"type":"QualifiedName"},"type":"IdentType"},"name":"missionStudy","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Body"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"firstStop","expr":{"ident":"europa","type":"IdentExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Body"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"secondStop","expr":{"args":[{"type":"PositionalArgument","exp":{"ident":"firstStop","type":"IdentExp"}}],"exp1":{"ident":"getPlanet","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"ident":"europa","type":"IdentExp"},"exp1":{"ident":"missionStudy","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["Trip"],"type":"QualifiedName"},"type":"IdentType"},"name":"trip","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt18.k","model":"\nclass Body {\n  mass:Int\n}\n\nclass Planet extending Body {\n  distanceToEarth:Int\n}\n\nclass Moon extending Body {\n  planet:Planet\n}\n\njupiter:Planet = Planet(mass :: 50000,distanceToEarth :: 588000000)\n\neuropa:Moon = Moon(mass :: 1,planet :: jupiter)\n\nfun getPlanet(moon:Moon) : Planet\n{\n  moon.planet\n}\n\nclass Trip {\n  missionStudy:Body\n  firstStop:Body = europa\n  secondStop:Body = getPlanet(firstStop)\n\n  req missionStudy = europa\n}\n\ntrip:Trip\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (jupiter Ref)(europa Ref)(trip Ref)))))\n(declare-datatypes () ((Body (mk-Body (mass Int)))))\n(declare-datatypes () ((Planet (mk-Planet (mass Int)(distanceToEarth Int)))))\n(declare-datatypes () ((Moon (mk-Moon (mass Int)(planet Ref)))))\n(declare-datatypes () ((Trip (mk-Trip (missionStudy Ref)(firstStop Ref)(secondStop Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Body (sel-Body Body))\n  (lift-Planet (sel-Planet Planet))\n  (lift-Moon (sel-Moon Moon))\n  (lift-Trip (sel-Trip Trip))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Body ((this Ref)) Bool\n  (is-lift-Body (deref this))\n)\n\n(define-fun deref-Body ((this Ref)) Body\n  (sel-Body (deref this))\n)\n\n(define-fun deref-is-Planet ((this Ref)) Bool\n  (is-lift-Planet (deref this))\n)\n\n(define-fun deref-Planet ((this Ref)) Planet\n  (sel-Planet (deref this))\n)\n\n(define-fun deref-is-Moon ((this Ref)) Bool\n  (is-lift-Moon (deref this))\n)\n\n(define-fun deref-Moon ((this Ref)) Moon\n  (sel-Moon (deref this))\n)\n\n(define-fun deref-is-Trip ((this Ref)) Bool\n  (is-lift-Trip (deref this))\n)\n\n(define-fun deref-Trip ((this Ref)) Trip\n  (sel-Trip (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Body ((this Ref)) Bool\n  (or\n    (deref-is-Body this)\n    (deref-is-Planet this)\n    (deref-is-Moon this)\n  )\n)\n\n(define-fun deref-isa-Planet ((this Ref)) Bool\n  (deref-is-Planet this)\n)\n\n(define-fun deref-isa-Moon ((this Ref)) Bool\n  (deref-is-Moon this)\n)\n\n(define-fun deref-isa-Trip ((this Ref)) Bool\n  (deref-is-Trip this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.jupiter: ---\n\n(define-fun TopLevelDeclarations!jupiter ((this Ref)) Ref\n  (jupiter (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.europa: ---\n\n(define-fun TopLevelDeclarations!europa ((this Ref)) Ref\n  (europa (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.trip: ---\n\n(define-fun TopLevelDeclarations!trip ((this Ref)) Ref\n  (trip (deref-TopLevelDeclarations this))\n)\n\n; ---------------------------\n;   Getters for class Moon:\n; ---------------------------\n\n; --- getters for Moon.planet: ---\n\n(define-fun Moon.planet ((this Ref)) Ref\n  (planet (deref-Moon this))\n)\n\n(define-fun Moon!planet ((this Ref)) Ref\n  (planet (deref-Moon this))\n)\n\n; ---------------------------\n;   Getters for class Trip:\n; ---------------------------\n\n; --- getters for Trip.missionStudy: ---\n\n(define-fun Trip!missionStudy ((this Ref)) Ref\n  (missionStudy (deref-Trip this))\n)\n\n; --- getters for Trip.firstStop: ---\n\n(define-fun Trip!firstStop ((this Ref)) Ref\n  (firstStop (deref-Trip this))\n)\n\n; --- getters for Trip.secondStop: ---\n\n(define-fun Trip!secondStop ((this Ref)) Ref\n  (secondStop (deref-Trip this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------------------\n;   Methods for class TopLevelDeclarations:\n; -------------------------------------------\n\n(define-fun TopLevelDeclarations.getPlanet ((this Ref)(moon Ref)) Ref\n  (Moon.planet moon)\n)\n\n(define-fun TopLevelDeclarations!getPlanet ((this Ref)(moon Ref)) Ref\n  (Moon.planet moon)\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (deref (TopLevelDeclarations!jupiter this)) (lift-Planet (mk-Planet 50000 588000000)))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert307))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (= (deref (TopLevelDeclarations!europa this)) (lift-Moon (mk-Moon 1 (TopLevelDeclarations!jupiter this))))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert308))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (deref-isa-Planet (TopLevelDeclarations!jupiter this))\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert309))\n\n; --- Invariant 4: ---\n\n(define-fun TopLevelDeclarations.inv4 ((this Ref)) Bool\n  (deref-isa-Moon (TopLevelDeclarations!europa this))\n)\n\n(assert (! (TopLevelDeclarations.inv4 0) :named _xkassert310))\n\n; --- Invariant 5: ---\n\n(define-fun TopLevelDeclarations.inv5 ((this Ref)) Bool\n  (deref-isa-Trip (TopLevelDeclarations!trip this))\n)\n\n(assert (! (TopLevelDeclarations.inv5 0) :named _xkassert311))\n\n\n\n; -----------------------------\n;   Invariant for class Body:\n; -----------------------------\n\n; --- Constants: ---\n\n(declare-const const-9-Body Body)\n(declare-const const-10-Body Body)\n(declare-const const-11-Body Body)\n(declare-const const-12-Body Body)\n(declare-const const-13-Body Body)\n(declare-const const-14-Body Body)\n(declare-const const-15-Body Body)\n\n\n\n; -------------------------------\n;   Invariant for class Planet:\n; -------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Planet Planet)\n(declare-const const-2-Planet Planet)\n(declare-const const-3-Planet Planet)\n(declare-const const-4-Planet Planet)\n\n\n\n; -----------------------------\n;   Invariant for class Moon:\n; -----------------------------\n\n; --- Constants: ---\n\n(declare-const const-7-Moon Moon)\n(declare-const const-8-Moon Moon)\n\n; --- Invariant 1: ---\n\n(define-fun Moon.inv1 ((this Ref)) Bool\n  (deref-isa-Planet (Moon!planet this))\n)\n\n(assert (! (Moon.inv1 7) :named _xkassert312))\n(assert (! (Moon.inv1 8) :named _xkassert313))\n\n\n\n; -----------------------------\n;   Invariant for class Trip:\n; -----------------------------\n\n; --- Constants: ---\n\n(declare-const const-5-Trip Trip)\n(declare-const const-6-Trip Trip)\n\n; --- Invariant 1: ---\n\n(define-fun Trip.inv1 ((this Ref)) Bool\n  (= (Trip!firstStop this) (TopLevelDeclarations!europa 0))\n)\n\n(assert (! (Trip.inv1 5) :named _xkassert314))\n(assert (! (Trip.inv1 6) :named _xkassert315))\n\n; --- Invariant 2: ---\n\n(define-fun Trip.inv2 ((this Ref)) Bool\n  (= (Trip!secondStop this) (TopLevelDeclarations!getPlanet 0 (Trip!firstStop this)))\n)\n\n(assert (! (Trip.inv2 5) :named _xkassert316))\n(assert (! (Trip.inv2 6) :named _xkassert317))\n\n; --- Invariant 3: ---\n\n(define-fun Trip.inv3 ((this Ref)) Bool\n  (deref-isa-Body (Trip!missionStudy this))\n)\n\n(assert (! (Trip.inv3 5) :named _xkassert318))\n(assert (! (Trip.inv3 6) :named _xkassert319))\n\n; --- Invariant 4: ---\n\n(define-fun Trip.inv4 ((this Ref)) Bool\n  (deref-isa-Body (Trip!firstStop this))\n)\n\n(assert (! (Trip.inv4 5) :named _xkassert320))\n(assert (! (Trip.inv4 6) :named _xkassert321))\n\n; --- Invariant 5: ---\n\n(define-fun Trip.inv5 ((this Ref)) Bool\n  (deref-isa-Body (Trip!secondStop this))\n)\n\n(assert (! (Trip.inv5 5) :named _xkassert322))\n(assert (! (Trip.inv5 6) :named _xkassert323))\n\n; --- Invariant 6: ---\n\n(define-fun Trip.inv6 ((this Ref)) Bool\n  (= (Trip!missionStudy this) (TopLevelDeclarations!europa 0))\n)\n\n(assert (! (Trip.inv6 5) :named _xkassert324))\n(assert (! (Trip.inv6 6) :named _xkassert325))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        9 (lift-Body const-9-Body))\n        10 (lift-Body const-10-Body))\n        11 (lift-Body const-11-Body))\n        12 (lift-Body const-12-Body))\n        13 (lift-Body const-13-Body))\n        14 (lift-Body const-14-Body))\n        15 (lift-Body const-15-Body))\n        1 (lift-Planet const-1-Planet))\n        2 (lift-Planet const-2-Planet))\n        3 (lift-Planet const-3-Planet))\n        4 (lift-Planet const-4-Planet))\n        7 (lift-Moon const-7-Moon))\n        8 (lift-Moon const-8-Moon))\n        5 (lift-Trip const-5-Trip))\n        6 (lift-Trip const-6-Trip))\n  )\n)\n\n","smtModel":"(define-fun const-3-Planet () Planet\n  (mk-Planet 50000 588000000))\n(define-fun const-15-Body () Body\n  (mk-Body 22))\n(define-fun const-4-Planet () Planet\n  (mk-Planet 28 29))\n(define-fun const-8-Moon () Moon\n  (mk-Moon 27 4))\n(define-fun const-12-Body () Body\n  (mk-Body 19))\n(define-fun const-1-Planet () Planet\n  (mk-Planet 23 24))\n(define-fun const-11-Body () Body\n  (mk-Body 18))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 3 7 5))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!16))\n(define-fun const-13-Body () Body\n  (mk-Body 20))\n(define-fun const-7-Moon () Moon\n  (mk-Moon 1 3))\n(define-fun const-2-Planet () Planet\n  (mk-Planet 25 26))\n(define-fun const-5-Trip () Trip\n  (mk-Trip 7 7 3))\n(define-fun const-6-Trip () Trip\n  (mk-Trip 7 7 3))\n(define-fun const-10-Body () Body\n  (mk-Body 17))\n(define-fun const-9-Body () Body\n  (mk-Body 16))\n(define-fun const-14-Body () Body\n  (mk-Body 21))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 14) (lift-Body (mk-Body 21))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 13) (lift-Body (mk-Body 20))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n    null))))))))\n(define-fun k!12 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Planet (mk-Planet 50000 588000000))\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 14) (lift-Body (mk-Body 21))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 13) (lift-Body (mk-Body 20))\n  (ite (= x!1 15) (lift-Body (mk-Body 22))\n  (ite (= x!1 2) (lift-Planet (mk-Planet 25 26))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 1) (lift-Planet (mk-Planet 23 24))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n  (ite (= x!1 4) (lift-Planet (mk-Planet 28 29))\n    null)))))))))))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n    null))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 13) (lift-Body (mk-Body 20))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n    null)))))))\n(define-fun k!11 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Planet (mk-Planet 50000 588000000))\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 14) (lift-Body (mk-Body 21))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 13) (lift-Body (mk-Body 20))\n  (ite (= x!1 15) (lift-Body (mk-Body 22))\n  (ite (= x!1 2) (lift-Planet (mk-Planet 25 26))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 1) (lift-Planet (mk-Planet 23 24))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n    null))))))))))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!16 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Planet (mk-Planet 50000 588000000))\n  (ite (= x!1 5) (lift-Trip (mk-Trip 7 7 3))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 15) (lift-Body (mk-Body 22))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 1) (lift-Planet (mk-Planet 23 24))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n  (ite (= x!1 4) (lift-Planet (mk-Planet 28 29))\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 14) (lift-Body (mk-Body 21))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 13) (lift-Body (mk-Body 20))\n  (ite (= x!1 8) (lift-Moon (mk-Moon 27 4))\n  (ite (= x!1 2) (lift-Planet (mk-Planet 25 26))\n  (ite (= x!1 7) (lift-Moon (mk-Moon 1 3))\n  (ite (= x!1 6) (lift-Trip (mk-Trip 7 7 3))\n    null)))))))))))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n    null))))))\n(define-fun k!10 ((x!1 Int)) Any\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 14) (lift-Body (mk-Body 21))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 13) (lift-Body (mk-Body 20))\n  (ite (= x!1 15) (lift-Body (mk-Body 22))\n  (ite (= x!1 2) (lift-Planet (mk-Planet 25 26))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 1) (lift-Planet (mk-Planet 23 24))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n    null)))))))))))\n(define-fun k!15 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Trip (mk-Trip 7 7 3))\n  (ite (= x!1 3) (lift-Planet (mk-Planet 50000 588000000))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 15) (lift-Body (mk-Body 22))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 1) (lift-Planet (mk-Planet 23 24))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n  (ite (= x!1 4) (lift-Planet (mk-Planet 28 29))\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 14) (lift-Body (mk-Body 21))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 13) (lift-Body (mk-Body 20))\n  (ite (= x!1 8) (lift-Moon (mk-Moon 27 4))\n  (ite (= x!1 2) (lift-Planet (mk-Planet 25 26))\n  (ite (= x!1 7) (lift-Moon (mk-Moon 1 3))\n    null))))))))))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n    null)))))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 14) (lift-Body (mk-Body 21))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 13) (lift-Body (mk-Body 20))\n  (ite (= x!1 15) (lift-Body (mk-Body 22))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 1) (lift-Planet (mk-Planet 23 24))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n    null))))))))))\n(define-fun k!14 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Planet (mk-Planet 50000 588000000))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 15) (lift-Body (mk-Body 22))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 1) (lift-Planet (mk-Planet 23 24))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n  (ite (= x!1 4) (lift-Planet (mk-Planet 28 29))\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 14) (lift-Body (mk-Body 21))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 13) (lift-Body (mk-Body 20))\n  (ite (= x!1 8) (lift-Moon (mk-Moon 27 4))\n  (ite (= x!1 2) (lift-Planet (mk-Planet 25 26))\n  (ite (= x!1 7) (lift-Moon (mk-Moon 1 3))\n    null)))))))))))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n    null))))\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 14) (lift-Body (mk-Body 21))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 13) (lift-Body (mk-Body 20))\n  (ite (= x!1 15) (lift-Body (mk-Body 22))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n    null)))))))))\n(define-fun k!13 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Planet (mk-Planet 50000 588000000))\n  (ite (= x!1 12) (lift-Body (mk-Body 19))\n  (ite (= x!1 11) (lift-Body (mk-Body 18))\n  (ite (= x!1 14) (lift-Body (mk-Body 21))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n  (ite (= x!1 13) (lift-Body (mk-Body 20))\n  (ite (= x!1 15) (lift-Body (mk-Body 22))\n  (ite (= x!1 2) (lift-Planet (mk-Planet 25 26))\n  (ite (= x!1 10) (lift-Body (mk-Body 17))\n  (ite (= x!1 1) (lift-Planet (mk-Planet 23 24))\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n  (ite (= x!1 7) (lift-Moon (mk-Moon 1 3))\n  (ite (= x!1 4) (lift-Planet (mk-Planet 28 29))\n    null))))))))))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 9) (lift-Body (mk-Body 16))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 7 5))\n    null)))"},"inheritance4.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"y","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},20]}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},20]}]}}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"z","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},4]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},15]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]}]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"x","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"name":"y","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"And","exp2":{"op":"LT","exp2":{"i":20,"type":"LiteralInteger"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"GT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":20,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"IntType"},"name":"z","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"And","exp2":{"op":"LT","exp2":{"i":15,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"i":4,"type":"LiteralInteger"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"}]}],"type":"Model"},"typeChecks":true,"name":"inheritance4.k","model":"\nclass A {\n  x:Int\n\n  req x > 10\n}\n\nclass B extending A {\n  y:Int\n\n  req y > 10 && y < 20\n\n  req x < 20\n}\n\nclass C extending B {\n  z:Int\n\n  req z = 4 && x < 15\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)))))\n(declare-datatypes () ((C (mk-C (x Int)(y Int)(z Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (ite (deref-is-B this) (x (deref-B this))\n  (x (deref-C this))))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.x: ---\n\n(define-fun B.x ((this Ref)) Int\n  (ite (deref-is-B this) (x (deref-B this))\n  (x (deref-C this)))\n)\n\n(define-fun B!x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n; --- getters for B.y: ---\n\n(define-fun B.y ((this Ref)) Int\n  (ite (deref-is-B this) (y (deref-B this))\n  (y (deref-C this)))\n)\n\n(define-fun B!y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.x: ---\n\n(define-fun C!x ((this Ref)) Int\n  (x (deref-C this))\n)\n\n; --- getters for C.y: ---\n\n(define-fun C!y ((this Ref)) Int\n  (y (deref-C this))\n)\n\n; --- getters for C.z: ---\n\n(define-fun C!z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (> (A!x this) 10)\n)\n\n(assert (! (A.inv1 1) :named _xkassert65))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (> (B!x this) 10)\n)\n\n(assert (! (B.inv1 2) :named _xkassert66))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (and (> (B!y this) 10) (< (B!y this) 20))\n)\n\n(assert (! (B.inv2 2) :named _xkassert67))\n\n; --- Invariant 3: ---\n\n(define-fun B.inv3 ((this Ref)) Bool\n  (< (B!x this) 20)\n)\n\n(assert (! (B.inv3 2) :named _xkassert68))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-C C)\n\n; --- Invariant 1: ---\n\n(define-fun C.inv1 ((this Ref)) Bool\n  (> (C!x this) 10)\n)\n\n(assert (! (C.inv1 3) :named _xkassert69))\n\n; --- Invariant 2: ---\n\n(define-fun C.inv2 ((this Ref)) Bool\n  (and (> (C!y this) 10) (< (C!y this) 20))\n)\n\n(assert (! (C.inv2 3) :named _xkassert70))\n\n; --- Invariant 3: ---\n\n(define-fun C.inv3 ((this Ref)) Bool\n  (< (C!x this) 20)\n)\n\n(assert (! (C.inv3 3) :named _xkassert71))\n\n; --- Invariant 4: ---\n\n(define-fun C.inv4 ((this Ref)) Bool\n  (and (= (C!z this) 4) (< (C!x this) 15))\n)\n\n(assert (! (C.inv4 3) :named _xkassert72))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-B const-2-B))\n        3 (lift-C const-3-C))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-1-A () A\n  (mk-A 11))\n(define-fun const-3-C () C\n  (mk-C 13 18 4))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!4))\n(define-fun const-2-B () B\n  (mk-B 13 17))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 13 17))\n  (ite (= x!1 1) (lift-A (mk-A 11))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-C (mk-C 13 18 4))\n  (ite (= x!1 2) (lift-B (mk-B 13 17))\n  (ite (= x!1 1) (lift-A (mk-A 11))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 11))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"testsmt16.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Time","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"t","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"DurativeEvent","members":[],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"VerifyEVR","members":[{"ty":{"type":"Expression","operand":[{"type":"StringType","element":"ElementValue"}]},"name":"cmd","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["VerifyEVR"],"type":"QualifiedName"}]},"assignment":false,"name":"verify1","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"VerifyEVR"},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"cmd",{"type":"Expression","operand":[{"type":"StringLiteral","element":"ElementValue"},"\"CMD_NO_OP\""]}]}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Time"],"type":"QualifiedName"}]},"name":"time","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Time","members":[{"ty":{"type":"IntType"},"name":"t","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"DurativeEvent","members":[],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"VerifyEVR","members":[{"ty":{"type":"StringType"},"name":"cmd","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["VerifyEVR"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"verify1","expr":{"args":[{"ident":"cmd","type":"NamedArgument","exp":{"string":"CMD_NO_OP","type":"StringLiteral"}}],"exp1":{"ident":"VerifyEVR","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Time"],"type":"QualifiedName"},"type":"IdentType"},"name":"time","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt16.k","model":"\nclass Time {\n  t:Int\n}\n\nclass DurativeEvent\n\nclass VerifyEVR {\n  cmd:String\n}\n\nverify1:VerifyEVR = VerifyEVR(cmd :: \"CMD_NO_OP\")\n\ntime:Time\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (verify1 Ref)(time Ref)))))\n(declare-datatypes () ((Time (mk-Time (t Int)))))\n(declare-sort DurativeEvent) (declare-const mk-DurativeEvent DurativeEvent)\n(declare-sort VerifyEVR) (declare-const mk-VerifyEVR VerifyEVR)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Time (sel-Time Time))\n  (lift-DurativeEvent (sel-DurativeEvent DurativeEvent))\n  (lift-VerifyEVR (sel-VerifyEVR VerifyEVR))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Time ((this Ref)) Bool\n  (is-lift-Time (deref this))\n)\n\n(define-fun deref-Time ((this Ref)) Time\n  (sel-Time (deref this))\n)\n\n(define-fun deref-is-DurativeEvent ((this Ref)) Bool\n  (is-lift-DurativeEvent (deref this))\n)\n\n(define-fun deref-DurativeEvent ((this Ref)) DurativeEvent\n  (sel-DurativeEvent (deref this))\n)\n\n(define-fun deref-is-VerifyEVR ((this Ref)) Bool\n  (is-lift-VerifyEVR (deref this))\n)\n\n(define-fun deref-VerifyEVR ((this Ref)) VerifyEVR\n  (sel-VerifyEVR (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Time ((this Ref)) Bool\n  (deref-is-Time this)\n)\n\n(define-fun deref-isa-DurativeEvent ((this Ref)) Bool\n  (deref-is-DurativeEvent this)\n)\n\n(define-fun deref-isa-VerifyEVR ((this Ref)) Bool\n  (deref-is-VerifyEVR this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.verify1: ---\n\n(define-fun TopLevelDeclarations!verify1 ((this Ref)) Ref\n  (verify1 (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.time: ---\n\n(define-fun TopLevelDeclarations!time ((this Ref)) Ref\n  (time (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (deref (TopLevelDeclarations!verify1 this)) (lift-VerifyEVR mk-VerifyEVR))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert295))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-VerifyEVR (TopLevelDeclarations!verify1 this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert296))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (deref-isa-Time (TopLevelDeclarations!time this))\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert297))\n\n\n\n; -----------------------------\n;   Invariant for class Time:\n; -----------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Time Time)\n(declare-const const-2-Time Time)\n\n\n\n; --------------------------------------\n;   Invariant for class DurativeEvent:\n; --------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-DurativeEvent DurativeEvent)\n\n\n\n; ----------------------------------\n;   Invariant for class VerifyEVR:\n; ----------------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-VerifyEVR VerifyEVR)\n(declare-const const-5-VerifyEVR VerifyEVR)\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-Time const-1-Time))\n        2 (lift-Time const-2-Time))\n        3 (lift-DurativeEvent const-3-DurativeEvent))\n        4 (lift-VerifyEVR const-4-VerifyEVR))\n        5 (lift-VerifyEVR const-5-VerifyEVR))\n  )\n)\n\n","smtModel":";; universe for VerifyEVR:\n;;   VerifyEVR!val!1 VerifyEVR!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun VerifyEVR!val!1 () VerifyEVR)\n(declare-fun VerifyEVR!val!0 () VerifyEVR)\n;; cardinality constraint:\n(forall ((x VerifyEVR)) (or (= x VerifyEVR!val!1) (= x VerifyEVR!val!0)))\n;; -----------\n;; universe for DurativeEvent:\n;;   DurativeEvent!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun DurativeEvent!val!0 () DurativeEvent)\n;; cardinality constraint:\n(forall ((x DurativeEvent)) (= x DurativeEvent!val!0))\n;; -----------\n(define-fun const-2-Time () Time\n  (mk-Time 6))\n(define-fun const-4-VerifyEVR () VerifyEVR\n  VerifyEVR!val!1)\n(define-fun const-1-Time () Time\n  (mk-Time 7))\n(define-fun const-5-VerifyEVR () VerifyEVR\n  VerifyEVR!val!0)\n(define-fun const-3-DurativeEvent () DurativeEvent\n  DurativeEvent!val!0)\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 5 1))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!6))\n(define-fun mk-VerifyEVR () VerifyEVR\n  VerifyEVR!val!0)\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Time (mk-Time 6))\n  (ite (= x!1 1) (lift-Time (mk-Time 7))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 1))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-DurativeEvent DurativeEvent!val!0)\n  (ite (= x!1 2) (lift-Time (mk-Time 6))\n  (ite (= x!1 1) (lift-Time (mk-Time 7))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 1))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 1))\n    null))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-DurativeEvent DurativeEvent!val!0)\n  (ite (= x!1 2) (lift-Time (mk-Time 6))\n  (ite (= x!1 1) (lift-Time (mk-Time 7))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 1))\n  (ite (= x!1 4) (lift-VerifyEVR VerifyEVR!val!1)\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Time (mk-Time 7))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 1))\n    null)))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-VerifyEVR VerifyEVR!val!0)\n  (ite (= x!1 3) (lift-DurativeEvent DurativeEvent!val!0)\n  (ite (= x!1 2) (lift-Time (mk-Time 6))\n  (ite (= x!1 1) (lift-Time (mk-Time 7))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 1))\n  (ite (= x!1 4) (lift-VerifyEVR VerifyEVR!val!1)\n    null)))))))"},"inheritance2.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"a","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"b","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"d","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},4]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["C"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"c","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["D"],"type":"QualifiedName"}]},"name":"dobj","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT_8","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"dobj"},"a"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"dobj"},"c"]}]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"dobj"},"d"]}]},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"i":1,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"i":2,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"d","expr":{"i":4,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["C"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"c","expr":{"i":3,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"ty":{"args":[],"ident":{"names":["D"],"type":"QualifiedName"},"type":"IdentType"},"name":"dobj","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT_8","expr":{"op":"Plus","exp2":{"ident":"d","exp":{"ident":"dobj","type":"IdentExp"},"type":"DotExp"},"exp1":{"op":"Plus","exp2":{"ident":"c","exp":{"ident":"dobj","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"a","exp":{"ident":"dobj","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"inheritance2.k","model":"\nclass A {\n  a:Int = 1\n}\n\nclass B extending A {\n  b:Int = 2\n}\n\nclass D extending C {\n  d:Int = 4\n}\n\nclass C extending A {\n  c:Int = 3\n}\n\ndobj:D\n\nRESULT_8:Int = dobj.a + dobj.c + dobj.d\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (dobj Ref)(RESULT_8 Int)))))\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(c Int)))))\n(declare-datatypes () ((D (mk-D (a Int)(c Int)(d Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.dobj: ---\n\n(define-fun TopLevelDeclarations!dobj ((this Ref)) Ref\n  (dobj (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.RESULT_8: ---\n\n(define-fun TopLevelDeclarations!RESULT_8 ((this Ref)) Int\n  (RESULT_8 (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.a: ---\n\n(define-fun C.a ((this Ref)) Int\n  (ite (deref-is-C this) (a (deref-C this))\n  (a (deref-D this)))\n)\n\n(define-fun C!a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C.c ((this Ref)) Int\n  (ite (deref-is-C this) (c (deref-C this))\n  (c (deref-D this)))\n)\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.a: ---\n\n(define-fun D.a ((this Ref)) Int\n  (a (deref-D this))\n)\n\n(define-fun D!a ((this Ref)) Int\n  (a (deref-D this))\n)\n\n; --- getters for D.c: ---\n\n(define-fun D.c ((this Ref)) Int\n  (c (deref-D this))\n)\n\n(define-fun D!c ((this Ref)) Int\n  (c (deref-D this))\n)\n\n; --- getters for D.d: ---\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (TopLevelDeclarations!RESULT_8 this) (+ (+ (D.a (TopLevelDeclarations!dobj this)) (D.c (TopLevelDeclarations!dobj this))) (D.d (TopLevelDeclarations!dobj this))))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert44))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-D (TopLevelDeclarations!dobj this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert45))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!a this) 1)\n)\n\n(assert (! (A.inv1 1) :named _xkassert46))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (B!a this) 1)\n)\n\n(assert (! (B.inv1 2) :named _xkassert47))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (= (B!b this) 2)\n)\n\n(assert (! (B.inv2 2) :named _xkassert48))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-C C)\n\n; --- Invariant 1: ---\n\n(define-fun C.inv1 ((this Ref)) Bool\n  (= (C!a this) 1)\n)\n\n(assert (! (C.inv1 3) :named _xkassert49))\n\n; --- Invariant 2: ---\n\n(define-fun C.inv2 ((this Ref)) Bool\n  (= (C!c this) 3)\n)\n\n(assert (! (C.inv2 3) :named _xkassert50))\n\n\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-D D)\n(declare-const const-5-D D)\n\n; --- Invariant 1: ---\n\n(define-fun D.inv1 ((this Ref)) Bool\n  (= (D!a this) 1)\n)\n\n(assert (! (D.inv1 4) :named _xkassert51))\n(assert (! (D.inv1 5) :named _xkassert52))\n\n; --- Invariant 2: ---\n\n(define-fun D.inv2 ((this Ref)) Bool\n  (= (D!c this) 3)\n)\n\n(assert (! (D.inv2 4) :named _xkassert53))\n(assert (! (D.inv2 5) :named _xkassert54))\n\n; --- Invariant 3: ---\n\n(define-fun D.inv3 ((this Ref)) Bool\n  (= (D!d this) 4)\n)\n\n(assert (! (D.inv3 4) :named _xkassert55))\n(assert (! (D.inv3 5) :named _xkassert56))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-B const-2-B))\n        3 (lift-C const-3-C))\n        4 (lift-D const-4-D))\n        5 (lift-D const-5-D))\n  )\n)\n\n","smtModel":"(define-fun const-1-A () A\n  (mk-A 1))\n(define-fun const-3-C () C\n  (mk-C 1 3))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 4 8))\n(define-fun const-5-D () D\n  (mk-D 1 3 4))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!6))\n(define-fun const-2-B () B\n  (mk-B 1 2))\n(define-fun const-4-D () D\n  (mk-D 1 3 4))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 1 2))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 8))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-C (mk-C 1 3))\n  (ite (= x!1 2) (lift-B (mk-B 1 2))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 8))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 8))\n    null))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 1 2))\n  (ite (= x!1 3) (lift-C (mk-C 1 3))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 8))\n  (ite (= x!1 4) (lift-D (mk-D 1 3 4))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 8))\n    null)))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 1 2))\n  (ite (= x!1 3) (lift-C (mk-C 1 3))\n  (ite (= x!1 5) (lift-D (mk-D 1 3 4))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 8))\n  (ite (= x!1 4) (lift-D (mk-D 1 3 4))\n    null)))))))"},"testsmt14.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"RESULT_10","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"b","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"id","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]},{"type":"Expression","operand":[{"type":"BlockExp","element":"ElementValue"},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k1","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Minus",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"k1"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}}]},{"type":"Expression","operand":[{"type":"BlockExp","element":"ElementValue"},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k2","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Minus",{"type":"ElementValue","element":"k2"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}}]}]}}],"spec":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"RESULT_10"},{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"id"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"RESULT_10","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"b","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"id","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"trueBranch":{"type":"BlockExp","body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k1","expr":{"op":"Minus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"k1","type":"IdentExp"},"type":"BinExp"}}]},"falseBranch":{"type":"BlockExp","body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k2","expr":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"op":"Minus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"k2","type":"IdentExp"},"type":"BinExp"}}]},"type":"IfExp","cond":{"op":"GTE","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}}}],"spec":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"args":[{"type":"PositionalArgument","exp":{"i":10,"type":"LiteralInteger"}}],"exp1":{"ident":"id","type":"IdentExp"},"type":"FunApplExp"},"exp1":{"ident":"RESULT_10","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt14.k","model":"\nclass A {\n  RESULT_10:Int\n  b:Int\n\n  fun id(x:Int) : Int\n  {\n    if x >= 0 then\n      {\n        k1:Int = x - 1\n        k1 + 1\n      }\n    else\n      {\n        k2:Int = x + 1\n        k2 - 1\n      }\n  }\n\n  req RESULT_10 = id(10)\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (RESULT_10 Int)(b Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.RESULT_10: ---\n\n(define-fun A!RESULT_10 ((this Ref)) Int\n  (RESULT_10 (deref-A this))\n)\n\n; --- getters for A.b: ---\n\n(define-fun A!b ((this Ref)) Int\n  (b (deref-A this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.id ((this Ref)(x Int)) Int\n  (ite (>= x 0)   (let ((k1 (- x 1)))\n    (+ k1 1))   (let ((k2 (+ x 1)))\n    (- k2 1)))\n)\n\n(define-fun A!id ((this Ref)(x Int)) Int\n  (ite (>= x 0)   (let ((k1 (- x 1)))\n    (+ k1 1))   (let ((k2 (+ x 1)))\n    (- k2 1)))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!RESULT_10 this) (A!id this 10))\n)\n\n(assert (! (A.inv1 1) :named _xkassert293))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-1-A () A\n  (mk-A 10 2))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!2))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 10 2))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"tc3.k":{"json2":"","json1":"","typeChecks":false,"name":"tc3.k","model":"","smt":"","smtModel":""},"nw1.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"RealType","element":"ElementValue"}]},"name":"area","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"RealType","element":"ElementValue"}]},"name":"base","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"RealType","element":"ElementValue"}]},"name":"height","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"RealType","element":"ElementValue"}]},"name":"area2","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"area"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Times",{"type":"ElementValue","element":"base"},{"type":"ElementValue","element":"height"}]}]}}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"RealType"},"name":"area","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"RealType"},"name":"base","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"RealType"},"name":"height","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"RealType"},"name":"area2","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"op":"Times","exp2":{"ident":"height","type":"IdentExp"},"exp1":{"ident":"base","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"area","type":"IdentExp"},"type":"BinExp"}}],"type":"Model"},"typeChecks":true,"name":"nw1.k","model":"\narea:Real\n\nbase:Real\n\nheight:Real\n\narea2:Real\n\nreq area = base * height\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (area Real)(base Real)(height Real)(area2 Real)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.area: ---\n\n(define-fun TopLevelDeclarations!area ((this Ref)) Real\n  (area (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.base: ---\n\n(define-fun TopLevelDeclarations!base ((this Ref)) Real\n  (base (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.height: ---\n\n(define-fun TopLevelDeclarations!height ((this Ref)) Real\n  (height (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (TopLevelDeclarations!area this) (* (TopLevelDeclarations!base this) (TopLevelDeclarations!height this)))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert173))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n  )\n)\n\n","smtModel":"()"},"inheritance12.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"a","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"b","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[],"spec":[{"pre":"true","type":"FunSpec","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"ElementValue","element":"a"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"pre":"true","type":"FunSpec","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"x"},{"type":"ElementValue","element":"a"}]}},{"pre":"false","type":"FunSpec","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"Expression","operand":[{"type":"ResultExp","element":"ElementValue"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}}]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"c","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"a"},{"type":"ElementValue","element":"b"}]},{"type":"ElementValue","element":"c"}]},{"type":"ElementValue","element":"x"}]}}],"spec":[{"pre":"true","type":"FunSpec","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"ElementValue","element":"b"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"pre":"true","type":"FunSpec","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"ElementValue","element":"c"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"pre":"false","type":"FunSpec","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"Expression","operand":[{"type":"ResultExp","element":"ElementValue"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}}]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]}]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["C"],"type":"QualifiedName"}]},"name":"c","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"result","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"c"},"f"]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"result"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},16]}]}}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"i":1,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"i":2,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[],"spec":[{"pre":"true","type":"FunSpec","exp":{"op":"GTE","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"a","type":"IdentExp"},"type":"BinExp"}},{"pre":"true","type":"FunSpec","exp":{"op":"GT","exp2":{"ident":"a","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}},{"pre":"false","type":"FunSpec","exp":{"op":"GTE","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"type":"ResultExp"},"type":"BinExp"}}]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"c","expr":{"i":3,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"c","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"spec":[{"pre":"true","type":"FunSpec","exp":{"op":"GTE","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"b","type":"IdentExp"},"type":"BinExp"}},{"pre":"true","type":"FunSpec","exp":{"op":"GTE","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"c","type":"IdentExp"},"type":"BinExp"}},{"pre":"false","type":"FunSpec","exp":{"op":"GT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"type":"ResultExp"},"type":"BinExp"}}]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"}]},{"ty":{"args":[],"ident":{"names":["C"],"type":"QualifiedName"},"type":"IdentType"},"name":"c","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"result","expr":{"args":[{"type":"PositionalArgument","exp":{"i":10,"type":"LiteralInteger"}}],"exp1":{"ident":"f","exp":{"ident":"c","type":"IdentExp"},"type":"DotExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"i":16,"type":"LiteralInteger"},"exp1":{"ident":"result","type":"IdentExp"},"type":"BinExp"}}],"type":"Model"},"typeChecks":true,"name":"inheritance12.k","model":"\nclass A {\n  a:Int = 1\n\n  fun f(x:Int) : Int\n\n}\n\nclass B extending A {\n  b:Int = 2\n\n  fun f(x:Int) : Int\n    pre a >= 0\n    pre x > a\n    post $result >= 0\n\n}\n\nclass C extending B {\n  c:Int = 3\n\n  fun f(x:Int) : Int\n    pre b >= 0\n    pre c >= 0\n    post $result > 0\n  {\n    a + b + c + x\n  }\n}\n\nc:C\n\nresult:Int = c.f(10)\n\nreq result = 16\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (c Ref)(result Int)))))\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.c: ---\n\n(define-fun TopLevelDeclarations!c ((this Ref)) Ref\n  (c (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.result: ---\n\n(define-fun TopLevelDeclarations!result ((this Ref)) Int\n  (result (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.a: ---\n\n(define-fun C.a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n(define-fun C!a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n; --- getters for C.b: ---\n\n(define-fun C.b ((this Ref)) Int\n  (b (deref-C this))\n)\n\n(define-fun C!b ((this Ref)) Int\n  (b (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C.c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(declare-fun A.f (Ref Int) Int)\n\n(define-fun A!f ((this Ref)(x Int)) Int\n  (A.f this x)\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(declare-fun B.f (Ref Int) Int)\n\n(define-fun B!f ((this Ref)(x Int)) Int\n  (B.f this x)\n)\n\n; ------------------------\n;   Methods for class C:\n; ------------------------\n\n(define-fun C.f ((this Ref)(x Int)) Int\n  (+ (+ (+ (C.a this) (C.b this)) (C.c this)) x)\n)\n\n(define-fun C!f ((this Ref)(x Int)) Int\n  (+ (+ (+ (C!a this) (C!b this)) (C!c this)) x)\n)\n\n(assert (!(forall ((this Ref)(x Int))\n  (=>\n    (and\n      (deref-is-C this)\n      (>= (C!a this) 0)\n      (> x (C!a this))\n      (>= (C!b this) 0)\n      (>= (C!c this) 0)\n    )\n    (let (($result (C!f this x)))\n      (and\n        (>= $result 0)\n        (> $result 0)\n      )\n    )\n  )\n) :named _xkassert31))\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (TopLevelDeclarations!result this) (C.f (TopLevelDeclarations!c this) 10))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert32))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-C (TopLevelDeclarations!c this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert33))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (= (TopLevelDeclarations!result this) 16)\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert34))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!a this) 1)\n)\n\n(assert (! (A.inv1 1) :named _xkassert35))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (B!a this) 1)\n)\n\n(assert (! (B.inv1 2) :named _xkassert36))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (= (B!b this) 2)\n)\n\n(assert (! (B.inv2 2) :named _xkassert37))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-C C)\n(declare-const const-4-C C)\n\n; --- Invariant 1: ---\n\n(define-fun C.inv1 ((this Ref)) Bool\n  (= (C!a this) 1)\n)\n\n(assert (! (C.inv1 3) :named _xkassert38))\n(assert (! (C.inv1 4) :named _xkassert39))\n\n; --- Invariant 2: ---\n\n(define-fun C.inv2 ((this Ref)) Bool\n  (= (C!b this) 2)\n)\n\n(assert (! (C.inv2 3) :named _xkassert40))\n(assert (! (C.inv2 4) :named _xkassert41))\n\n; --- Invariant 3: ---\n\n(define-fun C.inv3 ((this Ref)) Bool\n  (= (C!c this) 3)\n)\n\n(assert (! (C.inv3 3) :named _xkassert42))\n(assert (! (C.inv3 4) :named _xkassert43))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-B const-2-B))\n        3 (lift-C const-3-C))\n        4 (lift-C const-4-C))\n  )\n)\n\n","smtModel":"(define-fun const-1-A () A\n  (mk-A 1))\n(define-fun const-3-C () C\n  (mk-C 1 2 3))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 3 16))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!5))\n(define-fun const-2-B () B\n  (mk-B 1 2))\n(define-fun const-4-C () C\n  (mk-C 1 2 3))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-C (mk-C 1 2 3))\n  (ite (= x!1 2) (lift-B (mk-B 1 2))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 16))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 16))\n    null))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 1 2))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 16))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 1 2))\n  (ite (= x!1 3) (lift-C (mk-C 1 2 3))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 16))\n  (ite (= x!1 4) (lift-C (mk-C 1 2 3))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 3 16))\n    null)))"},"unsat2.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"z","type":"PropertyDecl","modifiers":[]},{"name":"AxGT0","type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"z"},{"type":"ElementValue","element":"x"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},111]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"y","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]}]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"x","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"z","type":"PropertyDecl","modifiers":[]},{"name":"AxGT0","type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"i":111,"type":"LiteralInteger"},"exp1":{"op":"Plus","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"name":"y","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"}]}],"type":"Model"},"typeChecks":true,"name":"unsat2.k","model":"\nclass A {\n  x:Int\n  z:Int\n\n  req AxGT0: x > 0\n\n  req z = 10\n\n  req z + x = 111\n}\n\nclass B {\n  y:Int\n\n  req y < 0\n}\n\nclass C extending A,B {\n\n  req x < 0\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (x Int)(z Int)))))\n(declare-datatypes () ((B (mk-B (y Int)))))\n(declare-datatypes () ((C (mk-C (x Int)(z Int)(y Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (x (deref-C this)))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; --- getters for A.z: ---\n\n(define-fun A!z ((this Ref)) Int\n  (z (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.y: ---\n\n(define-fun B.y ((this Ref)) Int\n  (ite (deref-is-B this) (y (deref-B this))\n  (y (deref-C this)))\n)\n\n(define-fun B!y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.x: ---\n\n(define-fun C!x ((this Ref)) Int\n  (x (deref-C this))\n)\n\n; --- getters for C.z: ---\n\n(define-fun C.z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n(define-fun C!z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n; --- getters for C.y: ---\n\n(define-fun C!y ((this Ref)) Int\n  (y (deref-C this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (> (A!x this) 0)\n)\n\n(assert (! (A.inv1 1) :named _xkassert591))\n\n; --- Invariant 2: ---\n\n(define-fun A.inv2 ((this Ref)) Bool\n  (= (A!z this) 10)\n)\n\n(assert (! (A.inv2 1) :named _xkassert592))\n\n; --- Invariant 3: ---\n\n(define-fun A.inv3 ((this Ref)) Bool\n  (= (+ (A!z this) (A!x this)) 111)\n)\n\n(assert (! (A.inv3 1) :named _xkassert593))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (< (B!y this) 0)\n)\n\n(assert (! (B.inv1 2) :named _xkassert594))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-C C)\n\n; --- Invariant 1: ---\n\n(define-fun C.inv1 ((this Ref)) Bool\n  (> (C!x this) 0)\n)\n\n(assert (! (C.inv1 3) :named _xkassert595))\n\n; --- Invariant 2: ---\n\n(define-fun C.inv2 ((this Ref)) Bool\n  (= (C!z this) 10)\n)\n\n(assert (! (C.inv2 3) :named _xkassert596))\n\n; --- Invariant 3: ---\n\n(define-fun C.inv3 ((this Ref)) Bool\n  (= (+ (C!z this) (C!x this)) 111)\n)\n\n(assert (! (C.inv3 3) :named _xkassert597))\n\n; --- Invariant 4: ---\n\n(define-fun C.inv4 ((this Ref)) Bool\n  (< (C!y this) 0)\n)\n\n(assert (! (C.inv4 3) :named _xkassert598))\n\n; --- Invariant 5: ---\n\n(define-fun C.inv5 ((this Ref)) Bool\n  (< (C!x this) 0)\n)\n\n(assert (! (C.inv5 3) :named _xkassert599))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-B const-2-B))\n        3 (lift-C const-3-C))\n  )\n)\n\n","smtModel":"()"},"unsat4.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"y","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},100]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"z","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Times",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"x","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"op":"Plus","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"name":"y","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":100,"type":"LiteralInteger"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"IntType"},"name":"z","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"op":"Times","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"unsat4.k","model":"\nclass A {\n  x:Int\n\n  req x < 0\n\n  req x + 0 > 10\n}\n\nclass B {\n  y:Int\n\n  req y > 100\n}\n\nclass C {\n  z:Int\n\n  req z < 10\n\n  req z * 1 > 10\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (y Int)))))\n(declare-datatypes () ((C (mk-C (z Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.y: ---\n\n(define-fun B.y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n(define-fun B!y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.z: ---\n\n(define-fun C.z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n(define-fun C!z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (< (A!x this) 0)\n)\n\n(assert (! (A.inv1 1) :named _xkassert601))\n\n; --- Invariant 2: ---\n\n(define-fun A.inv2 ((this Ref)) Bool\n  (> (+ (A!x this) 0) 10)\n)\n\n(assert (! (A.inv2 1) :named _xkassert602))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (> (B!y this) 100)\n)\n\n(assert (! (B.inv1 2) :named _xkassert603))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-C C)\n\n; --- Invariant 1: ---\n\n(define-fun C.inv1 ((this Ref)) Bool\n  (< (C!z this) 10)\n)\n\n(assert (! (C.inv1 3) :named _xkassert604))\n\n; --- Invariant 2: ---\n\n(define-fun C.inv2 ((this Ref)) Bool\n  (> (* (C!z this) 1) 10)\n)\n\n(assert (! (C.inv2 3) :named _xkassert605))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-B const-2-B))\n        3 (lift-C const-3-C))\n  )\n)\n\n","smtModel":"()"},"inheritance10.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"a","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"b","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"c","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"d","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"e","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"f","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"g","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["C"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"E","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["D"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"F","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["E"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"G","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["F"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"H","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["G"],"type":"QualifiedName"}]}]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["H"],"type":"QualifiedName"}]},"assignment":false,"name":"h","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"H"}]},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"h"},"a"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"h"},"b"]}]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"h"},"c"]}]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"h"},"d"]}]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"h"},"e"]}]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"h"},"f"]}]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"h"},"g"]}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},90]}]}}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"a","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"b","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"c","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"d","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"e","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"f","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"g","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["C"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"E","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["D"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"F","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["E"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"G","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["F"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"H","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["G"],"type":"QualifiedName"},"type":"IdentType"}]},{"ty":{"args":[],"ident":{"names":["H"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"h","expr":{"args":[],"exp1":{"ident":"H","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"i":90,"type":"LiteralInteger"},"exp1":{"op":"Plus","exp2":{"ident":"g","exp":{"ident":"h","type":"IdentExp"},"type":"DotExp"},"exp1":{"op":"Plus","exp2":{"ident":"f","exp":{"ident":"h","type":"IdentExp"},"type":"DotExp"},"exp1":{"op":"Plus","exp2":{"ident":"e","exp":{"ident":"h","type":"IdentExp"},"type":"DotExp"},"exp1":{"op":"Plus","exp2":{"ident":"d","exp":{"ident":"h","type":"IdentExp"},"type":"DotExp"},"exp1":{"op":"Plus","exp2":{"ident":"c","exp":{"ident":"h","type":"IdentExp"},"type":"DotExp"},"exp1":{"op":"Plus","exp2":{"ident":"b","exp":{"ident":"h","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"a","exp":{"ident":"h","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"type":"Model"},"typeChecks":true,"name":"inheritance10.k","model":"\nclass A {\n  a:Int\n  b:Int\n  c:Int\n  d:Int\n  e:Int\n  f:Int\n  g:Int\n}\n\nclass B extending A\n\nclass C extending B\n\nclass D extending C\n\nclass E extending D\n\nclass F extending E\n\nclass G extending F\n\nclass H extending G\n\nh:H = H()\n\nreq h.a + h.b + h.c + h.d + h.e + h.f + h.g = 90\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (h Ref)))))\n(declare-datatypes () ((A (mk-A (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((D (mk-D (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((E (mk-E (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((F (mk-F (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((G (mk-G (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((H (mk-H (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-E (sel-E E))\n  (lift-F (sel-F F))\n  (lift-G (sel-G G))\n  (lift-H (sel-H H))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-E ((this Ref)) Bool\n  (is-lift-E (deref this))\n)\n\n(define-fun deref-E ((this Ref)) E\n  (sel-E (deref this))\n)\n\n(define-fun deref-is-F ((this Ref)) Bool\n  (is-lift-F (deref this))\n)\n\n(define-fun deref-F ((this Ref)) F\n  (sel-F (deref this))\n)\n\n(define-fun deref-is-G ((this Ref)) Bool\n  (is-lift-G (deref this))\n)\n\n(define-fun deref-G ((this Ref)) G\n  (sel-G (deref this))\n)\n\n(define-fun deref-is-H ((this Ref)) Bool\n  (is-lift-H (deref this))\n)\n\n(define-fun deref-H ((this Ref)) H\n  (sel-H (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (or\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-E ((this Ref)) Bool\n  (or\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-F ((this Ref)) Bool\n  (or\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-G ((this Ref)) Bool\n  (or\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-H ((this Ref)) Bool\n  (deref-is-H this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.h: ---\n\n(define-fun TopLevelDeclarations!h ((this Ref)) Ref\n  (h (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class H:\n; ------------------------\n\n; --- getters for H.a: ---\n\n(define-fun H.a ((this Ref)) Int\n  (a (deref-H this))\n)\n\n; --- getters for H.b: ---\n\n(define-fun H.b ((this Ref)) Int\n  (b (deref-H this))\n)\n\n; --- getters for H.c: ---\n\n(define-fun H.c ((this Ref)) Int\n  (c (deref-H this))\n)\n\n; --- getters for H.d: ---\n\n(define-fun H.d ((this Ref)) Int\n  (d (deref-H this))\n)\n\n; --- getters for H.e: ---\n\n(define-fun H.e ((this Ref)) Int\n  (e (deref-H this))\n)\n\n; --- getters for H.f: ---\n\n(define-fun H.f ((this Ref)) Int\n  (f (deref-H this))\n)\n\n; --- getters for H.g: ---\n\n(define-fun H.g ((this Ref)) Int\n  (g (deref-H this))\n)\n\n; ========================================\n; === Constructor parameter constants: ===\n; ========================================\n\n(declare-const const__1 Int)\n(declare-const const__2 Int)\n(declare-const const__3 Int)\n(declare-const const__4 Int)\n(declare-const const__5 Int)\n(declare-const const__6 Int)\n(declare-const const__7 Int)\n\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (deref (TopLevelDeclarations!h this)) (lift-H (mk-H const__1 const__2 const__3 const__4 const__5 const__6 const__7)))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert17))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-H (TopLevelDeclarations!h this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert18))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (= (+ (+ (+ (+ (+ (+ (H.a (TopLevelDeclarations!h this)) (H.b (TopLevelDeclarations!h this))) (H.c (TopLevelDeclarations!h this))) (H.d (TopLevelDeclarations!h this))) (H.e (TopLevelDeclarations!h this))) (H.f (TopLevelDeclarations!h this))) (H.g (TopLevelDeclarations!h this))) 90)\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert19))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-A A)\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-5-B B)\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-6-C C)\n\n\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-9-D D)\n\n\n\n; --------------------------\n;   Invariant for class E:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-E E)\n\n\n\n; --------------------------\n;   Invariant for class F:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-F F)\n\n\n\n; --------------------------\n;   Invariant for class G:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-G G)\n\n\n\n; --------------------------\n;   Invariant for class H:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-7-H H)\n(declare-const const-8-H H)\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        3 (lift-A const-3-A))\n        5 (lift-B const-5-B))\n        6 (lift-C const-6-C))\n        9 (lift-D const-9-D))\n        1 (lift-E const-1-E))\n        2 (lift-F const-2-F))\n        4 (lift-G const-4-G))\n        7 (lift-H const-7-H))\n        8 (lift-H const-8-H))\n  )\n)\n\n","smtModel":"(define-fun const-2-F () F\n  (mk-F 45 46 47 48 49 50 51))\n(define-fun const__3 () Int\n  (- 25566))\n(define-fun const-5-B () B\n  (mk-B 17 18 19 20 21 22 23))\n(define-fun const-4-G () G\n  (mk-G 52 53 54 55 56 57 58))\n(define-fun const-1-E () E\n  (mk-E 38 39 40 41 42 43 44))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 8))\n(define-fun const__7 () Int\n  8098)\n(define-fun const__2 () Int\n  2282)\n(define-fun const-6-C () C\n  (mk-C 24 25 26 27 28 29 30))\n(define-fun const__4 () Int\n  449)\n(define-fun const-9-D () D\n  (mk-D 31 32 33 34 35 36 37))\n(define-fun const__6 () Int\n  5853)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!10))\n(define-fun const-7-H () H\n  (mk-H 59 60 61 62 63 64 65))\n(define-fun const-8-H () H\n  (mk-H 8365 2282 (- 25566) 449 609 5853 8098))\n(define-fun const-3-A () A\n  (mk-A 10 11 12 13 14 15 16))\n(define-fun const__5 () Int\n  609)\n(define-fun const__1 () Int\n  8365)\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-F (mk-F 45 46 47 48 49 50 51))\n  (ite (= x!1 5) (lift-B (mk-B 17 18 19 20 21 22 23))\n  (ite (= x!1 3) (lift-A (mk-A 10 11 12 13 14 15 16))\n  (ite (= x!1 1) (lift-E (mk-E 38 39 40 41 42 43 44))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 9) (lift-D (mk-D 31 32 33 34 35 36 37))\n  (ite (= x!1 6) (lift-C (mk-C 24 25 26 27 28 29 30))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-B (mk-B 17 18 19 20 21 22 23))\n  (ite (= x!1 3) (lift-A (mk-A 10 11 12 13 14 15 16))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 6) (lift-C (mk-C 24 25 26 27 28 29 30))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n    null))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 4) (lift-G (mk-G 52 53 54 55 56 57 58))\n  (ite (= x!1 5) (lift-B (mk-B 17 18 19 20 21 22 23))\n  (ite (= x!1 3) (lift-A (mk-A 10 11 12 13 14 15 16))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 2) (lift-F (mk-F 45 46 47 48 49 50 51))\n  (ite (= x!1 1) (lift-E (mk-E 38 39 40 41 42 43 44))\n  (ite (= x!1 9) (lift-D (mk-D 31 32 33 34 35 36 37))\n  (ite (= x!1 7) (lift-H (mk-H 59 60 61 62 63 64 65))\n  (ite (= x!1 6) (lift-C (mk-C 24 25 26 27 28 29 30))\n    null))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-B (mk-B 17 18 19 20 21 22 23))\n  (ite (= x!1 3) (lift-A (mk-A 10 11 12 13 14 15 16))\n  (ite (= x!1 1) (lift-E (mk-E 38 39 40 41 42 43 44))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 9) (lift-D (mk-D 31 32 33 34 35 36 37))\n  (ite (= x!1 6) (lift-C (mk-C 24 25 26 27 28 29 30))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-B (mk-B 17 18 19 20 21 22 23))\n  (ite (= x!1 3) (lift-A (mk-A 10 11 12 13 14 15 16))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-B (mk-B 17 18 19 20 21 22 23))\n  (ite (= x!1 4) (lift-G (mk-G 52 53 54 55 56 57 58))\n  (ite (= x!1 3) (lift-A (mk-A 10 11 12 13 14 15 16))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 2) (lift-F (mk-F 45 46 47 48 49 50 51))\n  (ite (= x!1 1) (lift-E (mk-E 38 39 40 41 42 43 44))\n  (ite (= x!1 9) (lift-D (mk-D 31 32 33 34 35 36 37))\n  (ite (= x!1 6) (lift-C (mk-C 24 25 26 27 28 29 30))\n    null)))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-B (mk-B 17 18 19 20 21 22 23))\n  (ite (= x!1 3) (lift-A (mk-A 10 11 12 13 14 15 16))\n  (ite (= x!1 9) (lift-D (mk-D 31 32 33 34 35 36 37))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 6) (lift-C (mk-C 24 25 26 27 28 29 30))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 10 11 12 13 14 15 16))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n    null)))\n(define-fun k!10 ((x!1 Int)) Any\n  (ite (= x!1 6) (lift-C (mk-C 24 25 26 27 28 29 30))\n  (ite (= x!1 5) (lift-B (mk-B 17 18 19 20 21 22 23))\n  (ite (= x!1 3) (lift-A (mk-A 10 11 12 13 14 15 16))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8))\n  (ite (= x!1 8) (lift-H (mk-H 8365 2282 (- 25566) 449 609 5853 8098))\n  (ite (= x!1 2) (lift-F (mk-F 45 46 47 48 49 50 51))\n  (ite (= x!1 1) (lift-E (mk-E 38 39 40 41 42 43 44))\n  (ite (= x!1 9) (lift-D (mk-D 31 32 33 34 35 36 37))\n  (ite (= x!1 7) (lift-H (mk-H 59 60 61 62 63 64 65))\n  (ite (= x!1 4) (lift-G (mk-G 52 53 54 55 56 57 58))\n    null)))))))))))"},"testsets6.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Planet","members":[],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Earth","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Planet"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"Mars","members":[],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Planet"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"Spacecraft","members":[{"ty":{"type":"Expression","operand":[{"type":"RealType","element":"ElementValue"}]},"name":"cost","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Planet"],"type":"QualifiedName"}]},"name":"destination","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"LowCostSCFleet","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Spacecraft"],"type":"QualifiedName"}]}]},"name":"deployedSC","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"QuantifiedExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"Forall","element":"ElementValue"}]},{"bindings":[{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"ExpCollection","element":"ElementValue"},{"type":"ElementValue","element":"Spacecraft"}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"sc"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Implies",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"sc"},{"type":"ElementValue","element":"deployedSC"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"sc"},"cost"]},{"type":"Expression","operand":[{"type":"RealLiteral","element":"ElementValue"},"1000000.0000000000000000"]}]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"FeasibleLowCostSCFleet","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Spacecraft"],"type":"QualifiedName"}]}]},"name":"deployedSC","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"deployedSC"},{"type":"Expression","operand":[{"type":"CollectionEnumExp","element":"ElementValue"},"Set"]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"QuantifiedExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"Forall","element":"ElementValue"}]},{"bindings":[{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"ExpCollection","element":"ElementValue"},{"type":"ElementValue","element":"Spacecraft"}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"sc"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Implies",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"sc"},{"type":"ElementValue","element":"deployedSC"}]},{"type":"Expression","operand":[{"type":"TypeCastCheckExp","element":"ElementValue"},"false",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"sc"},"destination"]},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Earth"],"type":"QualifiedName"}]}]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Planet","members":[],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Earth","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["Planet"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"Mars","members":[],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["Planet"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"Spacecraft","members":[{"ty":{"type":"RealType"},"name":"cost","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Planet"],"type":"QualifiedName"},"type":"IdentType"},"name":"destination","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"LowCostSCFleet","members":[{"ty":{"args":[{"args":[],"ident":{"names":["Spacecraft"],"type":"QualifiedName"},"type":"IdentType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"deployedSC","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"bindings":[{"patterns":[{"ident":"sc","type":"IdentPattern"}],"collection":{"type":"ExpCollection","exp":{"ident":"Spacecraft","type":"IdentExp"}},"type":"RngBinding"}],"quant":{"type":"Quantifier","element":"Forall"},"exp":{"op":"Implies","exp2":{"op":"LT","exp2":{"f":"1000000.0000000000000000","type":"LiteralFloatingPoint"},"exp1":{"ident":"cost","exp":{"ident":"sc","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"IsIn","exp2":{"ident":"deployedSC","type":"IdentExp"},"exp1":{"ident":"sc","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"QuantifiedExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"FeasibleLowCostSCFleet","members":[{"ty":{"args":[{"args":[],"ident":{"names":["Spacecraft"],"type":"QualifiedName"},"type":"IdentType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"deployedSC","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"NotEQ","exp2":{"kind":"Set","exps":[],"type":"CollectionEnumExp"},"exp1":{"ident":"deployedSC","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"bindings":[{"patterns":[{"ident":"sc","type":"IdentPattern"}],"collection":{"type":"ExpCollection","exp":{"ident":"Spacecraft","type":"IdentExp"}},"type":"RngBinding"}],"quant":{"type":"Quantifier","element":"Forall"},"exp":{"op":"Implies","exp2":{"cast":"false","ty":{"args":[],"ident":{"names":["Earth"],"type":"QualifiedName"},"type":"IdentType"},"type":"TypeCastCheckExp","exp":{"ident":"destination","exp":{"ident":"sc","type":"IdentExp"},"type":"DotExp"}},"exp1":{"op":"IsIn","exp2":{"ident":"deployedSC","type":"IdentExp"},"exp1":{"ident":"sc","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"QuantifiedExp"}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"testsets6.k","model":"\nclass Planet\n\nclass Earth extending Planet\n\nclass Mars extending Planet\n\nclass Spacecraft {\n  cost:Real\n  destination:Planet\n}\n\nclass LowCostSCFleet {\n  deployedSC:Set[Spacecraft]\n\n  req forall sc : Spacecraft . sc isin deployedSC => sc.cost < 1E6\n}\n\nclass FeasibleLowCostSCFleet {\n  deployedSC:Set[Spacecraft]\n\n  req deployedSC != Set{}\n\n  req forall sc : Spacecraft . sc isin deployedSC => sc.destination is Earth\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-sort Planet) (declare-const mk-Planet Planet)\n(declare-sort Earth) (declare-const mk-Earth Earth)\n(declare-sort Mars) (declare-const mk-Mars Mars)\n(declare-datatypes () ((Spacecraft (mk-Spacecraft (cost Real)(destination Ref)))))\n(declare-datatypes () ((LowCostSCFleet (mk-LowCostSCFleet (deployedSC (Set Ref))))))\n(declare-datatypes () ((FeasibleLowCostSCFleet (mk-FeasibleLowCostSCFleet (deployedSC (Set Ref))))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Planet (sel-Planet Planet))\n  (lift-Earth (sel-Earth Earth))\n  (lift-Mars (sel-Mars Mars))\n  (lift-Spacecraft (sel-Spacecraft Spacecraft))\n  (lift-LowCostSCFleet (sel-LowCostSCFleet LowCostSCFleet))\n  (lift-FeasibleLowCostSCFleet (sel-FeasibleLowCostSCFleet FeasibleLowCostSCFleet))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Planet ((this Ref)) Bool\n  (is-lift-Planet (deref this))\n)\n\n(define-fun deref-Planet ((this Ref)) Planet\n  (sel-Planet (deref this))\n)\n\n(define-fun deref-is-Earth ((this Ref)) Bool\n  (is-lift-Earth (deref this))\n)\n\n(define-fun deref-Earth ((this Ref)) Earth\n  (sel-Earth (deref this))\n)\n\n(define-fun deref-is-Mars ((this Ref)) Bool\n  (is-lift-Mars (deref this))\n)\n\n(define-fun deref-Mars ((this Ref)) Mars\n  (sel-Mars (deref this))\n)\n\n(define-fun deref-is-Spacecraft ((this Ref)) Bool\n  (is-lift-Spacecraft (deref this))\n)\n\n(define-fun deref-Spacecraft ((this Ref)) Spacecraft\n  (sel-Spacecraft (deref this))\n)\n\n(define-fun deref-is-LowCostSCFleet ((this Ref)) Bool\n  (is-lift-LowCostSCFleet (deref this))\n)\n\n(define-fun deref-LowCostSCFleet ((this Ref)) LowCostSCFleet\n  (sel-LowCostSCFleet (deref this))\n)\n\n(define-fun deref-is-FeasibleLowCostSCFleet ((this Ref)) Bool\n  (is-lift-FeasibleLowCostSCFleet (deref this))\n)\n\n(define-fun deref-FeasibleLowCostSCFleet ((this Ref)) FeasibleLowCostSCFleet\n  (sel-FeasibleLowCostSCFleet (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Planet ((this Ref)) Bool\n  (or\n    (deref-is-Planet this)\n    (deref-is-Earth this)\n    (deref-is-Mars this)\n  )\n)\n\n(define-fun deref-isa-Earth ((this Ref)) Bool\n  (deref-is-Earth this)\n)\n\n(define-fun deref-isa-Mars ((this Ref)) Bool\n  (deref-is-Mars this)\n)\n\n(define-fun deref-isa-Spacecraft ((this Ref)) Bool\n  (deref-is-Spacecraft this)\n)\n\n(define-fun deref-isa-LowCostSCFleet ((this Ref)) Bool\n  (deref-is-LowCostSCFleet this)\n)\n\n(define-fun deref-isa-FeasibleLowCostSCFleet ((this Ref)) Bool\n  (deref-is-FeasibleLowCostSCFleet this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ---------------------------------\n;   Getters for class Spacecraft:\n; ---------------------------------\n\n; --- getters for Spacecraft.cost: ---\n\n(define-fun Spacecraft.cost ((this Ref)) Real\n  (cost (deref-Spacecraft this))\n)\n\n; --- getters for Spacecraft.destination: ---\n\n(define-fun Spacecraft.destination ((this Ref)) Ref\n  (destination (deref-Spacecraft this))\n)\n\n(define-fun Spacecraft!destination ((this Ref)) Ref\n  (destination (deref-Spacecraft this))\n)\n\n; -------------------------------------\n;   Getters for class LowCostSCFleet:\n; -------------------------------------\n\n; --- getters for LowCostSCFleet.deployedSC: ---\n\n(define-fun LowCostSCFleet!deployedSC ((this Ref)) (Set Ref)\n  (deployedSC (deref-LowCostSCFleet this))\n)\n\n; ---------------------------------------------\n;   Getters for class FeasibleLowCostSCFleet:\n; ---------------------------------------------\n\n; --- getters for FeasibleLowCostSCFleet.deployedSC: ---\n\n(define-fun FeasibleLowCostSCFleet!deployedSC ((this Ref)) (Set Ref)\n  (deployedSC (deref-FeasibleLowCostSCFleet this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; -------------------------------\n;   Invariant for class Planet:\n; -------------------------------\n\n; --- Constants: ---\n\n(declare-const const-5-Planet Planet)\n(declare-const const-6-Planet Planet)\n\n\n\n; ------------------------------\n;   Invariant for class Earth:\n; ------------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-Earth Earth)\n\n\n\n; -----------------------------\n;   Invariant for class Mars:\n; -----------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-Mars Mars)\n\n\n\n; -----------------------------------\n;   Invariant for class Spacecraft:\n; -----------------------------------\n\n; --- Constants: ---\n\n(declare-const const-7-Spacecraft Spacecraft)\n\n; --- Invariant 1: ---\n\n(define-fun Spacecraft.inv1 ((this Ref)) Bool\n  (deref-isa-Planet (Spacecraft!destination this))\n)\n\n(assert (! (Spacecraft.inv1 7) :named _xkassert253))\n\n\n\n; ---------------------------------------\n;   Invariant for class LowCostSCFleet:\n; ---------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-LowCostSCFleet LowCostSCFleet)\n\n; --- Invariant 1: ---\n\n(define-fun LowCostSCFleet.inv1 ((this Ref)) Bool\n  (forall ((sc Ref)) (=> (select (LowCostSCFleet!deployedSC this) sc) (< (Spacecraft.cost sc) 1000000.0000000000000000)))\n)\n\n(assert (! (LowCostSCFleet.inv1 1) :named _xkassert254))\n\n\n\n; -----------------------------------------------\n;   Invariant for class FeasibleLowCostSCFleet:\n; -----------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-FeasibleLowCostSCFleet FeasibleLowCostSCFleet)\n\n; --- Invariant 1: ---\n\n(define-fun FeasibleLowCostSCFleet.inv1 ((this Ref)) Bool\n  (not (= (FeasibleLowCostSCFleet!deployedSC this) ((as const (Set Int)) false)))\n)\n\n(assert (! (FeasibleLowCostSCFleet.inv1 2) :named _xkassert255))\n\n; --- Invariant 2: ---\n\n(define-fun FeasibleLowCostSCFleet.inv2 ((this Ref)) Bool\n  (forall ((sc Ref)) (=> (select (FeasibleLowCostSCFleet!deployedSC this) sc) (deref-isa-Earth (Spacecraft.destination sc))))\n)\n\n(assert (! (FeasibleLowCostSCFleet.inv2 2) :named _xkassert256))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        5 (lift-Planet const-5-Planet))\n        6 (lift-Planet const-6-Planet))\n        3 (lift-Earth const-3-Earth))\n        4 (lift-Mars const-4-Mars))\n        7 (lift-Spacecraft const-7-Spacecraft))\n        1 (lift-LowCostSCFleet const-1-LowCostSCFleet))\n        2 (lift-FeasibleLowCostSCFleet const-2-FeasibleLowCostSCFleet))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n;; universe for Planet:\n;;   Planet!val!0 Planet!val!1 \n;; -----------\n;; definitions for universe elements:\n(declare-fun Planet!val!0 () Planet)\n(declare-fun Planet!val!1 () Planet)\n;; cardinality constraint:\n(forall ((x Planet)) (or (= x Planet!val!0) (= x Planet!val!1)))\n;; -----------\n;; universe for Mars:\n;;   Mars!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun Mars!val!0 () Mars)\n;; cardinality constraint:\n(forall ((x Mars)) (= x Mars!val!0))\n;; -----------\n;; universe for Earth:\n;;   Earth!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun Earth!val!0 () Earth)\n;; cardinality constraint:\n(forall ((x Earth)) (= x Earth!val!0))\n;; -----------\n(define-fun const-1-LowCostSCFleet () LowCostSCFleet\n  (mk-LowCostSCFleet (_ as-array k!1596)))\n(define-fun const-5-Planet () Planet\n  Planet!val!0)\n(define-fun const-2-FeasibleLowCostSCFleet () FeasibleLowCostSCFleet\n  (mk-FeasibleLowCostSCFleet (_ as-array k!1596)))\n(define-fun const-7-Spacecraft () Spacecraft\n  (mk-Spacecraft 997197.0 3))\n(define-fun const-3-Earth () Earth\n  Earth!val!0)\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun const-6-Planet () Planet\n  Planet!val!1)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!1606))\n(define-fun const-4-Mars () Mars\n  Mars!val!0)\n(define-fun k!1599 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!1596 ((x!1 Int)) Bool\n  (ite (= x!1 7) true\n    false))\n(define-fun k!1604 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Earth Earth!val!0)\n  (ite (= x!1 5) (lift-Planet Planet!val!0)\n  (ite (= x!1 4) (lift-Mars Mars!val!0)\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 7) (lift-Spacecraft (mk-Spacecraft 997197.0 3))\n  (ite (= x!1 6) (lift-Planet Planet!val!1)\n    null)))))))\n(define-fun k!1601 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Planet Planet!val!0)\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 6) (lift-Planet Planet!val!1)\n    null))))\n(define-fun k!1598 ((x!1 Int)) Any\n  null)\n(define-fun k!1606 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Earth Earth!val!0)\n  (ite (= x!1 6) (lift-Planet Planet!val!1)\n  (ite (= x!1 5) (lift-Planet Planet!val!0)\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 2)\n    (lift-FeasibleLowCostSCFleet\n      (mk-FeasibleLowCostSCFleet (_ as-array k!1596)))\n  (ite (= x!1 1) (lift-LowCostSCFleet (mk-LowCostSCFleet (_ as-array k!1596)))\n  (ite (= x!1 7) (lift-Spacecraft (mk-Spacecraft 997197.0 3))\n  (ite (= x!1 4) (lift-Mars Mars!val!0)\n    null)))))))))\n(define-fun k!1603 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Earth Earth!val!0)\n  (ite (= x!1 5) (lift-Planet Planet!val!0)\n  (ite (= x!1 4) (lift-Mars Mars!val!0)\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 6) (lift-Planet Planet!val!1)\n    null))))))\n(define-fun k!1600 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Planet Planet!val!0)\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))\n(define-fun k!1597 ((x!1 Int)) Bool\n  false)\n(define-fun k!1605 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Earth Earth!val!0)\n  (ite (= x!1 5) (lift-Planet Planet!val!0)\n  (ite (= x!1 4) (lift-Mars Mars!val!0)\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 1) (lift-LowCostSCFleet (mk-LowCostSCFleet (_ as-array k!1596)))\n  (ite (= x!1 7) (lift-Spacecraft (mk-Spacecraft 997197.0 3))\n  (ite (= x!1 6) (lift-Planet Planet!val!1)\n    null))))))))\n(define-fun k!1602 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Earth Earth!val!0)\n  (ite (= x!1 5) (lift-Planet Planet!val!0)\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 6) (lift-Planet Planet!val!1)\n    null)))))"},"testsets4.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"time","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Events","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]}]},"name":"s","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"ElementValue","element":"s"},{"type":"Expression","operand":[{"type":"CollectionEnumExp","element":"ElementValue"},"Set"]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"QuantifiedExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"Forall","element":"ElementValue"}]},{"bindings":[{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"ExpCollection","element":"ElementValue"},{"type":"ElementValue","element":"Event"}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"e"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Implies",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"ElementValue","element":"e"},{"type":"ElementValue","element":"s"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"e"},"time"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"type":"IntType"},"name":"time","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Events","members":[{"ty":{"args":[{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"NotEQ","exp2":{"kind":"Set","exps":[],"type":"CollectionEnumExp"},"exp1":{"ident":"s","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"bindings":[{"patterns":[{"ident":"e","type":"IdentPattern"}],"collection":{"type":"ExpCollection","exp":{"ident":"Event","type":"IdentExp"}},"type":"RngBinding"}],"quant":{"type":"Quantifier","element":"Forall"},"exp":{"op":"Implies","exp2":{"op":"GTE","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"time","exp":{"ident":"e","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"IsIn","exp2":{"ident":"s","type":"IdentExp"},"exp1":{"ident":"e","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"QuantifiedExp"}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"testsets4.k","model":"\nclass Event {\n  time:Int\n}\n\nclass Events {\n  s:Set[Event]\n\n  req s != Set{}\n\n  req forall e : Event . e isin s => e.time >= 0\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((Event (mk-Event (time Int)))))\n(declare-datatypes () ((Events (mk-Events (s (Set Ref))))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Event (sel-Event Event))\n  (lift-Events (sel-Events Events))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-Events ((this Ref)) Bool\n  (is-lift-Events (deref this))\n)\n\n(define-fun deref-Events ((this Ref)) Events\n  (sel-Events (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-Events ((this Ref)) Bool\n  (deref-is-Events this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ----------------------------\n;   Getters for class Event:\n; ----------------------------\n\n; --- getters for Event.time: ---\n\n(define-fun Event.time ((this Ref)) Int\n  (time (deref-Event this))\n)\n\n; -----------------------------\n;   Getters for class Events:\n; -----------------------------\n\n; --- getters for Events.s: ---\n\n(define-fun Events!s ((this Ref)) (Set Ref)\n  (s (deref-Events this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; ------------------------------\n;   Invariant for class Event:\n; ------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Event Event)\n\n\n\n; -------------------------------\n;   Invariant for class Events:\n; -------------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-Events Events)\n\n; --- Invariant 1: ---\n\n(define-fun Events.inv1 ((this Ref)) Bool\n  (not (= (Events!s this) ((as const (Set Int)) false)))\n)\n\n(assert (! (Events.inv1 2) :named _xkassert246))\n\n; --- Invariant 2: ---\n\n(define-fun Events.inv2 ((this Ref)) Bool\n  (forall ((e Ref)) (=> (select (Events!s this) e) (>= (Event.time e) 0)))\n)\n\n(assert (! (Events.inv2 2) :named _xkassert247))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-Event const-1-Event))\n        2 (lift-Events const-2-Events))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-2-Events () Events\n  (mk-Events (_ as-array k!0)))\n(define-fun const-1-Event () Event\n  (mk-Event 7719))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!5))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!0 ((x!1 Int)) Bool\n  (ite (= x!1 1) true\n    false))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Event (mk-Event 7719))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))\n(define-fun k!1 ((x!1 Int)) Bool\n  false)\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Events (mk-Events (_ as-array k!0)))\n  (ite (= x!1 1) (lift-Event (mk-Event 7719))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))))\n(define-fun k!2 ((x!1 Int)) Any\n  null)"},"testsets2.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Sets","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Set"],"type":"QualifiedName"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},"name":"s1","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"s1"},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]},{"type":"ElementValue","element":"x"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},15]}]}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"x"]}]}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Subset",{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},11]},{"type":"ElementValue","element":"x"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},14]}]}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"x"]}]}]},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]},{"type":"ElementValue","element":"x"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},15]}]}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"x"]}]}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},11]},{"type":"Expression","operand":[{"type":"CollectionComprExp","element":"ElementValue"},"Set",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]},{"type":"ElementValue","element":"x"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},15]}]}]},{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"x"]}]}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"IsIn",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},11]},{"type":"ElementValue","element":"s1"}]}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"Sets","members":[{"ty":{"args":[{"type":"IntType"}],"ident":{"names":["Set"],"type":"QualifiedName"},"type":"IdentType"},"name":"s1","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"x","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"And","exp2":{"op":"LTE","exp2":{"i":15,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"LTE","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"i":10,"type":"LiteralInteger"},"type":"BinExp"},"type":"BinExp"},"exp1":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"type":"CollectionComprExp"},"exp1":{"ident":"s1","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"Subset","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"x","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"And","exp2":{"op":"LTE","exp2":{"i":15,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"LTE","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"i":10,"type":"LiteralInteger"},"type":"BinExp"},"type":"BinExp"},"exp1":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"type":"CollectionComprExp"},"exp1":{"kind":"Set","bindings":[{"patterns":[{"ident":"x","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"And","exp2":{"op":"LTE","exp2":{"i":14,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"LTE","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"i":11,"type":"LiteralInteger"},"type":"BinExp"},"type":"BinExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"CollectionComprExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"IsIn","exp2":{"kind":"Set","bindings":[{"patterns":[{"ident":"x","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"exp2":{"op":"And","exp2":{"op":"LTE","exp2":{"i":15,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"LTE","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"i":10,"type":"LiteralInteger"},"type":"BinExp"},"type":"BinExp"},"exp1":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"type":"CollectionComprExp"},"exp1":{"i":11,"type":"LiteralInteger"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"IsIn","exp2":{"ident":"s1","type":"IdentExp"},"exp1":{"i":11,"type":"LiteralInteger"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"testsets2.k","model":"\nclass Sets {\n  s1:Set[Int]\n\n  req s1 = Set{x + 1 | x : Int . 10 <= x && x <= 15}\n\n  req Set{x | x : Int . 11 <= x && x <= 14} subset Set{x + 1 | x : Int . 10 <= x && x <= 15}\n\n  req 11 isin Set{x + 1 | x : Int . 10 <= x && x <= 15}\n\n  req 11 isin s1\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((Sets (mk-Sets (s1 (Set Int))))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Sets (sel-Sets Sets))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Sets ((this Ref)) Bool\n  (is-lift-Sets (deref this))\n)\n\n(define-fun deref-Sets ((this Ref)) Sets\n  (sel-Sets (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Sets ((this Ref)) Bool\n  (deref-is-Sets this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ---------------------------\n;   Getters for class Sets:\n; ---------------------------\n\n; --- getters for Sets.s1: ---\n\n(define-fun Sets!s1 ((this Ref)) (Set Int)\n  (s1 (deref-Sets this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; -----------------------------\n;   Invariant for class Sets:\n; -----------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Sets Sets)\n\n; --- Invariant 1: ---\n\n(define-fun Sets.inv1 ((this Ref)) Bool\n  (forall ((var_9 Int)) (= (select (Sets!s1 this) (+ var_9 1)) (and (<= 10 var_9) (<= var_9 15))))\n)\n\n(assert (! (Sets.inv1 1) :named _xkassert233))\n\n; --- Invariant 2: ---\n\n(define-fun Sets.inv2 ((this Ref)) Bool\n  (forall ((var_10 Int)) (=> (and (<= 11 (+ var_10 1)) (<= (+ var_10 1) 14)) (and (<= 10 var_10) (<= var_10 15))))\n)\n\n(assert (! (Sets.inv2 1) :named _xkassert234))\n\n; --- Invariant 3: ---\n\n(define-fun Sets.inv3 ((this Ref)) Bool\n  (exists ((x Int)) (and (= 11 (+ x 1)) (and (<= 10 x) (<= x 15))))\n)\n\n(assert (! (Sets.inv3 1) :named _xkassert235))\n\n; --- Invariant 4: ---\n\n(define-fun Sets.inv4 ((this Ref)) Bool\n  (select (Sets!s1 this) 11)\n)\n\n(assert (! (Sets.inv4 1) :named _xkassert236))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-Sets const-1-Sets))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun const-1-Sets () Sets\n  (mk-Sets (_ as-array k!41)))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!44))\n(define-fun x!0 () Int\n  10)\n(define-fun k!43 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!44 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Sets (mk-Sets (_ as-array k!41)))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))\n(define-fun k!41 ((x!1 Int)) Bool\n  (ite (= x!1 12) true\n  (ite (= x!1 11) true\n  (ite (= x!1 14) true\n  (ite (= x!1 13) true\n  (ite (= x!1 16) true\n  (ite (= x!1 15) true\n    false)))))))\n(define-fun k!42 ((x!1 Int)) Any\n  null)"},"testsmt1.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"ERROR"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},42]},{"type":"ElementValue","element":"ERROR"}]}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"y","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"CartesianType","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]}]},"name":"z","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"TupleExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},{"type":"Expression","operand":[{"type":"BooleanLiteral","element":"ElementValue"},true]}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"TupleIndex",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"TupleIndex",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]}]}},{"ty":{"type":"Expression","operand":[{"type":"CartesianType","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]}]},"ident":"f","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"TupleExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},{"type":"Expression","operand":[{"type":"BooleanLiteral","element":"ElementValue"},true]}]}}],"spec":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},20]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"QuantifiedExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"Exists","element":"ElementValue"}]},{"bindings":[{"type":"Expression","operand":[{"type":"RngBinding","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TypeCollection","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},{"type":"Expression","operand":[{"type":"IdentPattern","element":"ElementValue"},"i"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"i"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"ElementValue","element":"i"}]},{"type":"ElementValue","element":"y"}]}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"TupleIndex",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"f"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},20]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"y"},{"type":"ElementValue","element":"x"}]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"name":"sat","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"z","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"a","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"x"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},22]}]}},{"type":"ConstraintDecl","exp":{"type":"ElementValue","element":"sat"}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Implies",{"type":"Expression","operand":[{"type":"UnaryExp","element":"ElementValue"},"Not",{"type":"ElementValue","element":"sat"}]},{"type":"Expression","operand":[{"type":"ParenExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"x"]}]}]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"g","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"l","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"l"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}}],"spec":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"g"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"k"}]}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}}],"spec":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"f"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"z"}]}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},22]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"x"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"y"]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"ElementValue","element":"sat"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"x"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},22]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},20]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"NotEQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"x"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"y"]}]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"IntType"},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"ERROR","type":"IdentExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"BoolType"},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"trueBranch":{"i":42,"type":"LiteralInteger"},"falseBranch":{"ident":"ERROR","type":"IdentExp"},"type":"IfExp","cond":{"ident":"b","type":"IdentExp"}}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"x","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"y","type":"PropertyDecl","modifiers":[]},{"ty":{"types":[{"type":"IntType"},{"type":"BoolType"}],"type":"CartesianType"},"name":"z","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"exps":[{"i":1,"type":"LiteralInteger"},{"b":true,"type":"LiteralBoolean"}],"type":"TupleExp"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"And","exp2":{"op":"TupleIndex","exp2":{"i":2,"type":"LiteralInteger"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"op":"TupleIndex","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}},{"ty":{"types":[{"type":"IntType"},{"type":"BoolType"}],"type":"CartesianType"},"ident":"f","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"exps":[{"i":1,"type":"LiteralInteger"},{"b":true,"type":"LiteralBoolean"}],"type":"TupleExp"}}],"spec":[]},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":20,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"bindings":[{"patterns":[{"ident":"i","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"quant":{"type":"Quantifier","element":"Exists"},"exp":{"op":"And","exp2":{"op":"EQ","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"i","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"exp1":{"op":"GT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"i","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"QuantifiedExp"}},{"type":"ConstraintDecl","exp":{"op":"TupleIndex","exp2":{"i":2,"type":"LiteralInteger"},"exp1":{"args":[],"exp1":{"ident":"f","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"And","exp2":{"op":"GT","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"GT","exp2":{"i":20,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"BoolType"},"name":"sat","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"z","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"a","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LTE","exp2":{"i":22,"type":"LiteralInteger"},"exp1":{"ident":"x","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"ident":"sat","type":"IdentExp"}},{"type":"ConstraintDecl","exp":{"op":"Implies","exp2":{"exp":{"op":"EQ","exp2":{"ident":"x","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"},"type":"ParenExp"},"exp1":{"op":"Not","exp":{"ident":"sat","type":"IdentExp"},"type":"UnaryExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"ident":"g","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"l","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"l","type":"IdentExp"},"type":"BinExp"}}],"spec":[]},{"ty":{"type":"IntType"},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"args":[{"type":"PositionalArgument","exp":{"ident":"k","type":"IdentExp"}}],"exp1":{"ident":"g","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"}}],"spec":[]},{"type":"ConstraintDecl","exp":{"op":"LTE","exp2":{"i":22,"type":"LiteralInteger"},"exp1":{"args":[{"type":"PositionalArgument","exp":{"ident":"z","type":"IdentExp"}}],"exp1":{"ident":"f","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"NotEQ","exp2":{"ident":"y","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"x","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"And","exp2":{"op":"NotEQ","exp2":{"ident":"y","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"x","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"LTE","exp2":{"i":20,"type":"LiteralInteger"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"LTE","exp2":{"i":22,"type":"LiteralInteger"},"exp1":{"ident":"x","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"ident":"sat","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt1.k","model":"\nERROR:Int\n\nreq ERROR < 0\n\nfun CHECK(b:Bool) : Int\n{\n  if b then\n    42\n  else\n    ERROR\n}\n\nclass A {\n  x:Int\n  y:Int\n  z:Int * Bool\n\n  req z = Tuple(1,true)\n\n  req z # 1 = 1 && z # 2\n\n  fun f : Int * Bool\n  {\n    Tuple(1,true)\n  }\n\n  req x > 20\n\n  req exists i : Int . i > 0 && x + i = y\n\n  req f() # 2\n  RESULT:Int = CHECK(x > 20 && y > x)\n}\n\nclass B {\n  sat:Bool\n  z:Int\n  a:A\n\n  req a.x <= 22\n\n  req sat\n\n  req !sat => (z = a.x)\n\n  fun g(l:Int) : Int\n  {\n    l + 1\n  }\n\n  fun f(k:Int) : Int\n  {\n    g(k) + 1\n  }\n\n  req f(z) <= 22\n\n  req a.x != a.y\n  RESULT:Int = CHECK(sat && a.x <= 22 && z <= 20 && a.x != a.y)\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (ERROR Int)))))\n(declare-datatypes () ((A (mk-A (x Int)(y Int)(z (Tuple2 Int Bool))(RESULT Int)))))\n(declare-datatypes () ((B (mk-B (sat Bool)(z Int)(a Ref)(RESULT Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.ERROR: ---\n\n(define-fun TopLevelDeclarations.ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations!ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; --- getters for A.y: ---\n\n(define-fun A.y ((this Ref)) Int\n  (y (deref-A this))\n)\n\n(define-fun A!y ((this Ref)) Int\n  (y (deref-A this))\n)\n\n; --- getters for A.z: ---\n\n(define-fun A!z ((this Ref)) (Tuple2 Int Bool)\n  (z (deref-A this))\n)\n\n; --- getters for A.RESULT: ---\n\n(define-fun A!RESULT ((this Ref)) Int\n  (RESULT (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.sat: ---\n\n(define-fun B!sat ((this Ref)) Bool\n  (sat (deref-B this))\n)\n\n; --- getters for B.z: ---\n\n(define-fun B!z ((this Ref)) Int\n  (z (deref-B this))\n)\n\n; --- getters for B.a: ---\n\n(define-fun B!a ((this Ref)) Ref\n  (a (deref-B this))\n)\n\n; --- getters for B.RESULT: ---\n\n(define-fun B!RESULT ((this Ref)) Int\n  (RESULT (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------------------\n;   Methods for class TopLevelDeclarations:\n; -------------------------------------------\n\n(define-fun TopLevelDeclarations.CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations.ERROR this))\n)\n\n(define-fun TopLevelDeclarations!CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations!ERROR this))\n)\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.f ((this Ref)) (Tuple2 Int Bool)\n  (mk-Tuple2 1 true)\n)\n\n(define-fun A!f ((this Ref)) (Tuple2 Int Bool)\n  (mk-Tuple2 1 true)\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.g ((this Ref)(l Int)) Int\n  (+ l 1)\n)\n\n(define-fun B!g ((this Ref)(l Int)) Int\n  (+ l 1)\n)\n\n(define-fun B.f ((this Ref)(k Int)) Int\n  (+ (B.g this k) 1)\n)\n\n(define-fun B!f ((this Ref)(k Int)) Int\n  (+ (B!g this k) 1)\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (< (TopLevelDeclarations!ERROR this) 0)\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert257))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n(declare-const const-2-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!RESULT this) (TopLevelDeclarations!CHECK 0 (and (> (A!x this) 20) (> (A!y this) (A!x this)))))\n)\n\n(assert (! (A.inv1 1) :named _xkassert258))\n(assert (! (A.inv1 2) :named _xkassert259))\n\n; --- Invariant 2: ---\n\n(define-fun A.inv2 ((this Ref)) Bool\n  (= (A!z this) (mk-Tuple2 1 true))\n)\n\n(assert (! (A.inv2 1) :named _xkassert260))\n(assert (! (A.inv2 2) :named _xkassert261))\n\n; --- Invariant 3: ---\n\n(define-fun A.inv3 ((this Ref)) Bool\n  (and (= (_1 (A!z this)) 1) (_2 (A!z this)))\n)\n\n(assert (! (A.inv3 1) :named _xkassert262))\n(assert (! (A.inv3 2) :named _xkassert263))\n\n; --- Invariant 4: ---\n\n(define-fun A.inv4 ((this Ref)) Bool\n  (> (A!x this) 20)\n)\n\n(assert (! (A.inv4 1) :named _xkassert264))\n(assert (! (A.inv4 2) :named _xkassert265))\n\n; --- Invariant 5: ---\n\n(define-fun A.inv5 ((this Ref)) Bool\n  (exists ((i Int)) (and (> i 0) (= (+ (A!x this) i) (A!y this))))\n)\n\n(assert (! (A.inv5 1) :named _xkassert266))\n(assert (! (A.inv5 2) :named _xkassert267))\n\n; --- Invariant 6: ---\n\n(define-fun A.inv6 ((this Ref)) Bool\n  (_2 (A!f this ))\n)\n\n(assert (! (A.inv6 1) :named _xkassert268))\n(assert (! (A.inv6 2) :named _xkassert269))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (B!RESULT this) (TopLevelDeclarations!CHECK 0 (and (and (and (B!sat this) (<= (A.x (B!a this)) 22)) (<= (B!z this) 20)) (not (= (A.x (B!a this)) (A.y (B!a this)))))))\n)\n\n(assert (! (B.inv1 3) :named _xkassert270))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (deref-isa-A (B!a this))\n)\n\n(assert (! (B.inv2 3) :named _xkassert271))\n\n; --- Invariant 3: ---\n\n(define-fun B.inv3 ((this Ref)) Bool\n  (<= (A.x (B!a this)) 22)\n)\n\n(assert (! (B.inv3 3) :named _xkassert272))\n\n; --- Invariant 4: ---\n\n(define-fun B.inv4 ((this Ref)) Bool\n  (B!sat this)\n)\n\n(assert (! (B.inv4 3) :named _xkassert273))\n\n; --- Invariant 5: ---\n\n(define-fun B.inv5 ((this Ref)) Bool\n  (=> (not (B!sat this)) (= (B!z this) (A.x (B!a this))))\n)\n\n(assert (! (B.inv5 3) :named _xkassert274))\n\n; --- Invariant 6: ---\n\n(define-fun B.inv6 ((this Ref)) Bool\n  (<= (B!f this (B!z this)) 22)\n)\n\n(assert (! (B.inv6 3) :named _xkassert275))\n\n; --- Invariant 7: ---\n\n(define-fun B.inv7 ((this Ref)) Bool\n  (not (= (A.x (B!a this)) (A.y (B!a this))))\n)\n\n(assert (! (B.inv7 3) :named _xkassert276))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-A const-2-A))\n        3 (lift-B const-3-B))\n  )\n)\n\n","smtModel":"(define-fun const-1-A () A\n  (mk-A 21 22 (mk-Tuple2 1 true) 42))\n(define-fun i!1 () Int\n  1)\n(define-fun const-2-A () A\n  (mk-A 21 22 (mk-Tuple2 1 true) 42))\n(define-fun i!0 () Int\n  1)\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations (- 1)))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!6))\n(define-fun const-3-B () B\n  (mk-B true (- 2417) 2 42))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) null\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1)))\n    null)))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 2) null\n  (ite (= x!1 1) (lift-A (mk-A 21 22 (mk-Tuple2 1 true) 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1)))\n    null))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 21 22 (mk-Tuple2 1 true) 42))\n  (ite (= x!1 1) (lift-A (mk-A 21 22 (mk-Tuple2 1 true) 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1)))\n    null))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 2) null\n    null))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 21 22 (mk-Tuple2 1 true) 42))\n  (ite (= x!1 3) (lift-B (mk-B true (- 2417) 2 42))\n  (ite (= x!1 1) (lift-A (mk-A 21 22 (mk-Tuple2 1 true) 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1)))\n    null)))))"},"testsmt5.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"ERROR"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},42]},{"type":"ElementValue","element":"ERROR"}]}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"t1","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"t2","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"ident":"meets","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"other","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"t2"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"other"},"t1"]}]}}],"spec":[]},{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"ident":"before","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"other","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"t2"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"other"},"t1"]}]}}],"spec":[]},{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"ident":"contains","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"other","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"t1"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"other"},"t1"]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"other"},"t2"]},{"type":"ElementValue","element":"t2"}]}]}}],"spec":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"t1"},{"type":"ElementValue","element":"t2"}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Minus",{"type":"ElementValue","element":"t2"},{"type":"ElementValue","element":"t1"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"t1"},{"type":"ElementValue","element":"t2"}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Minus",{"type":"ElementValue","element":"t2"},{"type":"ElementValue","element":"t1"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Schedule","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"a","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"b","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"c","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Event"],"type":"QualifiedName"}]},"name":"d","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"meets"]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"b"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},"before"]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"c"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"c"},"contains"]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"d"}]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},"t1"]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"c"},"t1"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"c"},"t1"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"d"},"t1"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"d"},"t2"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"c"},"t2"]}]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["Schedule"],"type":"QualifiedName"}]},"name":"schedule","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"IntType"},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"ERROR","type":"IdentExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"BoolType"},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"trueBranch":{"i":42,"type":"LiteralInteger"},"falseBranch":{"ident":"ERROR","type":"IdentExp"},"type":"IfExp","cond":{"ident":"b","type":"IdentExp"}}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"Event","members":[{"ty":{"type":"IntType"},"name":"t1","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"t2","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"BoolType"},"ident":"meets","typeParams":[],"type":"FunDecl","params":[{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"other","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"EQ","exp2":{"ident":"t1","exp":{"ident":"other","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","type":"IdentExp"},"type":"BinExp"}}],"spec":[]},{"ty":{"type":"BoolType"},"ident":"before","typeParams":[],"type":"FunDecl","params":[{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"other","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"LT","exp2":{"ident":"t1","exp":{"ident":"other","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","type":"IdentExp"},"type":"BinExp"}}],"spec":[]},{"ty":{"type":"BoolType"},"ident":"contains","typeParams":[],"type":"FunDecl","params":[{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"other","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"And","exp2":{"op":"LT","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t2","exp":{"ident":"other","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"LT","exp2":{"ident":"t1","exp":{"ident":"other","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t1","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}}],"spec":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"op":"Minus","exp2":{"ident":"t1","type":"IdentExp"},"exp1":{"ident":"t2","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"And","exp2":{"op":"GT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"op":"Minus","exp2":{"ident":"t1","type":"IdentExp"},"exp1":{"ident":"t2","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"exp1":{"op":"LT","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Schedule","members":[{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"a","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"b","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"c","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["Event"],"type":"QualifiedName"},"type":"IdentType"},"name":"d","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"ident":"b","type":"IdentExp"}}],"exp1":{"ident":"meets","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"FunApplExp"}},{"type":"ConstraintDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"ident":"c","type":"IdentExp"}}],"exp1":{"ident":"before","exp":{"ident":"b","type":"IdentExp"},"type":"DotExp"},"type":"FunApplExp"}},{"type":"ConstraintDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"ident":"d","type":"IdentExp"}}],"exp1":{"ident":"contains","exp":{"ident":"c","type":"IdentExp"},"type":"DotExp"},"type":"FunApplExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"And","exp2":{"op":"LTE","exp2":{"ident":"t2","exp":{"ident":"c","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"d","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"LTE","exp2":{"ident":"t1","exp":{"ident":"d","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t1","exp":{"ident":"c","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"LT","exp2":{"ident":"t1","exp":{"ident":"c","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"b","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"ident":"t1","exp":{"ident":"b","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"t2","exp":{"ident":"a","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["Schedule"],"type":"QualifiedName"},"type":"IdentType"},"name":"schedule","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt5.k","model":"\nERROR:Int\n\nreq ERROR < 0\n\nfun CHECK(b:Bool) : Int\n{\n  if b then\n    42\n  else\n    ERROR\n}\n\nclass Event {\n  t1:Int\n  t2:Int\n\n  fun meets(other:Event) : Bool\n  {\n    t2 = other.t1\n  }\n\n  fun before(other:Event) : Bool\n  {\n    t2 < other.t1\n  }\n\n  fun contains(other:Event) : Bool\n  {\n    t1 < other.t1 && other.t2 < t2\n  }\n\n  req t1 < t2\n\n  req t2 - t1 > 10\n  RESULT:Int = CHECK(t1 < t2 && t2 - t1 > 10)\n}\n\nclass Schedule {\n  a:Event\n  b:Event\n  c:Event\n  d:Event\n\n  req a.meets(b)\n\n  req b.before(c)\n\n  req c.contains(d)\n  RESULT:Int = CHECK(a.t2 = b.t1 && b.t2 < c.t1 && c.t1 <= d.t1 && d.t2 <= c.t2)\n}\n\nschedule:Schedule\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (ERROR Int)(schedule Ref)))))\n(declare-datatypes () ((Event (mk-Event (t1 Int)(t2 Int)(RESULT Int)))))\n(declare-datatypes () ((Schedule (mk-Schedule (a Ref)(b Ref)(c Ref)(d Ref)(RESULT Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-Event (sel-Event Event))\n  (lift-Schedule (sel-Schedule Schedule))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-Schedule ((this Ref)) Bool\n  (is-lift-Schedule (deref this))\n)\n\n(define-fun deref-Schedule ((this Ref)) Schedule\n  (sel-Schedule (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-Schedule ((this Ref)) Bool\n  (deref-is-Schedule this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.ERROR: ---\n\n(define-fun TopLevelDeclarations.ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations!ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.schedule: ---\n\n(define-fun TopLevelDeclarations!schedule ((this Ref)) Ref\n  (schedule (deref-TopLevelDeclarations this))\n)\n\n; ----------------------------\n;   Getters for class Event:\n; ----------------------------\n\n; --- getters for Event.t1: ---\n\n(define-fun Event.t1 ((this Ref)) Int\n  (t1 (deref-Event this))\n)\n\n(define-fun Event!t1 ((this Ref)) Int\n  (t1 (deref-Event this))\n)\n\n; --- getters for Event.t2: ---\n\n(define-fun Event.t2 ((this Ref)) Int\n  (t2 (deref-Event this))\n)\n\n(define-fun Event!t2 ((this Ref)) Int\n  (t2 (deref-Event this))\n)\n\n; --- getters for Event.RESULT: ---\n\n(define-fun Event!RESULT ((this Ref)) Int\n  (RESULT (deref-Event this))\n)\n\n; -------------------------------\n;   Getters for class Schedule:\n; -------------------------------\n\n; --- getters for Schedule.a: ---\n\n(define-fun Schedule!a ((this Ref)) Ref\n  (a (deref-Schedule this))\n)\n\n; --- getters for Schedule.b: ---\n\n(define-fun Schedule!b ((this Ref)) Ref\n  (b (deref-Schedule this))\n)\n\n; --- getters for Schedule.c: ---\n\n(define-fun Schedule!c ((this Ref)) Ref\n  (c (deref-Schedule this))\n)\n\n; --- getters for Schedule.d: ---\n\n(define-fun Schedule!d ((this Ref)) Ref\n  (d (deref-Schedule this))\n)\n\n; --- getters for Schedule.RESULT: ---\n\n(define-fun Schedule!RESULT ((this Ref)) Int\n  (RESULT (deref-Schedule this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------------------\n;   Methods for class TopLevelDeclarations:\n; -------------------------------------------\n\n(define-fun TopLevelDeclarations.CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations.ERROR this))\n)\n\n(define-fun TopLevelDeclarations!CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations!ERROR this))\n)\n\n; ----------------------------\n;   Methods for class Event:\n; ----------------------------\n\n(define-fun Event.meets ((this Ref)(other Ref)) Bool\n  (= (Event.t2 this) (Event.t1 other))\n)\n\n(define-fun Event!meets ((this Ref)(other Ref)) Bool\n  (= (Event!t2 this) (Event.t1 other))\n)\n\n(define-fun Event.before ((this Ref)(other Ref)) Bool\n  (< (Event.t2 this) (Event.t1 other))\n)\n\n(define-fun Event!before ((this Ref)(other Ref)) Bool\n  (< (Event!t2 this) (Event.t1 other))\n)\n\n(define-fun Event.contains ((this Ref)(other Ref)) Bool\n  (and (< (Event.t1 this) (Event.t1 other)) (< (Event.t2 other) (Event.t2 this)))\n)\n\n(define-fun Event!contains ((this Ref)(other Ref)) Bool\n  (and (< (Event!t1 this) (Event.t1 other)) (< (Event.t2 other) (Event!t2 this)))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (deref-isa-Schedule (TopLevelDeclarations!schedule this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert467))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (< (TopLevelDeclarations!ERROR this) 0)\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert468))\n\n\n\n; ------------------------------\n;   Invariant for class Event:\n; ------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Event Event)\n(declare-const const-2-Event Event)\n(declare-const const-3-Event Event)\n(declare-const const-4-Event Event)\n(declare-const const-5-Event Event)\n(declare-const const-6-Event Event)\n(declare-const const-7-Event Event)\n(declare-const const-8-Event Event)\n(declare-const const-9-Event Event)\n\n; --- Invariant 1: ---\n\n(define-fun Event.inv1 ((this Ref)) Bool\n  (= (Event!RESULT this) (TopLevelDeclarations!CHECK 0 (and (< (Event!t1 this) (Event!t2 this)) (> (- (Event!t2 this) (Event!t1 this)) 10))))\n)\n\n(assert (! (Event.inv1 1) :named _xkassert469))\n(assert (! (Event.inv1 2) :named _xkassert470))\n(assert (! (Event.inv1 3) :named _xkassert471))\n(assert (! (Event.inv1 4) :named _xkassert472))\n(assert (! (Event.inv1 5) :named _xkassert473))\n(assert (! (Event.inv1 6) :named _xkassert474))\n(assert (! (Event.inv1 7) :named _xkassert475))\n(assert (! (Event.inv1 8) :named _xkassert476))\n(assert (! (Event.inv1 9) :named _xkassert477))\n\n; --- Invariant 2: ---\n\n(define-fun Event.inv2 ((this Ref)) Bool\n  (< (Event!t1 this) (Event!t2 this))\n)\n\n(assert (! (Event.inv2 1) :named _xkassert478))\n(assert (! (Event.inv2 2) :named _xkassert479))\n(assert (! (Event.inv2 3) :named _xkassert480))\n(assert (! (Event.inv2 4) :named _xkassert481))\n(assert (! (Event.inv2 5) :named _xkassert482))\n(assert (! (Event.inv2 6) :named _xkassert483))\n(assert (! (Event.inv2 7) :named _xkassert484))\n(assert (! (Event.inv2 8) :named _xkassert485))\n(assert (! (Event.inv2 9) :named _xkassert486))\n\n; --- Invariant 3: ---\n\n(define-fun Event.inv3 ((this Ref)) Bool\n  (> (- (Event!t2 this) (Event!t1 this)) 10)\n)\n\n(assert (! (Event.inv3 1) :named _xkassert487))\n(assert (! (Event.inv3 2) :named _xkassert488))\n(assert (! (Event.inv3 3) :named _xkassert489))\n(assert (! (Event.inv3 4) :named _xkassert490))\n(assert (! (Event.inv3 5) :named _xkassert491))\n(assert (! (Event.inv3 6) :named _xkassert492))\n(assert (! (Event.inv3 7) :named _xkassert493))\n(assert (! (Event.inv3 8) :named _xkassert494))\n(assert (! (Event.inv3 9) :named _xkassert495))\n\n\n\n; ---------------------------------\n;   Invariant for class Schedule:\n; ---------------------------------\n\n; --- Constants: ---\n\n(declare-const const-10-Schedule Schedule)\n(declare-const const-11-Schedule Schedule)\n\n; --- Invariant 1: ---\n\n(define-fun Schedule.inv1 ((this Ref)) Bool\n  (= (Schedule!RESULT this) (TopLevelDeclarations!CHECK 0 (and (and (and (= (Event.t2 (Schedule!a this)) (Event.t1 (Schedule!b this))) (< (Event.t2 (Schedule!b this)) (Event.t1 (Schedule!c this)))) (<= (Event.t1 (Schedule!c this)) (Event.t1 (Schedule!d this)))) (<= (Event.t2 (Schedule!d this)) (Event.t2 (Schedule!c this))))))\n)\n\n(assert (! (Schedule.inv1 10) :named _xkassert496))\n(assert (! (Schedule.inv1 11) :named _xkassert497))\n\n; --- Invariant 2: ---\n\n(define-fun Schedule.inv2 ((this Ref)) Bool\n  (deref-isa-Event (Schedule!a this))\n)\n\n(assert (! (Schedule.inv2 10) :named _xkassert498))\n(assert (! (Schedule.inv2 11) :named _xkassert499))\n\n; --- Invariant 3: ---\n\n(define-fun Schedule.inv3 ((this Ref)) Bool\n  (deref-isa-Event (Schedule!b this))\n)\n\n(assert (! (Schedule.inv3 10) :named _xkassert500))\n(assert (! (Schedule.inv3 11) :named _xkassert501))\n\n; --- Invariant 4: ---\n\n(define-fun Schedule.inv4 ((this Ref)) Bool\n  (deref-isa-Event (Schedule!c this))\n)\n\n(assert (! (Schedule.inv4 10) :named _xkassert502))\n(assert (! (Schedule.inv4 11) :named _xkassert503))\n\n; --- Invariant 5: ---\n\n(define-fun Schedule.inv5 ((this Ref)) Bool\n  (deref-isa-Event (Schedule!d this))\n)\n\n(assert (! (Schedule.inv5 10) :named _xkassert504))\n(assert (! (Schedule.inv5 11) :named _xkassert505))\n\n; --- Invariant 6: ---\n\n(define-fun Schedule.inv6 ((this Ref)) Bool\n  (Event.meets (Schedule!a this) (Schedule!b this))\n)\n\n(assert (! (Schedule.inv6 10) :named _xkassert506))\n(assert (! (Schedule.inv6 11) :named _xkassert507))\n\n; --- Invariant 7: ---\n\n(define-fun Schedule.inv7 ((this Ref)) Bool\n  (Event.before (Schedule!b this) (Schedule!c this))\n)\n\n(assert (! (Schedule.inv7 10) :named _xkassert508))\n(assert (! (Schedule.inv7 11) :named _xkassert509))\n\n; --- Invariant 8: ---\n\n(define-fun Schedule.inv8 ((this Ref)) Bool\n  (Event.contains (Schedule!c this) (Schedule!d this))\n)\n\n(assert (! (Schedule.inv8 10) :named _xkassert510))\n(assert (! (Schedule.inv8 11) :named _xkassert511))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-Event const-1-Event))\n        2 (lift-Event const-2-Event))\n        3 (lift-Event const-3-Event))\n        4 (lift-Event const-4-Event))\n        5 (lift-Event const-5-Event))\n        6 (lift-Event const-6-Event))\n        7 (lift-Event const-7-Event))\n        8 (lift-Event const-8-Event))\n        9 (lift-Event const-9-Event))\n        10 (lift-Schedule const-10-Schedule))\n        11 (lift-Schedule const-11-Schedule))\n  )\n)\n\n","smtModel":"(define-fun const-9-Event () Event\n  (mk-Event (- 6465) (- 6454) 42))\n(define-fun const-7-Event () Event\n  (mk-Event (- 510) 51 42))\n(define-fun const-10-Schedule () Schedule\n  (mk-Schedule 1 3 7 8 42))\n(define-fun const-11-Schedule () Schedule\n  (mk-Schedule 2 5 4 6 42))\n(define-fun const-4-Event () Event\n  (mk-Event 26 52 42))\n(define-fun const-5-Event () Event\n  (mk-Event (- 6442) (- 511) 42))\n(define-fun const-3-Event () Event\n  (mk-Event (- 6455) (- 511) 42))\n(define-fun const-6-Event () Event\n  (mk-Event 38 49 42))\n(define-fun const-1-Event () Event\n  (mk-Event (- 6466) (- 6455) 42))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations (- 1) 10))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!12))\n(define-fun const-2-Event () Event\n  (mk-Event (- 6453) (- 6442) 42))\n(define-fun const-8-Event () Event\n  (mk-Event 26 37 42))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Event (mk-Event (- 6453) (- 6442) 42))\n  (ite (= x!1 3) (lift-Event (mk-Event (- 6455) (- 511) 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 26 52 42))\n  (ite (= x!1 1) (lift-Event (mk-Event (- 6466) (- 6455) 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 5) (lift-Event (mk-Event (- 6442) (- 511) 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 38 49 42))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event (- 6455) (- 511) 42))\n  (ite (= x!1 2) (lift-Event (mk-Event (- 6453) (- 6442) 42))\n  (ite (= x!1 1) (lift-Event (mk-Event (- 6466) (- 6455) 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n    null)))))\n(define-fun k!12 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event (- 6455) (- 511) 42))\n  (ite (= x!1 5) (lift-Event (mk-Event (- 6442) (- 511) 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 26 52 42))\n  (ite (= x!1 11) (lift-Schedule (mk-Schedule 2 5 4 6 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 2) (lift-Event (mk-Event (- 6453) (- 6442) 42))\n  (ite (= x!1 8) (lift-Event (mk-Event 26 37 42))\n  (ite (= x!1 10) (lift-Schedule (mk-Schedule 1 3 7 8 42))\n  (ite (= x!1 1) (lift-Event (mk-Event (- 6466) (- 6455) 42))\n  (ite (= x!1 9) (lift-Event (mk-Event (- 6465) (- 6454) 42))\n  (ite (= x!1 7) (lift-Event (mk-Event (- 510) 51 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 38 49 42))\n    null)))))))))))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n    null))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event (- 6455) (- 511) 42))\n  (ite (= x!1 5) (lift-Event (mk-Event (- 6442) (- 511) 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 38 49 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 8) (lift-Event (mk-Event 26 37 42))\n  (ite (= x!1 2) (lift-Event (mk-Event (- 6453) (- 6442) 42))\n  (ite (= x!1 1) (lift-Event (mk-Event (- 6466) (- 6455) 42))\n  (ite (= x!1 7) (lift-Event (mk-Event (- 510) 51 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 26 52 42))\n    null))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Event (mk-Event (- 6442) (- 511) 42))\n  (ite (= x!1 2) (lift-Event (mk-Event (- 6453) (- 6442) 42))\n  (ite (= x!1 3) (lift-Event (mk-Event (- 6455) (- 511) 42))\n  (ite (= x!1 1) (lift-Event (mk-Event (- 6466) (- 6455) 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 4) (lift-Event (mk-Event 26 52 42))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Event (mk-Event (- 6453) (- 6442) 42))\n  (ite (= x!1 1) (lift-Event (mk-Event (- 6466) (- 6455) 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n    null))))\n(define-fun k!11 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event (- 6455) (- 511) 42))\n  (ite (= x!1 5) (lift-Event (mk-Event (- 6442) (- 511) 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 38 49 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 2) (lift-Event (mk-Event (- 6453) (- 6442) 42))\n  (ite (= x!1 8) (lift-Event (mk-Event 26 37 42))\n  (ite (= x!1 10) (lift-Schedule (mk-Schedule 1 3 7 8 42))\n  (ite (= x!1 1) (lift-Event (mk-Event (- 6466) (- 6455) 42))\n  (ite (= x!1 9) (lift-Event (mk-Event (- 6465) (- 6454) 42))\n  (ite (= x!1 7) (lift-Event (mk-Event (- 510) 51 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 26 52 42))\n    null))))))))))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event (- 6455) (- 511) 42))\n  (ite (= x!1 5) (lift-Event (mk-Event (- 6442) (- 511) 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 38 49 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 2) (lift-Event (mk-Event (- 6453) (- 6442) 42))\n  (ite (= x!1 1) (lift-Event (mk-Event (- 6466) (- 6455) 42))\n  (ite (= x!1 7) (lift-Event (mk-Event (- 510) 51 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 26 52 42))\n    null)))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-Event (mk-Event (- 6453) (- 6442) 42))\n  (ite (= x!1 3) (lift-Event (mk-Event (- 6455) (- 511) 42))\n  (ite (= x!1 1) (lift-Event (mk-Event (- 6466) (- 6455) 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 4) (lift-Event (mk-Event 26 52 42))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-Event (mk-Event (- 6466) (- 6455) 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n    null)))\n(define-fun k!10 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Event (mk-Event (- 6455) (- 511) 42))\n  (ite (= x!1 5) (lift-Event (mk-Event (- 6442) (- 511) 42))\n  (ite (= x!1 6) (lift-Event (mk-Event 38 49 42))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 10))\n  (ite (= x!1 2) (lift-Event (mk-Event (- 6453) (- 6442) 42))\n  (ite (= x!1 8) (lift-Event (mk-Event 26 37 42))\n  (ite (= x!1 1) (lift-Event (mk-Event (- 6466) (- 6455) 42))\n  (ite (= x!1 9) (lift-Event (mk-Event (- 6465) (- 6454) 42))\n  (ite (= x!1 7) (lift-Event (mk-Event (- 510) 51 42))\n  (ite (= x!1 4) (lift-Event (mk-Event 26 52 42))\n    null)))))))))))"},"testsmt3.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"ERROR"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"BoolType","element":"ElementValue"}]},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"ElementValue","element":"b"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},42]},{"type":"ElementValue","element":"ERROR"}]}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"x","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"y","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"sum","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"ElementValue","element":"y"}]}}],"spec":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"x"},{"type":"ElementValue","element":"y"}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT_A","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"ElementValue","element":"x"},{"type":"ElementValue","element":"y"}]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"z","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"a1","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"assignment":false,"name":"a2","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"A"},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"y",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},17]}]}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"assignment":false,"name":"a3","expr":{"type":"Expression","operand":[{"type":"IfExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]}]},{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"A"},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"y",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},9]}]}]}]},{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"A"},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"y",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},33]}]}]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a1"},"y"]},{"type":"ElementValue","element":"z"}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]},{"type":"ElementValue","element":"z"}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"sum"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT_B","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a2"},"y"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},17]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a3"},"y"]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"z"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},9]}]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"a1"},"y"]},{"type":"ElementValue","element":"z"}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LT",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]},{"type":"ElementValue","element":"z"}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"sum"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"assignment":false,"name":"inst1A","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"A"},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"x",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"y",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"assignment":false,"name":"inst2A","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"A"},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"y",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]},"assignment":false,"name":"inst1B","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"B"},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"a1",{"type":"ElementValue","element":"inst1A"}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"z",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},200]}]}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"CHECK"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"And",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"inst1A"},"x"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"inst1A"},"y"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"inst2A"},"x"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"inst2A"},"y"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"inst1B"},"a1"]},"x"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"inst1A"},"x"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"inst1B"},"a1"]},"y"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"inst1A"},"y"]}]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"inst1B"},"z"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},200]}]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"IntType"},"name":"ERROR","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"ERROR","type":"IdentExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"ident":"CHECK","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"BoolType"},"name":"b","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"trueBranch":{"i":42,"type":"LiteralInteger"},"falseBranch":{"ident":"ERROR","type":"IdentExp"},"type":"IfExp","cond":{"ident":"b","type":"IdentExp"}}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"x","expr":{"i":1,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"y","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"sum","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}}],"spec":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT_A","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"And","exp2":{"op":"LT","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"name":"z","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"a1","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"a2","expr":{"args":[{"ident":"y","type":"NamedArgument","exp":{"i":17,"type":"LiteralInteger"}}],"exp1":{"ident":"A","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"a3","expr":{"trueBranch":{"args":[{"ident":"y","type":"NamedArgument","exp":{"op":"Plus","exp2":{"i":9,"type":"LiteralInteger"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"}}],"exp1":{"ident":"A","type":"IdentExp"},"type":"FunApplExp"},"falseBranch":{"args":[{"ident":"y","type":"NamedArgument","exp":{"i":33,"type":"LiteralInteger"}}],"exp1":{"ident":"A","type":"IdentExp"},"type":"FunApplExp"},"type":"IfExp","cond":{"op":"GT","exp2":{"i":3,"type":"LiteralInteger"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"}},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"ident":"z","type":"IdentExp"},"exp1":{"ident":"y","exp":{"ident":"a1","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"LT","exp2":{"ident":"z","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"sum","type":"IdentExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT_B","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"And","exp2":{"op":"GT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"sum","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"LT","exp2":{"ident":"z","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"LT","exp2":{"ident":"z","type":"IdentExp"},"exp1":{"ident":"y","exp":{"ident":"a1","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"EQ","exp2":{"op":"Plus","exp2":{"i":9,"type":"LiteralInteger"},"exp1":{"ident":"z","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"y","exp":{"ident":"a3","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"i":17,"type":"LiteralInteger"},"exp1":{"ident":"y","exp":{"ident":"a2","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"inst1A","expr":{"args":[{"ident":"x","type":"NamedArgument","exp":{"i":1,"type":"LiteralInteger"}},{"ident":"y","type":"NamedArgument","exp":{"i":2,"type":"LiteralInteger"}}],"exp1":{"ident":"A","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"inst2A","expr":{"args":[{"ident":"y","type":"NamedArgument","exp":{"i":2,"type":"LiteralInteger"}}],"exp1":{"ident":"A","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"inst1B","expr":{"args":[{"ident":"a1","type":"NamedArgument","exp":{"ident":"inst1A","type":"IdentExp"}},{"ident":"z","type":"NamedArgument","exp":{"i":200,"type":"LiteralInteger"}}],"exp1":{"ident":"B","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"args":[{"type":"PositionalArgument","exp":{"op":"And","exp2":{"op":"EQ","exp2":{"i":200,"type":"LiteralInteger"},"exp1":{"ident":"z","exp":{"ident":"inst1B","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"EQ","exp2":{"ident":"y","exp":{"ident":"inst1A","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"y","exp":{"ident":"a1","exp":{"ident":"inst1B","type":"IdentExp"},"type":"DotExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"EQ","exp2":{"ident":"x","exp":{"ident":"inst1A","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"x","exp":{"ident":"a1","exp":{"ident":"inst1B","type":"IdentExp"},"type":"DotExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"EQ","exp2":{"i":2,"type":"LiteralInteger"},"exp1":{"ident":"y","exp":{"ident":"inst2A","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"EQ","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","exp":{"ident":"inst2A","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"And","exp2":{"op":"EQ","exp2":{"i":2,"type":"LiteralInteger"},"exp1":{"ident":"y","exp":{"ident":"inst1A","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"exp1":{"op":"EQ","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","exp":{"ident":"inst1A","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"CHECK","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt3.k","model":"\nERROR:Int\n\nreq ERROR < 0\n\nfun CHECK(b:Bool) : Int\n{\n  if b then\n    42\n  else\n    ERROR\n}\n\nclass A {\n  x:Int = 1\n  y:Int\n\n  fun sum : Int\n  {\n    x + y\n  }\n\n  req x < y\n  RESULT_A:Int = CHECK(x = 1 && x < y)\n}\n\nclass B extending A {\n  z:Int\n  a1:A\n  a2:A = A(y :: 17)\n  a3:A = if z > 3 then\n    A(y :: z + 9)\n  else\n    A(y :: 33)\n\n  req a1.y < z\n\n  req y + 10 < z\n\n  req sum > 10\n  RESULT_B:Int = CHECK(a2.y = 17 && a3.y = z + 9 && a1.y < z && y + 10 < z && sum > 10)\n}\n\ninst1A:A = A(x :: 1,y :: 2)\n\ninst2A:A = A(y :: 2)\n\ninst1B:B = B(a1 :: inst1A,z :: 200)\n\nRESULT:Int = CHECK(inst1A.x = 1 && inst1A.y = 2 && inst2A.x = 1 && inst2A.y = 2 && inst1B.a1.x = inst1A.x && inst1B.a1.y = inst1A.y && inst1B.z = 200)\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (ERROR Int)(inst1A Ref)(inst2A Ref)(inst1B Ref)(RESULT Int)))))\n(declare-datatypes () ((A (mk-A (x Int)(y Int)(RESULT_A Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)(RESULT_A Int)(z Int)(a1 Ref)(a2 Ref)(a3 Ref)(RESULT_B Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.ERROR: ---\n\n(define-fun TopLevelDeclarations.ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations!ERROR ((this Ref)) Int\n  (ERROR (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.inst1A: ---\n\n(define-fun TopLevelDeclarations!inst1A ((this Ref)) Ref\n  (inst1A (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.inst2A: ---\n\n(define-fun TopLevelDeclarations!inst2A ((this Ref)) Ref\n  (inst2A (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.inst1B: ---\n\n(define-fun TopLevelDeclarations!inst1B ((this Ref)) Ref\n  (inst1B (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.RESULT: ---\n\n(define-fun TopLevelDeclarations!RESULT ((this Ref)) Int\n  (RESULT (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (x (deref-B this)))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; --- getters for A.y: ---\n\n(define-fun A.y ((this Ref)) Int\n  (ite (deref-is-A this) (y (deref-A this))\n  (y (deref-B this)))\n)\n\n(define-fun A!y ((this Ref)) Int\n  (y (deref-A this))\n)\n\n; --- getters for A.RESULT_A: ---\n\n(define-fun A!RESULT_A ((this Ref)) Int\n  (RESULT_A (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.x: ---\n\n(define-fun B.x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n(define-fun B!x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n; --- getters for B.y: ---\n\n(define-fun B.y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n(define-fun B!y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; --- getters for B.RESULT_A: ---\n\n(define-fun B!RESULT_A ((this Ref)) Int\n  (RESULT_A (deref-B this))\n)\n\n; --- getters for B.z: ---\n\n(define-fun B.z ((this Ref)) Int\n  (z (deref-B this))\n)\n\n(define-fun B!z ((this Ref)) Int\n  (z (deref-B this))\n)\n\n; --- getters for B.a1: ---\n\n(define-fun B.a1 ((this Ref)) Ref\n  (a1 (deref-B this))\n)\n\n(define-fun B!a1 ((this Ref)) Ref\n  (a1 (deref-B this))\n)\n\n; --- getters for B.a2: ---\n\n(define-fun B!a2 ((this Ref)) Ref\n  (a2 (deref-B this))\n)\n\n; --- getters for B.a3: ---\n\n(define-fun B!a3 ((this Ref)) Ref\n  (a3 (deref-B this))\n)\n\n; --- getters for B.RESULT_B: ---\n\n(define-fun B!RESULT_B ((this Ref)) Int\n  (RESULT_B (deref-B this))\n)\n\n; ========================================\n; === Constructor parameter constants: ===\n; ========================================\n\n(declare-const const__1 Int)\n(declare-const const__2 Int)\n(declare-const const__3 Int)\n(declare-const const__4 Int)\n(declare-const const__5 Int)\n(declare-const const__6 Int)\n(declare-const const__7 Ref)\n(declare-const const__8 Ref)\n(declare-const const__9 Int)\n(declare-const const__10 Int)\n(declare-const const__11 Int)\n(declare-const const__12 Int)\n(declare-const const__13 Int)\n(declare-const const__14 Int)\n(declare-const const__15 Int)\n\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------------------\n;   Methods for class TopLevelDeclarations:\n; -------------------------------------------\n\n(define-fun TopLevelDeclarations.CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations.ERROR this))\n)\n\n(define-fun TopLevelDeclarations!CHECK ((this Ref)(b Bool)) Int\n  (ite b 42 (TopLevelDeclarations!ERROR this))\n)\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.sum ((this Ref)) Int\n  (+ (A.x this) (A.y this))\n)\n\n(define-fun A!sum ((this Ref)) Int\n  (+ (A!x this) (A!y this))\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.sum ((this Ref)) Int\n  (+ (B.x this) (B.y this))\n)\n\n(define-fun B!sum ((this Ref)) Int\n  (+ (B!x this) (B!y this))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (deref (TopLevelDeclarations!inst1A this)) (lift-A (mk-A 1 2 const__1)))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert363))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (= (deref (TopLevelDeclarations!inst2A this)) (lift-A (mk-A const__2 2 const__3)))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert364))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (= (deref (TopLevelDeclarations!inst1B this)) (lift-B (mk-B const__4 const__5 const__6 200 (TopLevelDeclarations!inst1A this) const__7 const__8 const__9)))\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert365))\n\n; --- Invariant 4: ---\n\n(define-fun TopLevelDeclarations.inv4 ((this Ref)) Bool\n  (= (TopLevelDeclarations!RESULT this) (TopLevelDeclarations!CHECK this (and (and (and (and (and (and (= (A.x (TopLevelDeclarations!inst1A this)) 1) (= (A.y (TopLevelDeclarations!inst1A this)) 2)) (= (A.x (TopLevelDeclarations!inst2A this)) 1)) (= (A.y (TopLevelDeclarations!inst2A this)) 2)) (= (A.x (B.a1 (TopLevelDeclarations!inst1B this))) (A.x (TopLevelDeclarations!inst1A this)))) (= (A.y (B.a1 (TopLevelDeclarations!inst1B this))) (A.y (TopLevelDeclarations!inst1A this)))) (= (B.z (TopLevelDeclarations!inst1B this)) 200))))\n)\n\n(assert (! (TopLevelDeclarations.inv4 0) :named _xkassert366))\n\n; --- Invariant 5: ---\n\n(define-fun TopLevelDeclarations.inv5 ((this Ref)) Bool\n  (deref-isa-A (TopLevelDeclarations!inst1A this))\n)\n\n(assert (! (TopLevelDeclarations.inv5 0) :named _xkassert367))\n\n; --- Invariant 6: ---\n\n(define-fun TopLevelDeclarations.inv6 ((this Ref)) Bool\n  (deref-isa-A (TopLevelDeclarations!inst2A this))\n)\n\n(assert (! (TopLevelDeclarations.inv6 0) :named _xkassert368))\n\n; --- Invariant 7: ---\n\n(define-fun TopLevelDeclarations.inv7 ((this Ref)) Bool\n  (deref-isa-B (TopLevelDeclarations!inst1B this))\n)\n\n(assert (! (TopLevelDeclarations.inv7 0) :named _xkassert369))\n\n; --- Invariant 8: ---\n\n(define-fun TopLevelDeclarations.inv8 ((this Ref)) Bool\n  (< (TopLevelDeclarations!ERROR this) 0)\n)\n\n(assert (! (TopLevelDeclarations.inv8 0) :named _xkassert370))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n(declare-const const-2-A A)\n(declare-const const-3-A A)\n(declare-const const-4-A A)\n(declare-const const-5-A A)\n(declare-const const-6-A A)\n(declare-const const-7-A A)\n(declare-const const-8-A A)\n(declare-const const-9-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!x this) 1)\n)\n\n(assert (! (A.inv1 1) :named _xkassert371))\n(assert (! (A.inv1 2) :named _xkassert372))\n(assert (! (A.inv1 3) :named _xkassert373))\n(assert (! (A.inv1 4) :named _xkassert374))\n(assert (! (A.inv1 5) :named _xkassert375))\n(assert (! (A.inv1 6) :named _xkassert376))\n(assert (! (A.inv1 7) :named _xkassert377))\n(assert (! (A.inv1 8) :named _xkassert378))\n(assert (! (A.inv1 9) :named _xkassert379))\n\n; --- Invariant 2: ---\n\n(define-fun A.inv2 ((this Ref)) Bool\n  (= (A!RESULT_A this) (TopLevelDeclarations!CHECK 0 (and (= (A!x this) 1) (< (A!x this) (A!y this)))))\n)\n\n(assert (! (A.inv2 1) :named _xkassert380))\n(assert (! (A.inv2 2) :named _xkassert381))\n(assert (! (A.inv2 3) :named _xkassert382))\n(assert (! (A.inv2 4) :named _xkassert383))\n(assert (! (A.inv2 5) :named _xkassert384))\n(assert (! (A.inv2 6) :named _xkassert385))\n(assert (! (A.inv2 7) :named _xkassert386))\n(assert (! (A.inv2 8) :named _xkassert387))\n(assert (! (A.inv2 9) :named _xkassert388))\n\n; --- Invariant 3: ---\n\n(define-fun A.inv3 ((this Ref)) Bool\n  (< (A!x this) (A!y this))\n)\n\n(assert (! (A.inv3 1) :named _xkassert389))\n(assert (! (A.inv3 2) :named _xkassert390))\n(assert (! (A.inv3 3) :named _xkassert391))\n(assert (! (A.inv3 4) :named _xkassert392))\n(assert (! (A.inv3 5) :named _xkassert393))\n(assert (! (A.inv3 6) :named _xkassert394))\n(assert (! (A.inv3 7) :named _xkassert395))\n(assert (! (A.inv3 8) :named _xkassert396))\n(assert (! (A.inv3 9) :named _xkassert397))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-10-B B)\n(declare-const const-11-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (B!x this) 1)\n)\n\n(assert (! (B.inv1 10) :named _xkassert398))\n(assert (! (B.inv1 11) :named _xkassert399))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (= (B!RESULT_A this) (TopLevelDeclarations!CHECK 0 (and (= (B!x this) 1) (< (B!x this) (B!y this)))))\n)\n\n(assert (! (B.inv2 10) :named _xkassert400))\n(assert (! (B.inv2 11) :named _xkassert401))\n\n; --- Invariant 3: ---\n\n(define-fun B.inv3 ((this Ref)) Bool\n  (= (deref (B!a2 this)) (lift-A (mk-A const__10 17 const__11)))\n)\n\n(assert (! (B.inv3 10) :named _xkassert402))\n(assert (! (B.inv3 11) :named _xkassert403))\n\n; --- Invariant 4: ---\n\n(define-fun B.inv4 ((this Ref)) Bool\n  (= (deref (B!a3 this)) (ite (> (B!z this) 3) (lift-A (mk-A const__12 (+ (B!z this) 9) const__13)) (lift-A (mk-A const__14 33 const__15))))\n)\n\n(assert (! (B.inv4 10) :named _xkassert404))\n(assert (! (B.inv4 11) :named _xkassert405))\n\n; --- Invariant 5: ---\n\n(define-fun B.inv5 ((this Ref)) Bool\n  (= (B!RESULT_B this) (TopLevelDeclarations!CHECK 0 (and (and (and (and (= (A.y (B!a2 this)) 17) (= (A.y (B!a3 this)) (+ (B!z this) 9))) (< (A.y (B!a1 this)) (B!z this))) (< (+ (B!y this) 10) (B!z this))) (> (B!sum this) 10))))\n)\n\n(assert (! (B.inv5 10) :named _xkassert406))\n(assert (! (B.inv5 11) :named _xkassert407))\n\n; --- Invariant 6: ---\n\n(define-fun B.inv6 ((this Ref)) Bool\n  (deref-isa-A (B!a1 this))\n)\n\n(assert (! (B.inv6 10) :named _xkassert408))\n(assert (! (B.inv6 11) :named _xkassert409))\n\n; --- Invariant 7: ---\n\n(define-fun B.inv7 ((this Ref)) Bool\n  (deref-isa-A (B!a2 this))\n)\n\n(assert (! (B.inv7 10) :named _xkassert410))\n(assert (! (B.inv7 11) :named _xkassert411))\n\n; --- Invariant 8: ---\n\n(define-fun B.inv8 ((this Ref)) Bool\n  (deref-isa-A (B!a3 this))\n)\n\n(assert (! (B.inv8 10) :named _xkassert412))\n(assert (! (B.inv8 11) :named _xkassert413))\n\n; --- Invariant 9: ---\n\n(define-fun B.inv9 ((this Ref)) Bool\n  (< (B!x this) (B!y this))\n)\n\n(assert (! (B.inv9 10) :named _xkassert414))\n(assert (! (B.inv9 11) :named _xkassert415))\n\n; --- Invariant 10: ---\n\n(define-fun B.inv10 ((this Ref)) Bool\n  (< (A.y (B!a1 this)) (B!z this))\n)\n\n(assert (! (B.inv10 10) :named _xkassert416))\n(assert (! (B.inv10 11) :named _xkassert417))\n\n; --- Invariant 11: ---\n\n(define-fun B.inv11 ((this Ref)) Bool\n  (< (+ (B!y this) 10) (B!z this))\n)\n\n(assert (! (B.inv11 10) :named _xkassert418))\n(assert (! (B.inv11 11) :named _xkassert419))\n\n; --- Invariant 12: ---\n\n(define-fun B.inv12 ((this Ref)) Bool\n  (> (B!sum this) 10)\n)\n\n(assert (! (B.inv12 10) :named _xkassert420))\n(assert (! (B.inv12 11) :named _xkassert421))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-A const-2-A))\n        3 (lift-A const-3-A))\n        4 (lift-A const-4-A))\n        5 (lift-A const-5-A))\n        6 (lift-A const-6-A))\n        7 (lift-A const-7-A))\n        8 (lift-A const-8-A))\n        9 (lift-A const-9-A))\n        10 (lift-B const-10-B))\n        11 (lift-B const-11-B))\n  )\n)\n\n","smtModel":"(define-fun const-1-A () A\n  (mk-A 1 2 42))\n(define-fun const-11-B () B\n  (mk-B 1 107 42 200 7 6 4 42))\n(define-fun const__3 () Int\n  42)\n(define-fun const-8-A () A\n  (mk-A 1 2439 42))\n(define-fun const-2-A () A\n  (mk-A 1 7721 42))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n(define-fun const__7 () Int\n  6)\n(define-fun const__6 () Int\n  42)\n(define-fun const__12 () Int\n  1)\n(define-fun const-7-A () A\n  (mk-A 1 2 42))\n(define-fun const__9 () Int\n  42)\n(define-fun const__10 () Int\n  1)\n(define-fun const-4-A () A\n  (mk-A 1 209 42))\n(define-fun const-5-A () A\n  (mk-A 1 8885 42))\n(define-fun const-9-A () A\n  (mk-A 1 17 42))\n(define-fun const__1 () Int\n  42)\n(define-fun const__13 () Int\n  42)\n(define-fun const__8 () Int\n  4)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!12))\n(define-fun const__2 () Int\n  1)\n(define-fun const__4 () Int\n  1)\n(define-fun const__11 () Int\n  42)\n(define-fun const-6-A () A\n  (mk-A 1 17 42))\n(define-fun const-3-A () A\n  (mk-A 1 1238 42))\n(define-fun const-10-B () B\n  (mk-B 1 8865 42 8876 7 9 5 42))\n(define-fun const__5 () Int\n  107)\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 1 7721 42))\n  (ite (= x!1 3) (lift-A (mk-A 1 1238 42))\n  (ite (= x!1 4) (lift-A (mk-A 1 209 42))\n  (ite (= x!1 1) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 5) (lift-A (mk-A 1 8885 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n  (ite (= x!1 6) (lift-A (mk-A 1 17 42))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1 1238 42))\n  (ite (= x!1 2) (lift-A (mk-A 1 7721 42))\n  (ite (= x!1 1) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n    null)))))\n(define-fun k!12 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1 1238 42))\n  (ite (= x!1 5) (lift-A (mk-A 1 8885 42))\n  (ite (= x!1 4) (lift-A (mk-A 1 209 42))\n  (ite (= x!1 11) (lift-B (mk-B 1 107 42 200 7 6 4 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n  (ite (= x!1 2) (lift-A (mk-A 1 7721 42))\n  (ite (= x!1 8) (lift-A (mk-A 1 2439 42))\n  (ite (= x!1 10) (lift-B (mk-B 1 8865 42 8876 7 9 5 42))\n  (ite (= x!1 1) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 9) (lift-A (mk-A 1 17 42))\n  (ite (= x!1 7) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 6) (lift-A (mk-A 1 17 42))\n    null)))))))))))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n    null))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1 1238 42))\n  (ite (= x!1 5) (lift-A (mk-A 1 8885 42))\n  (ite (= x!1 4) (lift-A (mk-A 1 209 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n  (ite (= x!1 8) (lift-A (mk-A 1 2439 42))\n  (ite (= x!1 2) (lift-A (mk-A 1 7721 42))\n  (ite (= x!1 1) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 7) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 6) (lift-A (mk-A 1 17 42))\n    null))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-A (mk-A 1 8885 42))\n  (ite (= x!1 2) (lift-A (mk-A 1 7721 42))\n  (ite (= x!1 3) (lift-A (mk-A 1 1238 42))\n  (ite (= x!1 1) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n  (ite (= x!1 4) (lift-A (mk-A 1 209 42))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 1 7721 42))\n  (ite (= x!1 1) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n    null))))\n(define-fun k!11 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1 1238 42))\n  (ite (= x!1 5) (lift-A (mk-A 1 8885 42))\n  (ite (= x!1 4) (lift-A (mk-A 1 209 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n  (ite (= x!1 2) (lift-A (mk-A 1 7721 42))\n  (ite (= x!1 8) (lift-A (mk-A 1 2439 42))\n  (ite (= x!1 10) (lift-B (mk-B 1 8865 42 8876 7 9 5 42))\n  (ite (= x!1 1) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 9) (lift-A (mk-A 1 17 42))\n  (ite (= x!1 7) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 6) (lift-A (mk-A 1 17 42))\n    null))))))))))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1 1238 42))\n  (ite (= x!1 5) (lift-A (mk-A 1 8885 42))\n  (ite (= x!1 4) (lift-A (mk-A 1 209 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n  (ite (= x!1 2) (lift-A (mk-A 1 7721 42))\n  (ite (= x!1 1) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 7) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 6) (lift-A (mk-A 1 17 42))\n    null)))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 1 7721 42))\n  (ite (= x!1 3) (lift-A (mk-A 1 1238 42))\n  (ite (= x!1 1) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n  (ite (= x!1 4) (lift-A (mk-A 1 209 42))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n    null)))\n(define-fun k!10 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1 1238 42))\n  (ite (= x!1 5) (lift-A (mk-A 1 8885 42))\n  (ite (= x!1 4) (lift-A (mk-A 1 209 42))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations (- 1) 7 1 11 42))\n  (ite (= x!1 2) (lift-A (mk-A 1 7721 42))\n  (ite (= x!1 8) (lift-A (mk-A 1 2439 42))\n  (ite (= x!1 1) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 9) (lift-A (mk-A 1 17 42))\n  (ite (= x!1 7) (lift-A (mk-A 1 2 42))\n  (ite (= x!1 6) (lift-A (mk-A 1 17 42))\n    null)))))))))))"},"testsmt9.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"y","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"a","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"y"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"x","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"name":"y","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"a","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"y","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]}],"type":"Model"},"typeChecks":true,"name":"testsmt9.k","model":"\nclass A {\n  x:Int\n\n  req x > 0\n}\n\nclass B extending A {\n  y:Int\n  a:A\n\n  req y = x + 1\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)(a Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (x (deref-B this)))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.x: ---\n\n(define-fun B.x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n(define-fun B!x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n; --- getters for B.y: ---\n\n(define-fun B.y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n(define-fun B!y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; --- getters for B.a: ---\n\n(define-fun B.a ((this Ref)) Ref\n  (a (deref-B this))\n)\n\n(define-fun B!a ((this Ref)) Ref\n  (a (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n(declare-const const-2-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (> (A!x this) 0)\n)\n\n(assert (! (A.inv1 1) :named _xkassert579))\n(assert (! (A.inv1 2) :named _xkassert580))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (deref-isa-A (B!a this))\n)\n\n(assert (! (B.inv1 3) :named _xkassert581))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (> (B!x this) 0)\n)\n\n(assert (! (B.inv2 3) :named _xkassert582))\n\n; --- Invariant 3: ---\n\n(define-fun B.inv3 ((this Ref)) Bool\n  (= (B!y this) (+ (B!x this) 1))\n)\n\n(assert (! (B.inv3 3) :named _xkassert583))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-A const-2-A))\n        3 (lift-B const-3-B))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-1-A () A\n  (mk-A 7720))\n(define-fun const-2-A () A\n  (mk-A 2438))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!4))\n(define-fun const-3-B () B\n  (mk-B 1237 1238 2))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 2438))\n  (ite (= x!1 1) (lift-A (mk-A 7720))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-B (mk-B 1237 1238 2))\n  (ite (= x!1 2) (lift-A (mk-A 2438))\n  (ite (= x!1 1) (lift-A (mk-A 7720))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 7720))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"testsmt7.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"a","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"a"},{"type":"ElementValue","element":"k"}]}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"iA","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"b","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"g","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"iA"},"f"]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"iA"},"a"]},{"type":"ElementValue","element":"b"}]},{"type":"ElementValue","element":"k"}]}]}]}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"iA","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"c","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"h","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"iA"},"f"]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"iA"},"a"]},{"type":"ElementValue","element":"c"}]},{"type":"ElementValue","element":"k"}]}]}]}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]},"name":"iB","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["C"],"type":"QualifiedName"}]},"name":"iC","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"d","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},4]},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"iB"},"iA"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"iC"},"iA"]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"i","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"iB"},"iA"]},"a"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"iB"},"b"]}]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"iC"},"c"]}]},{"type":"ElementValue","element":"d"}]},{"type":"ElementValue","element":"k"}]}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Master","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["D"],"type":"QualifiedName"}]},"name":"d","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"main","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"d"},"iB"]},"iA"]},"f"]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}]},{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"d"},"iB"]},"g"]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]}]}]},{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"d"},"i"]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]}]}]}]}}],"spec":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"main"},{"type":"ElementValue","element":"main"}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"i":1,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"},"type":"BinExp"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"iA","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"i":2,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"g","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"op":"Plus","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"ident":"a","exp":{"ident":"iA","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"f","exp":{"ident":"iA","type":"IdentExp"},"type":"DotExp"},"type":"FunApplExp"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"iA","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"c","expr":{"i":3,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"h","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"op":"Plus","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"c","type":"IdentExp"},"exp1":{"ident":"a","exp":{"ident":"iA","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"}}],"exp1":{"ident":"f","exp":{"ident":"iA","type":"IdentExp"},"type":"DotExp"},"type":"FunApplExp"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"},"name":"iB","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["C"],"type":"QualifiedName"},"type":"IdentType"},"name":"iC","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"d","expr":{"i":4,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"ident":"iA","exp":{"ident":"iC","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"iA","exp":{"ident":"iB","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"ident":"i","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"d","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"c","exp":{"ident":"iC","type":"IdentExp"},"type":"DotExp"},"exp1":{"op":"Plus","exp2":{"ident":"b","exp":{"ident":"iB","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"a","exp":{"ident":"iA","exp":{"ident":"iB","type":"IdentExp"},"type":"DotExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"Master","members":[{"ty":{"args":[],"ident":{"names":["D"],"type":"QualifiedName"},"type":"IdentType"},"name":"d","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"main","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"args":[{"type":"PositionalArgument","exp":{"i":3,"type":"LiteralInteger"}}],"exp1":{"ident":"i","exp":{"ident":"d","type":"IdentExp"},"type":"DotExp"},"type":"FunApplExp"},"exp1":{"op":"Plus","exp2":{"args":[{"type":"PositionalArgument","exp":{"i":2,"type":"LiteralInteger"}}],"exp1":{"ident":"g","exp":{"ident":"iB","exp":{"ident":"d","type":"IdentExp"},"type":"DotExp"},"type":"DotExp"},"type":"FunApplExp"},"exp1":{"args":[{"type":"PositionalArgument","exp":{"i":1,"type":"LiteralInteger"}}],"exp1":{"ident":"f","exp":{"ident":"iA","exp":{"ident":"iB","exp":{"ident":"d","type":"IdentExp"},"type":"DotExp"},"type":"DotExp"},"type":"DotExp"},"type":"FunApplExp"},"type":"BinExp"},"type":"BinExp"}}],"spec":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT","expr":{"op":"Plus","exp2":{"ident":"main","type":"IdentExp"},"exp1":{"ident":"main","type":"IdentExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt7.k","model":"\nclass A {\n  a:Int = 1\n\n  fun f(k:Int) : Int\n  {\n    a + k\n  }\n}\n\nclass B {\n  iA:A\n  b:Int = 2\n\n  fun g(k:Int) : Int\n  {\n    iA.f(iA.a + b + k)\n  }\n}\n\nclass C {\n  iA:A\n  c:Int = 3\n\n  fun h(k:Int) : Int\n  {\n    iA.f(iA.a + c + k)\n  }\n}\n\nclass D {\n  iB:B\n  iC:C\n  d:Int = 4\n\n  req iB.iA = iC.iA\n\n  fun i(k:Int) : Int\n  {\n    iB.iA.a + iB.b + iC.c + d + k\n  }\n}\n\nclass Master {\n  d:D\n\n  fun main : Int\n  {\n    d.iB.iA.f(1) + d.iB.g(2) + d.i(3)\n  }\n  RESULT:Int = main + main\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (iA Ref)(b Int)))))\n(declare-datatypes () ((C (mk-C (iA Ref)(c Int)))))\n(declare-datatypes () ((D (mk-D (iB Ref)(iC Ref)(d Int)))))\n(declare-datatypes () ((Master (mk-Master (d Ref)(RESULT Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-Master (sel-Master Master))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-Master ((this Ref)) Bool\n  (is-lift-Master (deref this))\n)\n\n(define-fun deref-Master ((this Ref)) Master\n  (sel-Master (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-Master ((this Ref)) Bool\n  (deref-is-Master this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A.a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.iA: ---\n\n(define-fun B.iA ((this Ref)) Ref\n  (iA (deref-B this))\n)\n\n(define-fun B!iA ((this Ref)) Ref\n  (iA (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B.b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.iA: ---\n\n(define-fun C.iA ((this Ref)) Ref\n  (iA (deref-C this))\n)\n\n(define-fun C!iA ((this Ref)) Ref\n  (iA (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C.c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.iB: ---\n\n(define-fun D.iB ((this Ref)) Ref\n  (iB (deref-D this))\n)\n\n(define-fun D!iB ((this Ref)) Ref\n  (iB (deref-D this))\n)\n\n; --- getters for D.iC: ---\n\n(define-fun D.iC ((this Ref)) Ref\n  (iC (deref-D this))\n)\n\n(define-fun D!iC ((this Ref)) Ref\n  (iC (deref-D this))\n)\n\n; --- getters for D.d: ---\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; -----------------------------\n;   Getters for class Master:\n; -----------------------------\n\n; --- getters for Master.d: ---\n\n(define-fun Master.d ((this Ref)) Ref\n  (d (deref-Master this))\n)\n\n(define-fun Master!d ((this Ref)) Ref\n  (d (deref-Master this))\n)\n\n; --- getters for Master.RESULT: ---\n\n(define-fun Master!RESULT ((this Ref)) Int\n  (RESULT (deref-Master this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.f ((this Ref)(k Int)) Int\n  (+ (A.a this) k)\n)\n\n(define-fun A!f ((this Ref)(k Int)) Int\n  (+ (A!a this) k)\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.g ((this Ref)(k Int)) Int\n  (A.f (B.iA this) (+ (+ (A.a (B.iA this)) (B.b this)) k))\n)\n\n(define-fun B!g ((this Ref)(k Int)) Int\n  (A.f (B!iA this) (+ (+ (A.a (B!iA this)) (B!b this)) k))\n)\n\n; ------------------------\n;   Methods for class C:\n; ------------------------\n\n(define-fun C.h ((this Ref)(k Int)) Int\n  (A.f (C.iA this) (+ (+ (A.a (C.iA this)) (C.c this)) k))\n)\n\n(define-fun C!h ((this Ref)(k Int)) Int\n  (A.f (C!iA this) (+ (+ (A.a (C!iA this)) (C!c this)) k))\n)\n\n; ------------------------\n;   Methods for class D:\n; ------------------------\n\n(define-fun D.i ((this Ref)(k Int)) Int\n  (+ (+ (+ (+ (A.a (B.iA (D.iB this))) (B.b (D.iB this))) (C.c (D.iC this))) (D.d this)) k)\n)\n\n(define-fun D!i ((this Ref)(k Int)) Int\n  (+ (+ (+ (+ (A.a (B.iA (D!iB this))) (B.b (D!iB this))) (C.c (D!iC this))) (D!d this)) k)\n)\n\n; -----------------------------\n;   Methods for class Master:\n; -----------------------------\n\n(define-fun Master.main ((this Ref)) Int\n  (+ (+ (A.f (B.iA (D.iB (Master.d this))) 1) (B.g (D.iB (Master.d this)) 2)) (D.i (Master.d this) 3))\n)\n\n(define-fun Master!main ((this Ref)) Int\n  (+ (+ (A.f (B.iA (D.iB (Master!d this))) 1) (B.g (D.iB (Master!d this)) 2)) (D.i (Master!d this) 3))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-A A)\n(declare-const const-3-A A)\n(declare-const const-4-A A)\n(declare-const const-5-A A)\n(declare-const const-6-A A)\n(declare-const const-7-A A)\n(declare-const const-8-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!a this) 1)\n)\n\n(assert (! (A.inv1 2) :named _xkassert536))\n(assert (! (A.inv1 3) :named _xkassert537))\n(assert (! (A.inv1 4) :named _xkassert538))\n(assert (! (A.inv1 5) :named _xkassert539))\n(assert (! (A.inv1 6) :named _xkassert540))\n(assert (! (A.inv1 7) :named _xkassert541))\n(assert (! (A.inv1 8) :named _xkassert542))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-9-B B)\n(declare-const const-10-B B)\n(declare-const const-11-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (B!b this) 2)\n)\n\n(assert (! (B.inv1 9) :named _xkassert543))\n(assert (! (B.inv1 10) :named _xkassert544))\n(assert (! (B.inv1 11) :named _xkassert545))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (deref-isa-A (B!iA this))\n)\n\n(assert (! (B.inv2 9) :named _xkassert546))\n(assert (! (B.inv2 10) :named _xkassert547))\n(assert (! (B.inv2 11) :named _xkassert548))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-12-C C)\n(declare-const const-13-C C)\n(declare-const const-14-C C)\n\n; --- Invariant 1: ---\n\n(define-fun C.inv1 ((this Ref)) Bool\n  (= (C!c this) 3)\n)\n\n(assert (! (C.inv1 12) :named _xkassert549))\n(assert (! (C.inv1 13) :named _xkassert550))\n(assert (! (C.inv1 14) :named _xkassert551))\n\n; --- Invariant 2: ---\n\n(define-fun C.inv2 ((this Ref)) Bool\n  (deref-isa-A (C!iA this))\n)\n\n(assert (! (C.inv2 12) :named _xkassert552))\n(assert (! (C.inv2 13) :named _xkassert553))\n(assert (! (C.inv2 14) :named _xkassert554))\n\n\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-15-D D)\n(declare-const const-16-D D)\n\n; --- Invariant 1: ---\n\n(define-fun D.inv1 ((this Ref)) Bool\n  (= (D!d this) 4)\n)\n\n(assert (! (D.inv1 15) :named _xkassert555))\n(assert (! (D.inv1 16) :named _xkassert556))\n\n; --- Invariant 2: ---\n\n(define-fun D.inv2 ((this Ref)) Bool\n  (deref-isa-B (D!iB this))\n)\n\n(assert (! (D.inv2 15) :named _xkassert557))\n(assert (! (D.inv2 16) :named _xkassert558))\n\n; --- Invariant 3: ---\n\n(define-fun D.inv3 ((this Ref)) Bool\n  (deref-isa-C (D!iC this))\n)\n\n(assert (! (D.inv3 15) :named _xkassert559))\n(assert (! (D.inv3 16) :named _xkassert560))\n\n; --- Invariant 4: ---\n\n(define-fun D.inv4 ((this Ref)) Bool\n  (= (B.iA (D!iB this)) (C.iA (D!iC this)))\n)\n\n(assert (! (D.inv4 15) :named _xkassert561))\n(assert (! (D.inv4 16) :named _xkassert562))\n\n\n\n; -------------------------------\n;   Invariant for class Master:\n; -------------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-Master Master)\n\n; --- Invariant 1: ---\n\n(define-fun Master.inv1 ((this Ref)) Bool\n  (= (Master!RESULT this) (+ (Master!main this) (Master!main this)))\n)\n\n(assert (! (Master.inv1 1) :named _xkassert563))\n\n; --- Invariant 2: ---\n\n(define-fun Master.inv2 ((this Ref)) Bool\n  (deref-isa-D (Master!d this))\n)\n\n(assert (! (Master.inv2 1) :named _xkassert564))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        2 (lift-A const-2-A))\n        3 (lift-A const-3-A))\n        4 (lift-A const-4-A))\n        5 (lift-A const-5-A))\n        6 (lift-A const-6-A))\n        7 (lift-A const-7-A))\n        8 (lift-A const-8-A))\n        9 (lift-B const-9-B))\n        10 (lift-B const-10-B))\n        11 (lift-B const-11-B))\n        12 (lift-C const-12-C))\n        13 (lift-C const-13-C))\n        14 (lift-C const-14-C))\n        15 (lift-D const-15-D))\n        16 (lift-D const-16-D))\n        1 (lift-Master const-1-Master))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-8-A () A\n  (mk-A 1))\n(define-fun const-13-C () C\n  (mk-C 8 3))\n(define-fun const-14-C () C\n  (mk-C 5 3))\n(define-fun const-16-D () D\n  (mk-D 10 14 4))\n(define-fun const-2-A () A\n  (mk-A 1))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!17))\n(define-fun const-1-Master () Master\n  (mk-Master 16 42))\n(define-fun const-9-B () B\n  (mk-B 8 2))\n(define-fun const-12-C () C\n  (mk-C 8 3))\n(define-fun const-7-A () A\n  (mk-A 1))\n(define-fun const-6-A () A\n  (mk-A 1))\n(define-fun const-5-A () A\n  (mk-A 1))\n(define-fun const-4-A () A\n  (mk-A 1))\n(define-fun const-15-D () D\n  (mk-D 9 13 4))\n(define-fun const-11-B () B\n  (mk-B 5 2))\n(define-fun const-10-B () B\n  (mk-B 5 2))\n(define-fun const-3-A () A\n  (mk-A 1))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 7) (lift-A (mk-A 1))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n    null))))))))\n(define-fun k!12 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 12) (lift-C (mk-C 8 3))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n  (ite (= x!1 11) (lift-B (mk-B 5 2))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 8) (lift-A (mk-A 1))\n  (ite (= x!1 10) (lift-B (mk-B 5 2))\n  (ite (= x!1 9) (lift-B (mk-B 8 2))\n  (ite (= x!1 7) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-A (mk-A 1))\n    null)))))))))))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!17 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 11) (lift-B (mk-B 5 2))\n  (ite (= x!1 15) (lift-D (mk-D 9 13 4))\n  (ite (= x!1 10) (lift-B (mk-B 5 2))\n  (ite (= x!1 1) (lift-Master (mk-Master 16 42))\n  (ite (= x!1 9) (lift-B (mk-B 8 2))\n  (ite (= x!1 16) (lift-D (mk-D 10 14 4))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n  (ite (= x!1 12) (lift-C (mk-C 8 3))\n  (ite (= x!1 14) (lift-C (mk-C 5 3))\n  (ite (= x!1 13) (lift-C (mk-C 8 3))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 8) (lift-A (mk-A 1))\n  (ite (= x!1 7) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-A (mk-A 1))\n    null))))))))))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 6) (lift-A (mk-A 1))\n    null)))))))\n(define-fun k!11 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 11) (lift-B (mk-B 5 2))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 8) (lift-A (mk-A 1))\n  (ite (= x!1 10) (lift-B (mk-B 5 2))\n  (ite (= x!1 9) (lift-B (mk-B 8 2))\n  (ite (= x!1 7) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-A (mk-A 1))\n    null))))))))))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!16 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 11) (lift-B (mk-B 5 2))\n  (ite (= x!1 15) (lift-D (mk-D 9 13 4))\n  (ite (= x!1 10) (lift-B (mk-B 5 2))\n  (ite (= x!1 9) (lift-B (mk-B 8 2))\n  (ite (= x!1 16) (lift-D (mk-D 10 14 4))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n  (ite (= x!1 12) (lift-C (mk-C 8 3))\n  (ite (= x!1 14) (lift-C (mk-C 5 3))\n  (ite (= x!1 13) (lift-C (mk-C 8 3))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 8) (lift-A (mk-A 1))\n  (ite (= x!1 7) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-A (mk-A 1))\n    null)))))))))))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 4) (lift-A (mk-A 1))\n    null))))))\n(define-fun k!10 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 8) (lift-A (mk-A 1))\n  (ite (= x!1 10) (lift-B (mk-B 5 2))\n  (ite (= x!1 9) (lift-B (mk-B 8 2))\n  (ite (= x!1 7) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-A (mk-A 1))\n    null)))))))))))\n(define-fun k!15 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 11) (lift-B (mk-B 5 2))\n  (ite (= x!1 15) (lift-D (mk-D 9 13 4))\n  (ite (= x!1 10) (lift-B (mk-B 5 2))\n  (ite (= x!1 9) (lift-B (mk-B 8 2))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n  (ite (= x!1 12) (lift-C (mk-C 8 3))\n  (ite (= x!1 14) (lift-C (mk-C 5 3))\n  (ite (= x!1 13) (lift-C (mk-C 8 3))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 8) (lift-A (mk-A 1))\n  (ite (= x!1 7) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-A (mk-A 1))\n    null))))))))))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 4) (lift-A (mk-A 1))\n    null)))))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 8) (lift-A (mk-A 1))\n  (ite (= x!1 9) (lift-B (mk-B 8 2))\n  (ite (= x!1 7) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-A (mk-A 1))\n    null))))))))))\n(define-fun k!14 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 11) (lift-B (mk-B 5 2))\n  (ite (= x!1 10) (lift-B (mk-B 5 2))\n  (ite (= x!1 9) (lift-B (mk-B 8 2))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n  (ite (= x!1 12) (lift-C (mk-C 8 3))\n  (ite (= x!1 14) (lift-C (mk-C 5 3))\n  (ite (= x!1 13) (lift-C (mk-C 8 3))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 8) (lift-A (mk-A 1))\n  (ite (= x!1 7) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-A (mk-A 1))\n    null)))))))))))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))))\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 8) (lift-A (mk-A 1))\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 7) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-A (mk-A 1))\n    null)))))))))\n(define-fun k!13 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 1))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 4) (lift-A (mk-A 1))\n  (ite (= x!1 11) (lift-B (mk-B 5 2))\n  (ite (= x!1 13) (lift-C (mk-C 8 3))\n  (ite (= x!1 12) (lift-C (mk-C 8 3))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 8) (lift-A (mk-A 1))\n  (ite (= x!1 10) (lift-B (mk-B 5 2))\n  (ite (= x!1 9) (lift-B (mk-B 8 2))\n  (ite (= x!1 7) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-A (mk-A 1))\n    null))))))))))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"testsmt13.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"a","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"b","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"c","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"d","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"assignment":false,"name":"a","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"C"},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"a",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"b",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]},{"type":"Expression","operand":[{"type":"NamedArgument","element":"ElementValue"},"c",{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]}]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"TypeCastCheckExp","element":"ElementValue"},"false",{"type":"ElementValue","element":"a"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"TypeCastCheckExp","element":"ElementValue"},"false",{"type":"ElementValue","element":"a"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"TypeCastCheckExp","element":"ElementValue"},"false",{"type":"ElementValue","element":"a"},{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["C"],"type":"QualifiedName"}]}]}}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"a","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"name":"b","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"IntType"},"name":"c","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"type":"IntType"},"name":"d","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"assignment":false,"name":"a","expr":{"args":[{"ident":"a","type":"NamedArgument","exp":{"i":1,"type":"LiteralInteger"}},{"ident":"b","type":"NamedArgument","exp":{"i":2,"type":"LiteralInteger"}},{"ident":"c","type":"NamedArgument","exp":{"i":3,"type":"LiteralInteger"}}],"exp1":{"ident":"C","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"cast":"false","ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"type":"TypeCastCheckExp","exp":{"ident":"a","type":"IdentExp"}}},{"type":"ConstraintDecl","exp":{"cast":"false","ty":{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"},"type":"TypeCastCheckExp","exp":{"ident":"a","type":"IdentExp"}}},{"type":"ConstraintDecl","exp":{"cast":"false","ty":{"args":[],"ident":{"names":["C"],"type":"QualifiedName"},"type":"IdentType"},"type":"TypeCastCheckExp","exp":{"ident":"a","type":"IdentExp"}}}],"type":"Model"},"typeChecks":true,"name":"testsmt13.k","model":"\nclass A {\n  a:Int\n}\n\nclass B extending A {\n  b:Int\n}\n\nclass C extending B {\n  c:Int\n}\n\nclass D {\n  d:Int\n}\n\na:A = C(a :: 1,b :: 2,c :: 3)\n\nreq a is A\n\nreq a is B\n\nreq a is C\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (a Ref)))))\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)))))\n(declare-datatypes () ((D (mk-D (d Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.a: ---\n\n(define-fun TopLevelDeclarations!a ((this Ref)) Ref\n  (a (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (ite (deref-is-B this) (a (deref-B this))\n  (a (deref-C this))))\n)\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B.a ((this Ref)) Int\n  (ite (deref-is-B this) (a (deref-B this))\n  (a (deref-C this)))\n)\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B.b ((this Ref)) Int\n  (ite (deref-is-B this) (b (deref-B this))\n  (b (deref-C this)))\n)\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.a: ---\n\n(define-fun C.a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n(define-fun C!a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n; --- getters for C.b: ---\n\n(define-fun C.b ((this Ref)) Int\n  (b (deref-C this))\n)\n\n(define-fun C!b ((this Ref)) Int\n  (b (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C.c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.d: ---\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (deref (TopLevelDeclarations!a this)) (lift-C (mk-C 1 2 3)))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert288))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-A (TopLevelDeclarations!a this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert289))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (deref-isa-A (TopLevelDeclarations!a this))\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert290))\n\n; --- Invariant 4: ---\n\n(define-fun TopLevelDeclarations.inv4 ((this Ref)) Bool\n  (deref-isa-B (TopLevelDeclarations!a this))\n)\n\n(assert (! (TopLevelDeclarations.inv4 0) :named _xkassert291))\n\n; --- Invariant 5: ---\n\n(define-fun TopLevelDeclarations.inv5 ((this Ref)) Bool\n  (deref-isa-C (TopLevelDeclarations!a this))\n)\n\n(assert (! (TopLevelDeclarations.inv5 0) :named _xkassert292))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n(declare-const const-2-A A)\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-B B)\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-C C)\n\n\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-5-D D)\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-A const-2-A))\n        3 (lift-B const-3-B))\n        4 (lift-C const-4-C))\n        5 (lift-D const-5-D))\n  )\n)\n\n","smtModel":"(define-fun const-1-A () A\n  (mk-A 6))\n(define-fun const-2-A () A\n  (mk-A 7))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 4))\n(define-fun const-5-D () D\n  (mk-D 10))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!6))\n(define-fun const-3-B () B\n  (mk-B 8 9))\n(define-fun const-4-C () C\n  (mk-C 1 2 3))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 7))\n  (ite (= x!1 1) (lift-A (mk-A 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-B (mk-B 8 9))\n  (ite (= x!1 2) (lift-A (mk-A 7))\n  (ite (= x!1 1) (lift-A (mk-A 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4))\n    null))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-B (mk-B 8 9))\n  (ite (= x!1 2) (lift-A (mk-A 7))\n  (ite (= x!1 1) (lift-A (mk-A 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4))\n  (ite (= x!1 4) (lift-C (mk-C 1 2 3))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4))\n    null)))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-D (mk-D 10))\n  (ite (= x!1 3) (lift-B (mk-B 8 9))\n  (ite (= x!1 2) (lift-A (mk-A 7))\n  (ite (= x!1 1) (lift-A (mk-A 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4))\n  (ite (= x!1 4) (lift-C (mk-C 1 2 3))\n    null)))))))"},"inheritance7.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]},"name":"j","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"j"},"yy"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"yy","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GT",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"i"},"x"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"i","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","keyword":"b","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"entityToken":"b","typeparams":[],"ident":"C","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"z","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"foo","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"ReturnExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}]}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["C"],"type":"QualifiedName"}]},"name":"bobj","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"bobj"},"z"]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"y","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"x","type":"PropertyDecl","modifiers":[]},{"ty":{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"},"name":"j","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"yy","exp":{"ident":"j","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"name":"yy","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"GT","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"ident":"x","exp":{"ident":"i","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"i","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","keyword":"b","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"b","typeparams":[],"ident":"C","members":[{"ty":{"type":"IntType"},"name":"z","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"foo","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"ReturnExp","exp":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["C"],"type":"QualifiedName"},"type":"IdentType"},"name":"bobj","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"z","exp":{"ident":"bobj","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"name":"y","type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"inheritance7.k","model":"\nclass A {\n  x:Int\n  j:B\n\n  req x > 0\n\n  req j.yy > 10\n}\n\nclass <b> B extending A {\n  yy:Int\n\n  req i.x > 10\n  i:A\n}\n\nb C {\n  z:Int\n\n  fun foo(x:Int) : Int\n  {\n    return x + 1\n  }\n}\n\nbobj:C\n\nreq bobj.z = 1\n\ny:Int\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (bobj Ref)(y Int)))))\n(declare-datatypes () ((A (mk-A (x Int)(j Ref)))))\n(declare-datatypes () ((B (mk-B (x Int)(j Ref)(yy Int)(i Ref)))))\n(declare-datatypes () ((C (mk-C (x Int)(j Ref)(yy Int)(i Ref)(z Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.bobj: ---\n\n(define-fun TopLevelDeclarations!bobj ((this Ref)) Ref\n  (bobj (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (ite (deref-is-B this) (x (deref-B this))\n  (x (deref-C this))))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; --- getters for A.j: ---\n\n(define-fun A!j ((this Ref)) Ref\n  (j (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.x: ---\n\n(define-fun B.x ((this Ref)) Int\n  (ite (deref-is-B this) (x (deref-B this))\n  (x (deref-C this)))\n)\n\n(define-fun B!x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n; --- getters for B.j: ---\n\n(define-fun B!j ((this Ref)) Ref\n  (j (deref-B this))\n)\n\n; --- getters for B.yy: ---\n\n(define-fun B.yy ((this Ref)) Int\n  (ite (deref-is-B this) (yy (deref-B this))\n  (yy (deref-C this)))\n)\n\n; --- getters for B.i: ---\n\n(define-fun B!i ((this Ref)) Ref\n  (i (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.x: ---\n\n(define-fun C!x ((this Ref)) Int\n  (x (deref-C this))\n)\n\n; --- getters for C.j: ---\n\n(define-fun C!j ((this Ref)) Ref\n  (j (deref-C this))\n)\n\n; --- getters for C.i: ---\n\n(define-fun C!i ((this Ref)) Ref\n  (i (deref-C this))\n)\n\n; --- getters for C.z: ---\n\n(define-fun C.z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n(define-fun C!z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class C:\n; ------------------------\n\n(define-fun C.foo ((this Ref)(x Int)) Int\n  (+ x 1)\n)\n\n(define-fun C!foo ((this Ref)(x Int)) Int\n  (+ x 1)\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (deref-isa-C (TopLevelDeclarations!bobj this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert107))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (= (C.z (TopLevelDeclarations!bobj this)) 1)\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert108))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n(declare-const const-2-A A)\n(declare-const const-3-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (deref-isa-B (A!j this))\n)\n\n(assert (! (A.inv1 1) :named _xkassert109))\n(assert (! (A.inv1 2) :named _xkassert110))\n(assert (! (A.inv1 3) :named _xkassert111))\n\n; --- Invariant 2: ---\n\n(define-fun A.inv2 ((this Ref)) Bool\n  (> (A!x this) 0)\n)\n\n(assert (! (A.inv2 1) :named _xkassert112))\n(assert (! (A.inv2 2) :named _xkassert113))\n(assert (! (A.inv2 3) :named _xkassert114))\n\n; --- Invariant 3: ---\n\n(define-fun A.inv3 ((this Ref)) Bool\n  (> (B.yy (A!j this)) 10)\n)\n\n(assert (! (A.inv3 1) :named _xkassert115))\n(assert (! (A.inv3 2) :named _xkassert116))\n(assert (! (A.inv3 3) :named _xkassert117))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-B B)\n(declare-const const-5-B B)\n(declare-const const-6-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (deref-isa-B (B!j this))\n)\n\n(assert (! (B.inv1 4) :named _xkassert118))\n(assert (! (B.inv1 5) :named _xkassert119))\n(assert (! (B.inv1 6) :named _xkassert120))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (deref-isa-A (B!i this))\n)\n\n(assert (! (B.inv2 4) :named _xkassert121))\n(assert (! (B.inv2 5) :named _xkassert122))\n(assert (! (B.inv2 6) :named _xkassert123))\n\n; --- Invariant 3: ---\n\n(define-fun B.inv3 ((this Ref)) Bool\n  (> (B!x this) 0)\n)\n\n(assert (! (B.inv3 4) :named _xkassert124))\n(assert (! (B.inv3 5) :named _xkassert125))\n(assert (! (B.inv3 6) :named _xkassert126))\n\n; --- Invariant 4: ---\n\n(define-fun B.inv4 ((this Ref)) Bool\n  (> (B.yy (B!j this)) 10)\n)\n\n(assert (! (B.inv4 4) :named _xkassert127))\n(assert (! (B.inv4 5) :named _xkassert128))\n(assert (! (B.inv4 6) :named _xkassert129))\n\n; --- Invariant 5: ---\n\n(define-fun B.inv5 ((this Ref)) Bool\n  (> (A.x (B!i this)) 10)\n)\n\n(assert (! (B.inv5 4) :named _xkassert130))\n(assert (! (B.inv5 5) :named _xkassert131))\n(assert (! (B.inv5 6) :named _xkassert132))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-7-C C)\n(declare-const const-8-C C)\n\n; --- Invariant 1: ---\n\n(define-fun C.inv1 ((this Ref)) Bool\n  (deref-isa-B (C!j this))\n)\n\n(assert (! (C.inv1 7) :named _xkassert133))\n(assert (! (C.inv1 8) :named _xkassert134))\n\n; --- Invariant 2: ---\n\n(define-fun C.inv2 ((this Ref)) Bool\n  (deref-isa-A (C!i this))\n)\n\n(assert (! (C.inv2 7) :named _xkassert135))\n(assert (! (C.inv2 8) :named _xkassert136))\n\n; --- Invariant 3: ---\n\n(define-fun C.inv3 ((this Ref)) Bool\n  (> (C!x this) 0)\n)\n\n(assert (! (C.inv3 7) :named _xkassert137))\n(assert (! (C.inv3 8) :named _xkassert138))\n\n; --- Invariant 4: ---\n\n(define-fun C.inv4 ((this Ref)) Bool\n  (> (B.yy (C!j this)) 10)\n)\n\n(assert (! (C.inv4 7) :named _xkassert139))\n(assert (! (C.inv4 8) :named _xkassert140))\n\n; --- Invariant 5: ---\n\n(define-fun C.inv5 ((this Ref)) Bool\n  (> (A.x (C!i this)) 10)\n)\n\n(assert (! (C.inv5 7) :named _xkassert141))\n(assert (! (C.inv5 8) :named _xkassert142))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-A const-2-A))\n        3 (lift-A const-3-A))\n        4 (lift-B const-4-B))\n        5 (lift-B const-5-B))\n        6 (lift-B const-6-B))\n        7 (lift-C const-7-C))\n        8 (lift-C const-8-C))\n  )\n)\n\n","smtModel":"(define-fun const-1-A () A\n  (mk-A 11 6))\n(define-fun const-4-B () B\n  (mk-B 1797 5 2448 6))\n(define-fun const-5-B () B\n  (mk-B 1153 6 460 5))\n(define-fun const-7-C () C\n  (mk-C 536 6 10 1 12))\n(define-fun const-6-B () B\n  (mk-B 8109 6 6294 2))\n(define-fun const-2-A () A\n  (mk-A 3008 4))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 8 9))\n(define-fun const-8-C () C\n  (mk-C 5921 6 13 2 1))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!9))\n(define-fun const-3-A () A\n  (mk-A 7720 6))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 3008 4))\n  (ite (= x!1 3) (lift-A (mk-A 7720 6))\n  (ite (= x!1 4) (lift-B (mk-B 1797 5 2448 6))\n  (ite (= x!1 1) (lift-A (mk-A 11 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8 9))\n  (ite (= x!1 5) (lift-B (mk-B 1153 6 460 5))\n  (ite (= x!1 6) (lift-B (mk-B 8109 6 6294 2))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 7720 6))\n  (ite (= x!1 2) (lift-A (mk-A 3008 4))\n  (ite (= x!1 1) (lift-A (mk-A 11 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8 9))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8 9))\n    null))\n(define-fun k!9 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 7720 6))\n  (ite (= x!1 5) (lift-B (mk-B 1153 6 460 5))\n  (ite (= x!1 4) (lift-B (mk-B 1797 5 2448 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8 9))\n  (ite (= x!1 2) (lift-A (mk-A 3008 4))\n  (ite (= x!1 8) (lift-C (mk-C 5921 6 13 2 1))\n  (ite (= x!1 1) (lift-A (mk-A 11 6))\n  (ite (= x!1 7) (lift-C (mk-C 536 6 10 1 12))\n  (ite (= x!1 6) (lift-B (mk-B 8109 6 6294 2))\n    null))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-B (mk-B 1153 6 460 5))\n  (ite (= x!1 2) (lift-A (mk-A 3008 4))\n  (ite (= x!1 3) (lift-A (mk-A 7720 6))\n  (ite (= x!1 1) (lift-A (mk-A 11 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8 9))\n  (ite (= x!1 4) (lift-B (mk-B 1797 5 2448 6))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 3008 4))\n  (ite (= x!1 1) (lift-A (mk-A 11 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8 9))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!8 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 7720 6))\n  (ite (= x!1 5) (lift-B (mk-B 1153 6 460 5))\n  (ite (= x!1 6) (lift-B (mk-B 8109 6 6294 2))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8 9))\n  (ite (= x!1 2) (lift-A (mk-A 3008 4))\n  (ite (= x!1 1) (lift-A (mk-A 11 6))\n  (ite (= x!1 7) (lift-C (mk-C 536 6 10 1 12))\n  (ite (= x!1 4) (lift-B (mk-B 1797 5 2448 6))\n    null)))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 3008 4))\n  (ite (= x!1 3) (lift-A (mk-A 7720 6))\n  (ite (= x!1 1) (lift-A (mk-A 11 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8 9))\n  (ite (= x!1 4) (lift-B (mk-B 1797 5 2448 6))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 11 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 8 9))\n    null)))"},"testsmt11.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"a","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"CartesianType","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"TupleExp","element":"ElementValue"},{"type":"ElementValue","element":"a"},{"type":"ElementValue","element":"x"}]}}],"spec":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"g","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"ty":{"type":"Expression","operand":[{"type":"CartesianType","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},"assignment":false,"name":"k","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"f"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"x"}]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"TupleIndex",{"type":"ElementValue","element":"k"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"TupleIndex",{"type":"ElementValue","element":"k"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]}]}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"b","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"h","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"CartesianType","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]}]},"name":"tuple","type":"Param"}],"body":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k1","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"TupleIndex",{"type":"ElementValue","element":"tuple"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k2","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"TupleIndex",{"type":"ElementValue","element":"tuple"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"g"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"k1"},{"type":"ElementValue","element":"k2"}]}]}]}}],"spec":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT_31","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"h"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"TupleExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},20]}]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"i":1,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"types":[{"type":"IntType"},{"type":"IntType"}],"type":"CartesianType"},"ident":"f","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"exps":[{"ident":"a","type":"IdentExp"},{"ident":"x","type":"IdentExp"}],"type":"TupleExp"}}],"spec":[]},{"ty":{"type":"IntType"},"ident":"g","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"ty":{"types":[{"type":"IntType"},{"type":"IntType"}],"type":"CartesianType"},"assignment":false,"name":"k","expr":{"args":[{"type":"PositionalArgument","exp":{"ident":"x","type":"IdentExp"}}],"exp1":{"ident":"f","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"op":"TupleIndex","exp2":{"i":2,"type":"LiteralInteger"},"exp1":{"ident":"k","type":"IdentExp"},"type":"BinExp"},"exp1":{"op":"TupleIndex","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"k","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"i":2,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"h","typeParams":[],"type":"FunDecl","params":[{"ty":{"types":[{"type":"IntType"},{"type":"IntType"}],"type":"CartesianType"},"name":"tuple","type":"Param"}],"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k1","expr":{"op":"TupleIndex","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"tuple","type":"IdentExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"k2","expr":{"op":"TupleIndex","exp2":{"i":2,"type":"LiteralInteger"},"exp1":{"ident":"tuple","type":"IdentExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"args":[{"type":"PositionalArgument","exp":{"op":"Plus","exp2":{"ident":"k2","type":"IdentExp"},"exp1":{"ident":"k1","type":"IdentExp"},"type":"BinExp"}}],"exp1":{"ident":"g","type":"IdentExp"},"type":"FunApplExp"}}],"spec":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT_31","expr":{"args":[{"type":"PositionalArgument","exp":{"exps":[{"i":10,"type":"LiteralInteger"},{"i":20,"type":"LiteralInteger"}],"type":"TupleExp"}}],"exp1":{"ident":"h","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]}],"type":"Model"},"typeChecks":true,"name":"testsmt11.k","model":"\nclass A {\n  a:Int = 1\n\n  fun f(x:Int) : Int * Int\n  {\n    Tuple(a,x)\n  }\n\n  fun g(x:Int) : Int\n  {\n    k:Int * Int = f(x)\n    k # 1 + k # 2\n  }\n}\n\nclass B extending A {\n  b:Int = 2\n\n  fun h(tuple:Int * Int) : Int\n  {\n    k1:Int = tuple # 1\n    k2:Int = tuple # 2\n    g(k1 + k2)\n  }\n  RESULT_31:Int = h(Tuple(10,20))\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)(RESULT_31 Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (a (deref-B this)))\n)\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B.a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B.b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; --- getters for B.RESULT_31: ---\n\n(define-fun B!RESULT_31 ((this Ref)) Int\n  (RESULT_31 (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.f ((this Ref)(x Int)) (Tuple2 Int Int)\n  (mk-Tuple2 (A.a this) x)\n)\n\n(define-fun A!f ((this Ref)(x Int)) (Tuple2 Int Int)\n  (mk-Tuple2 (A!a this) x)\n)\n\n(define-fun A.g ((this Ref)(x Int)) Int\n  (let ((k (A.f this x)))\n    (+ (_1 k) (_2 k)))\n)\n\n(define-fun A!g ((this Ref)(x Int)) Int\n  (let ((k (A!f this x)))\n    (+ (_1 k) (_2 k)))\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.f ((this Ref)(x Int)) (Tuple2 Int Int)\n  (mk-Tuple2 (B.a this) x)\n)\n\n(define-fun B!f ((this Ref)(x Int)) (Tuple2 Int Int)\n  (mk-Tuple2 (B!a this) x)\n)\n\n(define-fun B.g ((this Ref)(x Int)) Int\n  (let ((k (B.f this x)))\n    (+ (_1 k) (_2 k)))\n)\n\n(define-fun B!g ((this Ref)(x Int)) Int\n  (let ((k (B!f this x)))\n    (+ (_1 k) (_2 k)))\n)\n\n(define-fun B.h ((this Ref)(tuple (Tuple2 Int Int))) Int\n  (let ((k1 (_1 tuple)))\n    (let ((k2 (_2 tuple)))\n      (B.g this (+ k1 k2))))\n)\n\n(define-fun B!h ((this Ref)(tuple (Tuple2 Int Int))) Int\n  (let ((k1 (_1 tuple)))\n    (let ((k2 (_2 tuple)))\n      (B!g this (+ k1 k2))))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!a this) 1)\n)\n\n(assert (! (A.inv1 1) :named _xkassert281))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (B!a this) 1)\n)\n\n(assert (! (B.inv1 2) :named _xkassert282))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (= (B!b this) 2)\n)\n\n(assert (! (B.inv2 2) :named _xkassert283))\n\n; --- Invariant 3: ---\n\n(define-fun B.inv3 ((this Ref)) Bool\n  (= (B!RESULT_31 this) (B!h this (mk-Tuple2 10 20)))\n)\n\n(assert (! (B.inv3 2) :named _xkassert284))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-B const-2-B))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-1-A () A\n  (mk-A 1))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun const-2-B () B\n  (mk-B 1 2 31))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 1 2 31))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"inheritance5.k":{"json2":"","json1":"","typeChecks":false,"name":"inheritance5.k","model":"","smt":"","smtModel":""},"inheritance9.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"a","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"b","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"b"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"a"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"c","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"c"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"b"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"d","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"d"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"c"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["C"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"E","members":[{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"a","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"i":10,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"name":"b","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"a","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"b","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"IntType"},"name":"c","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"b","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"c","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"type":"IntType"},"name":"d","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"op":"Plus","exp2":{"i":1,"type":"LiteralInteger"},"exp1":{"ident":"c","type":"IdentExp"},"type":"BinExp"},"exp1":{"ident":"d","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["C"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"E","members":[{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"a","type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"inheritance9.k","model":"\nclass A {\n  a:Int = 10\n}\n\nclass B extending A {\n  b:Int\n\n  req b = a + 1\n}\n\nclass C extending B {\n  c:Int\n\n  req c = b + 1\n}\n\nclass D extending C {\n  d:Int\n\n  req d = c + 1\n}\n\nclass E {\n  a:A\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)))))\n(declare-datatypes () ((D (mk-D (a Int)(b Int)(c Int)(d Int)))))\n(declare-datatypes () ((E (mk-E (a Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-E (sel-E E))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-E ((this Ref)) Bool\n  (is-lift-E (deref this))\n)\n\n(define-fun deref-E ((this Ref)) E\n  (sel-E (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-E ((this Ref)) Bool\n  (deref-is-E this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.a: ---\n\n(define-fun C.a ((this Ref)) Int\n  (ite (deref-is-C this) (a (deref-C this))\n  (a (deref-D this)))\n)\n\n(define-fun C!a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n; --- getters for C.b: ---\n\n(define-fun C.b ((this Ref)) Int\n  (ite (deref-is-C this) (b (deref-C this))\n  (b (deref-D this)))\n)\n\n(define-fun C!b ((this Ref)) Int\n  (b (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C.c ((this Ref)) Int\n  (ite (deref-is-C this) (c (deref-C this))\n  (c (deref-D this)))\n)\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.a: ---\n\n(define-fun D.a ((this Ref)) Int\n  (a (deref-D this))\n)\n\n(define-fun D!a ((this Ref)) Int\n  (a (deref-D this))\n)\n\n; --- getters for D.b: ---\n\n(define-fun D!b ((this Ref)) Int\n  (b (deref-D this))\n)\n\n; --- getters for D.c: ---\n\n(define-fun D.c ((this Ref)) Int\n  (c (deref-D this))\n)\n\n(define-fun D!c ((this Ref)) Int\n  (c (deref-D this))\n)\n\n; --- getters for D.d: ---\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; ------------------------\n;   Getters for class E:\n; ------------------------\n\n; --- getters for E.a: ---\n\n(define-fun E!a ((this Ref)) Ref\n  (a (deref-E this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-A A)\n(declare-const const-3-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!a this) 10)\n)\n\n(assert (! (A.inv1 2) :named _xkassert158))\n(assert (! (A.inv1 3) :named _xkassert159))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (B!a this) 10)\n)\n\n(assert (! (B.inv1 4) :named _xkassert160))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (= (B!b this) (+ (B!a this) 1))\n)\n\n(assert (! (B.inv2 4) :named _xkassert161))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-5-C C)\n\n; --- Invariant 1: ---\n\n(define-fun C.inv1 ((this Ref)) Bool\n  (= (C!a this) 10)\n)\n\n(assert (! (C.inv1 5) :named _xkassert162))\n\n; --- Invariant 2: ---\n\n(define-fun C.inv2 ((this Ref)) Bool\n  (= (C!b this) (+ (C!a this) 1))\n)\n\n(assert (! (C.inv2 5) :named _xkassert163))\n\n; --- Invariant 3: ---\n\n(define-fun C.inv3 ((this Ref)) Bool\n  (= (C!c this) (+ (C!b this) 1))\n)\n\n(assert (! (C.inv3 5) :named _xkassert164))\n\n\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-6-D D)\n\n; --- Invariant 1: ---\n\n(define-fun D.inv1 ((this Ref)) Bool\n  (= (D!a this) 10)\n)\n\n(assert (! (D.inv1 6) :named _xkassert165))\n\n; --- Invariant 2: ---\n\n(define-fun D.inv2 ((this Ref)) Bool\n  (= (D!b this) (+ (D!a this) 1))\n)\n\n(assert (! (D.inv2 6) :named _xkassert166))\n\n; --- Invariant 3: ---\n\n(define-fun D.inv3 ((this Ref)) Bool\n  (= (D!c this) (+ (D!b this) 1))\n)\n\n(assert (! (D.inv3 6) :named _xkassert167))\n\n; --- Invariant 4: ---\n\n(define-fun D.inv4 ((this Ref)) Bool\n  (= (D!d this) (+ (D!c this) 1))\n)\n\n(assert (! (D.inv4 6) :named _xkassert168))\n\n\n\n; --------------------------\n;   Invariant for class E:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-E E)\n\n; --- Invariant 1: ---\n\n(define-fun E.inv1 ((this Ref)) Bool\n  (deref-isa-A (E!a this))\n)\n\n(assert (! (E.inv1 1) :named _xkassert169))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        2 (lift-A const-2-A))\n        3 (lift-A const-3-A))\n        4 (lift-B const-4-B))\n        5 (lift-C const-5-C))\n        6 (lift-D const-6-D))\n        1 (lift-E const-1-E))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-4-B () B\n  (mk-B 10 11))\n(define-fun const-5-C () C\n  (mk-C 10 11 12))\n(define-fun const-1-E () E\n  (mk-E 2))\n(define-fun const-6-D () D\n  (mk-D 10 11 12 13))\n(define-fun const-2-A () A\n  (mk-A 10))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!7))\n(define-fun const-3-A () A\n  (mk-A 10))\n(define-fun k!7 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 10))\n  (ite (= x!1 3) (lift-A (mk-A 10))\n  (ite (= x!1 5) (lift-C (mk-C 10 11 12))\n  (ite (= x!1 6) (lift-D (mk-D 10 11 12 13))\n  (ite (= x!1 1) (lift-E (mk-E 2))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 4) (lift-B (mk-B 10 11))\n    null))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 10))\n  (ite (= x!1 3) (lift-A (mk-A 10))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 4) (lift-B (mk-B 10 11))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 10))\n  (ite (= x!1 3) (lift-A (mk-A 10))\n  (ite (= x!1 4) (lift-B (mk-B 10 11))\n  (ite (= x!1 5) (lift-C (mk-C 10 11 12))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 6) (lift-D (mk-D 10 11 12 13))\n    null)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-A (mk-A 10))\n  (ite (= x!1 2) (lift-A (mk-A 10))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-C (mk-C 10 11 12))\n  (ite (= x!1 2) (lift-A (mk-A 10))\n  (ite (= x!1 3) (lift-A (mk-A 10))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 4) (lift-B (mk-B 10 11))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 10))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"scope1.k":{"json2":"","json1":"","typeChecks":false,"name":"scope1.k","model":"","smt":"","smtModel":""},"testsmt19.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"one","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"X","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"f","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"one"}]}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["X"],"type":"QualifiedName"}]},"name":"x","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"r_1","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"x"},"f"]}]},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"IntType"},"ident":"one","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"i":1,"type":"LiteralInteger"}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"X","members":[{"ty":{"type":"IntType"},"ident":"f","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"args":[],"exp1":{"ident":"one","type":"IdentExp"},"type":"FunApplExp"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["X"],"type":"QualifiedName"},"type":"IdentType"},"name":"x","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"r_1","expr":{"args":[],"exp1":{"ident":"f","exp":{"ident":"x","type":"IdentExp"},"type":"DotExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt19.k","model":"\nfun one : Int\n{\n  1\n}\n\nclass X {\n\n  fun f : Int\n  {\n    one()\n  }\n}\n\nx:X\n\nr_1:Int = x.f()\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (x Ref)(r_1 Int)))))\n(declare-sort X) (declare-const mk-X X)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-X (sel-X X))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-X ((this Ref)) Bool\n  (is-lift-X (deref this))\n)\n\n(define-fun deref-X ((this Ref)) X\n  (sel-X (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-X ((this Ref)) Bool\n  (deref-is-X this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.x: ---\n\n(define-fun TopLevelDeclarations!x ((this Ref)) Ref\n  (x (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.r_1: ---\n\n(define-fun TopLevelDeclarations!r_1 ((this Ref)) Int\n  (r_1 (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------------------\n;   Methods for class TopLevelDeclarations:\n; -------------------------------------------\n\n(define-fun TopLevelDeclarations.one ((this Ref)) Int\n  1\n)\n\n(define-fun TopLevelDeclarations!one ((this Ref)) Int\n  1\n)\n\n; ------------------------\n;   Methods for class X:\n; ------------------------\n\n(define-fun X.f ((this Ref)) Int\n  (TopLevelDeclarations!one 0 )\n)\n\n(define-fun X!f ((this Ref)) Int\n  (TopLevelDeclarations!one 0 )\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (TopLevelDeclarations!r_1 this) (X.f (TopLevelDeclarations!x this) ))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert326))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-X (TopLevelDeclarations!x this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert327))\n\n\n\n; --------------------------\n;   Invariant for class X:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-X X)\n(declare-const const-2-X X)\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-X const-1-X))\n        2 (lift-X const-2-X))\n  )\n)\n\n","smtModel":";; universe for X:\n;;   X!val!1 X!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun X!val!1 () X)\n(declare-fun X!val!0 () X)\n;; cardinality constraint:\n(forall ((x X)) (or (= x X!val!1) (= x X!val!0)))\n;; -----------\n(define-fun const-2-X () X\n  X!val!0)\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 1 1))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun const-1-X () X\n  X!val!1)\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-X X!val!0)\n  (ite (= x!1 1) (lift-X X!val!1)\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 1 1))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 1 1))\n    null))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-X X!val!1)\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 1 1))\n    null)))"},"testsmt17.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"max","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"max"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1000]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"double","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"ElementValue","element":"x"}]}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"a_500","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"double"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"ElementValue","element":"a_500"}]}]},{"type":"ElementValue","element":"max"}]}}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]},"name":"instA","type":"PropertyDecl","modifiers":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"b_1000","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"double"},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"instA"},"a_500"]}]}]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"X","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"Y","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"ElementValue","element":"X"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"ElementValue","element":"Y"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},0]}]}},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"sum","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"X"},{"type":"ElementValue","element":"Y"}]}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"GTE",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"X"},{"type":"ElementValue","element":"Y"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"LTE",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"sum"}]},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},10]}]}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"IntType"},"name":"max","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"i":1000,"type":"LiteralInteger"},"exp1":{"ident":"max","type":"IdentExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"ident":"double","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"a_500","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"ident":"max","type":"IdentExp"},"exp1":{"args":[{"type":"PositionalArgument","exp":{"ident":"a_500","type":"IdentExp"}}],"exp1":{"ident":"double","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"},"name":"instA","type":"PropertyDecl","modifiers":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"b_1000","expr":{"args":[{"type":"PositionalArgument","exp":{"ident":"a_500","exp":{"ident":"instA","type":"IdentExp"},"type":"DotExp"}}],"exp1":{"ident":"double","type":"IdentExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"ty":{"type":"IntType"},"name":"X","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"name":"Y","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"GTE","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"X","type":"IdentExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"GTE","exp2":{"i":0,"type":"LiteralInteger"},"exp1":{"ident":"Y","type":"IdentExp"},"type":"BinExp"}},{"ty":{"type":"IntType"},"ident":"sum","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"ident":"Y","type":"IdentExp"},"exp1":{"ident":"X","type":"IdentExp"},"type":"BinExp"}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"type":"ConstraintDecl","exp":{"op":"GTE","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"op":"Plus","exp2":{"ident":"Y","type":"IdentExp"},"exp1":{"ident":"X","type":"IdentExp"},"type":"BinExp"},"type":"BinExp"}},{"type":"ConstraintDecl","exp":{"op":"LTE","exp2":{"i":10,"type":"LiteralInteger"},"exp1":{"args":[],"exp1":{"ident":"sum","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt17.k","model":"\nmax:Int\n\nreq max = 1000\n\nfun double(x:Int) : Int\n{\n  x + x\n}\n\nclass A {\n  a_500:Int\n\n  req double(a_500) = max\n}\n\ninstA:A\n\nclass B {\n  b_1000:Int = double(instA.a_500)\n}\n\nX:Int\n\nY:Int\n\nreq X >= 0\n\nreq Y >= 0\n\nfun sum : Int\n{\n  X + Y\n}\n\nclass C {\n\n  req X + Y >= 10\n\n  req sum() <= 10\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (max Int)(instA Ref)(X Int)(Y Int)))))\n(declare-datatypes () ((A (mk-A (a_500 Int)))))\n(declare-datatypes () ((B (mk-B (b_1000 Int)))))\n(declare-sort C) (declare-const mk-C C)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.max: ---\n\n(define-fun TopLevelDeclarations!max ((this Ref)) Int\n  (max (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.instA: ---\n\n(define-fun TopLevelDeclarations!instA ((this Ref)) Ref\n  (instA (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.X: ---\n\n(define-fun TopLevelDeclarations.X ((this Ref)) Int\n  (X (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations!X ((this Ref)) Int\n  (X (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.Y: ---\n\n(define-fun TopLevelDeclarations.Y ((this Ref)) Int\n  (Y (deref-TopLevelDeclarations this))\n)\n\n(define-fun TopLevelDeclarations!Y ((this Ref)) Int\n  (Y (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a_500: ---\n\n(define-fun A.a_500 ((this Ref)) Int\n  (a_500 (deref-A this))\n)\n\n(define-fun A!a_500 ((this Ref)) Int\n  (a_500 (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.b_1000: ---\n\n(define-fun B!b_1000 ((this Ref)) Int\n  (b_1000 (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------------------\n;   Methods for class TopLevelDeclarations:\n; -------------------------------------------\n\n(define-fun TopLevelDeclarations.double ((this Ref)(x Int)) Int\n  (+ x x)\n)\n\n(define-fun TopLevelDeclarations!double ((this Ref)(x Int)) Int\n  (+ x x)\n)\n\n(define-fun TopLevelDeclarations.sum ((this Ref)) Int\n  (+ (TopLevelDeclarations.X this) (TopLevelDeclarations.Y this))\n)\n\n(define-fun TopLevelDeclarations!sum ((this Ref)) Int\n  (+ (TopLevelDeclarations!X this) (TopLevelDeclarations!Y this))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (deref-isa-A (TopLevelDeclarations!instA this))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert298))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (= (TopLevelDeclarations!max this) 1000)\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert299))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (>= (TopLevelDeclarations!X this) 0)\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert300))\n\n; --- Invariant 4: ---\n\n(define-fun TopLevelDeclarations.inv4 ((this Ref)) Bool\n  (>= (TopLevelDeclarations!Y this) 0)\n)\n\n(assert (! (TopLevelDeclarations.inv4 0) :named _xkassert301))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n(declare-const const-2-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (TopLevelDeclarations!double 0 (A!a_500 this)) (TopLevelDeclarations!max 0))\n)\n\n(assert (! (A.inv1 1) :named _xkassert302))\n(assert (! (A.inv1 2) :named _xkassert303))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (B!b_1000 this) (TopLevelDeclarations!double 0 (A.a_500 (TopLevelDeclarations!instA 0))))\n)\n\n(assert (! (B.inv1 3) :named _xkassert304))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-C C)\n\n; --- Invariant 1: ---\n\n(define-fun C.inv1 ((this Ref)) Bool\n  (>= (+ (TopLevelDeclarations!X 0) (TopLevelDeclarations!Y 0)) 10)\n)\n\n(assert (! (C.inv1 4) :named _xkassert305))\n\n; --- Invariant 2: ---\n\n(define-fun C.inv2 ((this Ref)) Bool\n  (<= (TopLevelDeclarations!sum 0 ) 10)\n)\n\n(assert (! (C.inv2 4) :named _xkassert306))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-A const-2-A))\n        3 (lift-B const-3-B))\n        4 (lift-C const-4-C))\n  )\n)\n\n","smtModel":";; universe for C:\n;;   C!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun C!val!0 () C)\n;; cardinality constraint:\n(forall ((x C)) (= x C!val!0))\n;; -----------\n(define-fun const-1-A () A\n  (mk-A 500))\n(define-fun const-2-A () A\n  (mk-A 500))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 1000 2 8 2))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!5))\n(define-fun const-3-B () B\n  (mk-B 1000))\n(define-fun const-4-C () C\n  C!val!0)\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 500))\n  (ite (= x!1 1) (lift-A (mk-A 500))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations 1000 2 8 2))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-B (mk-B 1000))\n  (ite (= x!1 2) (lift-A (mk-A 500))\n  (ite (= x!1 1) (lift-A (mk-A 500))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations 1000 2 8 2))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations 1000 2 8 2))\n    null))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 500))\n  (ite (= x!1 3) (lift-B (mk-B 1000))\n  (ite (= x!1 1) (lift-A (mk-A 500))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations 1000 2 8 2))\n  (ite (= x!1 4) (lift-C C!val!0)\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 500))\n  (ite (= x!1 0)\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations 1000 2 8 2))\n    null)))"},"inheritance3.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"x","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"get","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"type":"ElementValue","element":"x"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"y","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},5]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"sum","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"get"}]},{"type":"ElementValue","element":"y"}]},{"type":"ElementValue","element":"k"}]}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]},"name":"bobj","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"theSum","expr":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"bobj"},"sum"]},{"type":"Expression","operand":[{"type":"PositionalArgument","element":"ElementValue"},{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"bobj"},"get"]}]}]}]},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"theSum"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},9]}]}}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"x","expr":{"i":2,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"get","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"ident":"x","type":"IdentExp"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"y","expr":{"i":5,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"ident":"sum","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"args":[],"exp1":{"ident":"get","type":"IdentExp"},"type":"FunApplExp"},"type":"BinExp"},"type":"BinExp"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"ty":{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"},"name":"bobj","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"theSum","expr":{"args":[{"type":"PositionalArgument","exp":{"args":[],"exp1":{"ident":"get","exp":{"ident":"bobj","type":"IdentExp"},"type":"DotExp"},"type":"FunApplExp"}}],"exp1":{"ident":"sum","exp":{"ident":"bobj","type":"IdentExp"},"type":"DotExp"},"type":"FunApplExp"},"type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"i":9,"type":"LiteralInteger"},"exp1":{"ident":"theSum","type":"IdentExp"},"type":"BinExp"}}],"type":"Model"},"typeChecks":true,"name":"inheritance3.k","model":"\nclass A {\n  x:Int = 2\n\n  fun get : Int\n  {\n    x\n  }\n}\n\nclass B extending A {\n  y:Int = 5\n\n  fun sum(k:Int) : Int\n  {\n    get() + y + k\n  }\n}\n\nbobj:B\n\ntheSum:Int = bobj.sum(bobj.get())\n\nreq theSum = 9\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (bobj Ref)(theSum Int)))))\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.bobj: ---\n\n(define-fun TopLevelDeclarations!bobj ((this Ref)) Ref\n  (bobj (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.theSum: ---\n\n(define-fun TopLevelDeclarations!theSum ((this Ref)) Int\n  (theSum (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (x (deref-B this)))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.x: ---\n\n(define-fun B.x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n(define-fun B!x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n; --- getters for B.y: ---\n\n(define-fun B.y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n(define-fun B!y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.get ((this Ref)) Int\n  (A.x this)\n)\n\n(define-fun A!get ((this Ref)) Int\n  (A!x this)\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.get ((this Ref)) Int\n  (B.x this)\n)\n\n(define-fun B!get ((this Ref)) Int\n  (B!x this)\n)\n\n(define-fun B.sum ((this Ref)(k Int)) Int\n  (+ (+ (B.get this ) (B.y this)) k)\n)\n\n(define-fun B!sum ((this Ref)(k Int)) Int\n  (+ (+ (B!get this ) (B!y this)) k)\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (TopLevelDeclarations!theSum this) (B.sum (TopLevelDeclarations!bobj this) (B.get (TopLevelDeclarations!bobj this) )))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert57))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-B (TopLevelDeclarations!bobj this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert58))\n\n; --- Invariant 3: ---\n\n(define-fun TopLevelDeclarations.inv3 ((this Ref)) Bool\n  (= (TopLevelDeclarations!theSum this) 9)\n)\n\n(assert (! (TopLevelDeclarations.inv3 0) :named _xkassert59))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!x this) 2)\n)\n\n(assert (! (A.inv1 1) :named _xkassert60))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-B B)\n(declare-const const-3-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (B!x this) 2)\n)\n\n(assert (! (B.inv1 2) :named _xkassert61))\n(assert (! (B.inv1 3) :named _xkassert62))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (= (B!y this) 5)\n)\n\n(assert (! (B.inv2 2) :named _xkassert63))\n(assert (! (B.inv2 3) :named _xkassert64))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-B const-2-B))\n        3 (lift-B const-3-B))\n  )\n)\n\n","smtModel":"(define-fun const-1-A () A\n  (mk-A 2))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 2 9))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!4))\n(define-fun const-2-B () B\n  (mk-B 2 5))\n(define-fun const-3-B () B\n  (mk-B 2 5))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 2 5))\n  (ite (= x!1 1) (lift-A (mk-A 2))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 9))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 2 5))\n  (ite (= x!1 3) (lift-B (mk-B 2 5))\n  (ite (= x!1 1) (lift-A (mk-A 2))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 9))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 9))\n    null))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 2))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 2 9))\n    null)))"},"testsmt15.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"RESULT_6","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"EQ",{"type":"ElementValue","element":"RESULT_6"},{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BlockExp","element":"ElementValue"},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k1","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"type":"ElementValue","element":"k1"}}]},{"type":"Expression","operand":[{"type":"BlockExp","element":"ElementValue"},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k2","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"k3","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"k2"},{"type":"ElementValue","element":"k3"}]}}]}]}]}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"name":"RESULT_6","type":"PropertyDecl","modifiers":[]},{"type":"ConstraintDecl","exp":{"op":"EQ","exp2":{"op":"Plus","exp2":{"type":"BlockExp","body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k2","expr":{"i":2,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"k3","expr":{"i":3,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"ident":"k3","type":"IdentExp"},"exp1":{"ident":"k2","type":"IdentExp"},"type":"BinExp"}}]},"exp1":{"type":"BlockExp","body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k1","expr":{"i":1,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]},{"type":"ExpressionDecl","exp":{"ident":"k1","type":"IdentExp"}}]},"type":"BinExp"},"exp1":{"ident":"RESULT_6","type":"IdentExp"},"type":"BinExp"}}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"testsmt15.k","model":"\nclass A {\n  RESULT_6:Int\n\n  req RESULT_6 = {\n    k1:Int = 1\n    k1\n  } + {\n    k2:Int = 2\n    k3:Int = 3\n    k2 + k3\n  }\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-datatypes () ((A (mk-A (RESULT_6 Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.RESULT_6: ---\n\n(define-fun A!RESULT_6 ((this Ref)) Int\n  (RESULT_6 (deref-A this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!RESULT_6 this) (+   (let ((k1 1))\n    k1)   (let ((k2 2))\n    (let ((k3 3))\n      (+ k2 k3)))))\n)\n\n(assert (! (A.inv1 1) :named _xkassert294))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun const-1-A () A\n  (mk-A 6))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!2))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 6))\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"inheritance1.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"x","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"y","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"i","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},3]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["C"],"type":"QualifiedName"}]}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"z","expr":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},4]},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["B"],"type":"QualifiedName"}]}]},{"ty":{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["D"],"type":"QualifiedName"}]},"name":"dobj","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"assignment":false,"name":"RESULT_10","expr":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"dobj"},"x"]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"dobj"},"y"]}]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"dobj"},"z"]}]},{"type":"Expression","operand":[{"type":"DotExp","element":"ElementValue"},{"type":"ElementValue","element":"dobj"},"i"]}]},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"x","expr":{"i":1,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"y","expr":{"i":2,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"D","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"i","expr":{"i":3,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["C"],"type":"QualifiedName"},"type":"IdentType"}]},{"entityToken":"class","typeparams":[],"ident":"C","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"z","expr":{"i":4,"type":"LiteralInteger"},"type":"PropertyDecl","modifiers":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["B"],"type":"QualifiedName"},"type":"IdentType"}]},{"ty":{"args":[],"ident":{"names":["D"],"type":"QualifiedName"},"type":"IdentType"},"name":"dobj","type":"PropertyDecl","modifiers":[]},{"ty":{"type":"IntType"},"assignment":false,"name":"RESULT_10","expr":{"op":"Plus","exp2":{"ident":"i","exp":{"ident":"dobj","type":"IdentExp"},"type":"DotExp"},"exp1":{"op":"Plus","exp2":{"ident":"z","exp":{"ident":"dobj","type":"IdentExp"},"type":"DotExp"},"exp1":{"op":"Plus","exp2":{"ident":"y","exp":{"ident":"dobj","type":"IdentExp"},"type":"DotExp"},"exp1":{"ident":"x","exp":{"ident":"dobj","type":"IdentExp"},"type":"DotExp"},"type":"BinExp"},"type":"BinExp"},"type":"BinExp"},"type":"PropertyDecl","modifiers":[]}],"type":"Model"},"typeChecks":true,"name":"inheritance1.k","model":"\nclass A {\n  x:Int = 1\n}\n\nclass B extending A {\n  y:Int = 2\n}\n\nclass D extending C {\n  i:Int = 3\n}\n\nclass C extending B {\n  z:Int = 4\n}\n\ndobj:D\n\nRESULT_10:Int = dobj.x + dobj.y + dobj.z + dobj.i\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (dobj Ref)(RESULT_10 Int)))))\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)))))\n(declare-datatypes () ((C (mk-C (x Int)(y Int)(z Int)))))\n(declare-datatypes () ((D (mk-D (x Int)(y Int)(z Int)(i Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.dobj: ---\n\n(define-fun TopLevelDeclarations!dobj ((this Ref)) Ref\n  (dobj (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.RESULT_10: ---\n\n(define-fun TopLevelDeclarations!RESULT_10 ((this Ref)) Int\n  (RESULT_10 (deref-TopLevelDeclarations this))\n)\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.x: ---\n\n(define-fun B!x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n; --- getters for B.y: ---\n\n(define-fun B!y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.x: ---\n\n(define-fun C!x ((this Ref)) Int\n  (x (deref-C this))\n)\n\n; --- getters for C.y: ---\n\n(define-fun C!y ((this Ref)) Int\n  (y (deref-C this))\n)\n\n; --- getters for C.z: ---\n\n(define-fun C!z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.x: ---\n\n(define-fun D.x ((this Ref)) Int\n  (x (deref-D this))\n)\n\n(define-fun D!x ((this Ref)) Int\n  (x (deref-D this))\n)\n\n; --- getters for D.y: ---\n\n(define-fun D.y ((this Ref)) Int\n  (y (deref-D this))\n)\n\n(define-fun D!y ((this Ref)) Int\n  (y (deref-D this))\n)\n\n; --- getters for D.z: ---\n\n(define-fun D.z ((this Ref)) Int\n  (z (deref-D this))\n)\n\n(define-fun D!z ((this Ref)) Int\n  (z (deref-D this))\n)\n\n; --- getters for D.i: ---\n\n(define-fun D.i ((this Ref)) Int\n  (i (deref-D this))\n)\n\n(define-fun D!i ((this Ref)) Int\n  (i (deref-D this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n; --- Invariant 1: ---\n\n(define-fun TopLevelDeclarations.inv1 ((this Ref)) Bool\n  (= (TopLevelDeclarations!RESULT_10 this) (+ (+ (+ (D.x (TopLevelDeclarations!dobj this)) (D.y (TopLevelDeclarations!dobj this))) (D.z (TopLevelDeclarations!dobj this))) (D.i (TopLevelDeclarations!dobj this))))\n)\n\n(assert (! (TopLevelDeclarations.inv1 0) :named _xkassert1))\n\n; --- Invariant 2: ---\n\n(define-fun TopLevelDeclarations.inv2 ((this Ref)) Bool\n  (deref-isa-D (TopLevelDeclarations!dobj this))\n)\n\n(assert (! (TopLevelDeclarations.inv2 0) :named _xkassert2))\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n; --- Invariant 1: ---\n\n(define-fun A.inv1 ((this Ref)) Bool\n  (= (A!x this) 1)\n)\n\n(assert (! (A.inv1 1) :named _xkassert3))\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-B B)\n\n; --- Invariant 1: ---\n\n(define-fun B.inv1 ((this Ref)) Bool\n  (= (B!x this) 1)\n)\n\n(assert (! (B.inv1 2) :named _xkassert4))\n\n; --- Invariant 2: ---\n\n(define-fun B.inv2 ((this Ref)) Bool\n  (= (B!y this) 2)\n)\n\n(assert (! (B.inv2 2) :named _xkassert5))\n\n\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-3-C C)\n\n; --- Invariant 1: ---\n\n(define-fun C.inv1 ((this Ref)) Bool\n  (= (C!x this) 1)\n)\n\n(assert (! (C.inv1 3) :named _xkassert6))\n\n; --- Invariant 2: ---\n\n(define-fun C.inv2 ((this Ref)) Bool\n  (= (C!y this) 2)\n)\n\n(assert (! (C.inv2 3) :named _xkassert7))\n\n; --- Invariant 3: ---\n\n(define-fun C.inv3 ((this Ref)) Bool\n  (= (C!z this) 4)\n)\n\n(assert (! (C.inv3 3) :named _xkassert8))\n\n\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-4-D D)\n(declare-const const-5-D D)\n\n; --- Invariant 1: ---\n\n(define-fun D.inv1 ((this Ref)) Bool\n  (= (D!x this) 1)\n)\n\n(assert (! (D.inv1 4) :named _xkassert9))\n(assert (! (D.inv1 5) :named _xkassert10))\n\n; --- Invariant 2: ---\n\n(define-fun D.inv2 ((this Ref)) Bool\n  (= (D!y this) 2)\n)\n\n(assert (! (D.inv2 4) :named _xkassert11))\n(assert (! (D.inv2 5) :named _xkassert12))\n\n; --- Invariant 3: ---\n\n(define-fun D.inv3 ((this Ref)) Bool\n  (= (D!z this) 4)\n)\n\n(assert (! (D.inv3 4) :named _xkassert13))\n(assert (! (D.inv3 5) :named _xkassert14))\n\n; --- Invariant 4: ---\n\n(define-fun D.inv4 ((this Ref)) Bool\n  (= (D!i this) 3)\n)\n\n(assert (! (D.inv4 4) :named _xkassert15))\n(assert (! (D.inv4 5) :named _xkassert16))\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store(store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-B const-2-B))\n        3 (lift-C const-3-C))\n        4 (lift-D const-4-D))\n        5 (lift-D const-5-D))\n  )\n)\n\n","smtModel":"(define-fun const-1-A () A\n  (mk-A 1))\n(define-fun const-3-C () C\n  (mk-C 1 2 4))\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  (mk-TopLevelDeclarations 4 10))\n(define-fun const-5-D () D\n  (mk-D 1 2 4 3))\n(define-fun heap () (Array Int Any)\n  (_ as-array k!6))\n(define-fun const-2-B () B\n  (mk-B 1 2))\n(define-fun const-4-D () D\n  (mk-D 1 2 4 3))\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 1 2))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 10))\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!4 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-C (mk-C 1 2 4))\n  (ite (= x!1 2) (lift-B (mk-B 1 2))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 10))\n    null)))))\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 10))\n    null))\n(define-fun k!5 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 1 2))\n  (ite (= x!1 3) (lift-C (mk-C 1 2 4))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 10))\n  (ite (= x!1 4) (lift-D (mk-D 1 2 4 3))\n    null))))))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 10))\n    null)))\n(define-fun k!6 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B (mk-B 1 2))\n  (ite (= x!1 3) (lift-C (mk-C 1 2 4))\n  (ite (= x!1 5) (lift-D (mk-D 1 2 4 3))\n  (ite (= x!1 1) (lift-A (mk-A 1))\n  (ite (= x!1 0) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 4 10))\n  (ite (= x!1 4) (lift-D (mk-D 1 2 4 3))\n    null)))))))"},"tc2.k":{"json2":"","json1":"","typeChecks":false,"name":"tc2.k","model":"","smt":"","smtModel":""},"tc4.k":{"json2":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"foo","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"foo","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"BinExp","element":"ElementValue"},"Plus",{"type":"ElementValue","element":"x"},{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},2]}]}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[{"type":"Expression","operand":[{"type":"IdentType","element":"ElementValue"},{"names":["A"],"type":"QualifiedName"}]}]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"entityToken":"class","typeparams":[],"ident":"A","members":[{"ty":{"type":"IntType"},"ident":"foo","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]},{"entityToken":"class","typeparams":[],"ident":"B","members":[{"ty":{"type":"IntType"},"ident":"foo","typeParams":[],"type":"FunDecl","params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"body":[{"type":"ExpressionDecl","exp":{"op":"Plus","exp2":{"i":2,"type":"LiteralInteger"},"exp1":{"ident":"x","type":"IdentExp"},"type":"BinExp"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[{"args":[],"ident":{"names":["A"],"type":"QualifiedName"},"type":"IdentType"}]}],"type":"Model"},"typeChecks":true,"name":"tc4.k","model":"\nclass A {\n\n  fun foo(x:Int) : Int\n\n}\n\nclass B extending A {\n\n  fun foo(x:Int) : Int\n  {\n    x + 2\n  }\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-sort A) (declare-const mk-A A)\n(declare-sort B) (declare-const mk-B B)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(declare-fun A.foo (Ref Int) Int)\n\n(define-fun A!foo ((this Ref)(x Int)) Int\n  (A.foo this x)\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.foo ((this Ref)(x Int)) Int\n  (+ x 2)\n)\n\n(define-fun B!foo ((this Ref)(x Int)) Int\n  (+ x 2)\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-A A)\n\n\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-2-B B)\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-A const-1-A))\n        2 (lift-B const-2-B))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n;; universe for A:\n;;   A!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun A!val!0 () A)\n;; cardinality constraint:\n(forall ((x A)) (= x A!val!0))\n;; -----------\n;; universe for B:\n;;   B!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun B!val!0 () B)\n;; cardinality constraint:\n(forall ((x B)) (= x B!val!0))\n;; -----------\n(define-fun const-1-A () A\n  A!val!0)\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun const-2-B () B\n  B!val!0)\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-B B!val!0)\n  (ite (= x!1 1) (lift-A A!val!0)\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))))\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A A!val!0)\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"global1.k":{"json2":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"one","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"IntegerLiteral","element":"ElementValue"},1]}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"X","members":[{"ty":{"type":"Expression","operand":[{"type":"IntType","element":"ElementValue"}]},"ident":"f","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"type":"Expression","operand":[{"type":"FunApplExp","element":"ElementValue"},{"type":"ElementValue","element":"one"}]}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"json1":{"imports":[],"annotations":[],"decls":[{"ty":{"type":"IntType"},"ident":"one","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"i":1,"type":"LiteralInteger"}}],"spec":[]},{"entityToken":"class","typeparams":[],"ident":"X","members":[{"ty":{"type":"IntType"},"ident":"f","typeParams":[],"type":"FunDecl","params":[],"body":[{"type":"ExpressionDecl","exp":{"args":[],"exp1":{"ident":"one","type":"IdentExp"},"type":"FunApplExp"}}],"spec":[]}],"annotations":[],"type":"EntityDecl","extending":[]}],"type":"Model"},"typeChecks":true,"name":"global1.k","model":"\nfun one : Int\n{\n  1\n}\n\nclass X {\n\n  fun f : Int\n  {\n    one()\n  }\n}\n\n","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ===========================\n; === Built-in datatypes: ===\n; ===========================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(define-sort Set (T) (Array T Bool))\n\n; ===============================\n; === User-defined datatypes: ===\n; ===============================\n\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n(declare-sort X) (declare-const mk-X X)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  (lift-X (sel-X X))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-is-X ((this Ref)) Bool\n  (is-lift-X (deref this))\n)\n\n(define-fun deref-X ((this Ref)) X\n  (sel-X (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n(define-fun deref-isa-X ((this Ref)) Bool\n  (deref-is-X this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------------------\n;   Methods for class TopLevelDeclarations:\n; -------------------------------------------\n\n(define-fun TopLevelDeclarations.one ((this Ref)) Int\n  1\n)\n\n(define-fun TopLevelDeclarations!one ((this Ref)) Int\n  1\n)\n\n; ------------------------\n;   Methods for class X:\n; ------------------------\n\n(define-fun X.f ((this Ref)) Int\n  (TopLevelDeclarations!one 0 )\n)\n\n(define-fun X!f ((this Ref)) Int\n  (TopLevelDeclarations!one 0 )\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n; --- Constants: ---\n\n(declare-const const-0-TopLevelDeclarations TopLevelDeclarations)\n\n\n\n; --------------------------\n;   Invariant for class X:\n; --------------------------\n\n; --- Constants: ---\n\n(declare-const const-1-X X)\n\n\n\n\n; ======================\n; === Generate heap: ===\n; ======================\n\n(assert\n  (=\n    heap\n    (store(store\n      ((as const (Array Ref Any)) null)\n        0 (lift-TopLevelDeclarations const-0-TopLevelDeclarations))\n        1 (lift-X const-1-X))\n  )\n)\n\n","smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n;; universe for X:\n;;   X!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun X!val!0 () X)\n;; cardinality constraint:\n(forall ((x X)) (= x X!val!0))\n;; -----------\n(define-fun const-0-TopLevelDeclarations () TopLevelDeclarations\n  TopLevelDeclarations!val!0)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!2))\n(define-fun const-1-X () X\n  X!val!0)\n(define-fun k!0 ((x!1 Int)) Any\n  null)\n(define-fun k!1 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null))\n(define-fun k!2 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-X X!val!0)\n  (ite (= x!1 0) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n    null)))"},"as1.k":{"json2":"","json1":"","typeChecks":false,"name":"as1.k","model":"","smt":"","smtModel":""}}