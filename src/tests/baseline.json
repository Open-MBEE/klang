{"testsmt9.k":{"typeChecks":true,"model":"\nclass A {\n  x:Int\n\n  req x > 0\n}\n\nclass B extending A {\n  y:Int\n  a:A\n\n  req y = x + 1\n}\n\n","name":"testsmt9.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},0],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"y","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":0},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"x","type":"IdentExp"}},"exp1":{"ident":"y","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  4)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun instanceOfB!1 () Int\n  3)\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 9) (lift-B (mk-B 8366 8367 11))\n  (ite (= x!1 21) (lift-A (mk-A 6284))\n  (ite (= x!1 13) (lift-B (mk-B 5854 5855 15))\n  (ite (= x!1 17) (lift-B (mk-B 536 537 19))\n  (ite (= x!1 19) (lift-B (mk-B 8946 8947 21))\n  (ite (= x!1 11) (lift-B (mk-B 450 451 13))\n  (ite (= x!1 5) (lift-B (mk-B 1237 1238 7))\n  (ite (= x!1 4) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 0) (lift-A (mk-A 39))\n  (ite (= x!1 3) (lift-B (mk-B 1 2 5))\n  (ite (= x!1 7) (lift-B (mk-B 8856 8857 9))\n    (lift-B (mk-B 1143 1144 17))))))))))))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 4) 4\n  (ite (= x!1 5) 5\n  (ite (= x!1 11) 11\n  (ite (= x!1 13) 13\n  (ite (= x!1 15) 15\n  (ite (= x!1 17) 17\n  (ite (= x!1 19) 19\n  (ite (= x!1 21) 21\n  (ite (= x!1 9) 9\n  (ite (= x!1 3) 3\n  (ite (= x!1 7) 7\n    0))))))))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)(a Ref)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (x (deref-B this)))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.x: ---\n\n(define-fun B.x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n(define-fun B!x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n; --- getters for B.y: ---\n\n(define-fun B.y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n(define-fun B!y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; --- getters for B.a: ---\n\n(define-fun B.a ((this Ref)) Ref\n  (a (deref-B this))\n)\n\n(define-fun B!a ((this Ref)) Ref\n  (a (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (> (A!x this)  0)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (deref-isa-A (B!a this))\n    (> (B!x this)  0)\n    (= (B!y this)  (+ (B!x this)  1))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt14.k":{"typeChecks":true,"model":"\nclass A {\n  a:Int\n  b:Int\n\n  fun id(x:Int) : Int\n  {\n    if x >= 0 then\n      {\n        k1:Int = x - 1\n        k1 + 1\n      }\n    else\n      {\n        k2:Int = x + 1\n        k2 - 1\n      }\n  }\n\n  req a = id(10)\n\n  req a = 10\n}\n\n","name":"testsmt14.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"operand":[{"element":"ElementValue","type":"IfExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GTE",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},0],"type":"Expression"}]},{"operand":[{"element":"ElementValue","type":"BlockExp"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k1","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Minus",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"k1","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ExpressionDecl"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"BlockExp"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k2","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Minus",{"element":"k2","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ExpressionDecl"}],"type":"Expression"}],"type":"Expression"},"type":"ExpressionDecl"}],"ident":"id","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"a","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"id","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}],"type":"Expression"}]}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"a","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"trueBranch":{"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k1","expr":{"op":"Minus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"x","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"k1","type":"IdentExp"}},"type":"ExpressionDecl"}],"type":"BlockExp"},"falseBranch":{"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k2","expr":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"x","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"Minus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"k2","type":"IdentExp"}},"type":"ExpressionDecl"}],"type":"BlockExp"},"type":"IfExp","cond":{"op":"GTE","type":"BinExp","exp2":{"type":"LiteralInteger","i":0},"exp1":{"ident":"x","type":"IdentExp"}}},"type":"ExpressionDecl"}],"ident":"id","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"args":[{"exp":{"type":"LiteralInteger","i":10},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"id","type":"IdentExp"}},"exp1":{"ident":"a","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"ident":"a","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!1 () Int\n  1)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!2))\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!3 ((x!1 Int)) Int\n  (ite (= x!1 0) 0\n    1))\n(define-fun k!2!4 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-A (mk-A 10 2))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0)))\n(define-fun k!2 ((x!1 Int)) Any\n  (k!2!4 (k!3 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)(b Int)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A.a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; --- getters for A.b: ---\n\n(define-fun A!b ((this Ref)) Int\n  (b (deref-A this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.id ((this Ref)(x Int)) Int\n  (ite (>= x 0)   (let ((k1 (- x 1)))\n    (+ k1 1))   (let ((k2 (+ x 1)))\n    (- k2 1)))\n)\n\n(define-fun A!id ((this Ref)(x Int)) Int\n  (ite (>= x 0)   (let ((k1 (- x 1)))\n    (+ k1 1))   (let ((k2 (+ x 1)))\n    (- k2 1)))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A!a this)  (A!id this 10))\n    (= (A!a this)  10)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt8.k":{"typeChecks":true,"model":"\nclass Person {\n  age:Int\n\n  fun getAge : Int\n  {\n    age\n  }\n\n  req getAge() > 18\n}\n\nclass Employee extending Person {\n  boss:Person\n  officemate:Employee\n\n  fun avoid(p:Employee) : Bool\n  {\n    officemate != p\n  }\n\n  req boss.age > 30\n\n  req this = officemate.officemate\n\n  req avoid(boss)\n}\n\n","name":"testsmt8.k","json2":{"decls":[{"entityToken":"class","ident":"Person","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"age","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"element":"age","type":"ElementValue"},"type":"ExpressionDecl"}],"ident":"getAge","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"getAge","type":"ElementValue"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},18],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Employee","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"},"name":"boss","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Employee"],"type":"QualifiedName"}],"type":"Expression"},"name":"officemate","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"element":"officemate","type":"ElementValue"},{"element":"p","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"avoid","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Employee"],"type":"QualifiedName"}],"type":"Expression"},"name":"p","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"boss","type":"ElementValue"},"age"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},30],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"operand":[{"element":"ElementValue","type":"ThisLiteral"}],"type":"Expression"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"officemate","type":"ElementValue"},"officemate"]}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"avoid","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"boss","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"}]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Person","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"age","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"ident":"age","type":"IdentExp"},"type":"ExpressionDecl"}],"ident":"getAge","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":18},"exp1":{"args":[],"type":"FunApplExp","exp1":{"ident":"getAge","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Employee","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"boss","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Employee"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"officemate","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"NotEQ","type":"BinExp","exp2":{"ident":"p","type":"IdentExp"},"exp1":{"ident":"officemate","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"avoid","typeParams":[],"params":[{"ty":{"ident":{"names":["Employee"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"p","type":"Param"}],"type":"FunDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":30},"exp1":{"exp":{"ident":"boss","type":"IdentExp"},"ident":"age","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"exp":{"ident":"officemate","type":"IdentExp"},"ident":"officemate","type":"DotExp"},"exp1":{"type":"ThisLiteral"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"ident":"boss","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"avoid","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!55 TopLevelDeclarations!val!2 TopLevelDeclarations!val!8 TopLevelDeclarations!val!18 TopLevelDeclarations!val!24 TopLevelDeclarations!val!58 TopLevelDeclarations!val!5 TopLevelDeclarations!val!6 TopLevelDeclarations!val!4 TopLevelDeclarations!val!14 TopLevelDeclarations!val!51 TopLevelDeclarations!val!57 TopLevelDeclarations!val!22 TopLevelDeclarations!val!46 TopLevelDeclarations!val!52 TopLevelDeclarations!val!39 TopLevelDeclarations!val!0 TopLevelDeclarations!val!29 TopLevelDeclarations!val!20 TopLevelDeclarations!val!27 TopLevelDeclarations!val!34 TopLevelDeclarations!val!16 TopLevelDeclarations!val!23 TopLevelDeclarations!val!36 TopLevelDeclarations!val!26 TopLevelDeclarations!val!37 TopLevelDeclarations!val!9 TopLevelDeclarations!val!48 TopLevelDeclarations!val!7 TopLevelDeclarations!val!56 TopLevelDeclarations!val!44 TopLevelDeclarations!val!31 TopLevelDeclarations!val!50 TopLevelDeclarations!val!32 TopLevelDeclarations!val!54 TopLevelDeclarations!val!30 TopLevelDeclarations!val!13 TopLevelDeclarations!val!3 TopLevelDeclarations!val!15 TopLevelDeclarations!val!53 TopLevelDeclarations!val!12 TopLevelDeclarations!val!28 TopLevelDeclarations!val!45 TopLevelDeclarations!val!49 TopLevelDeclarations!val!10 TopLevelDeclarations!val!11 TopLevelDeclarations!val!47 TopLevelDeclarations!val!19 TopLevelDeclarations!val!40 TopLevelDeclarations!val!33 TopLevelDeclarations!val!25 TopLevelDeclarations!val!41 TopLevelDeclarations!val!42 TopLevelDeclarations!val!35 TopLevelDeclarations!val!43 TopLevelDeclarations!val!38 TopLevelDeclarations!val!59 TopLevelDeclarations!val!1 TopLevelDeclarations!val!21 TopLevelDeclarations!val!17 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!55 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!2 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!8 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!18 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!24 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!58 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!5 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!6 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!4 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!14 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!51 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!57 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!22 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!46 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!52 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!39 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!29 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!20 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!27 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!34 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!16 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!23 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!36 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!26 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!37 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!9 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!48 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!7 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!56 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!44 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!31 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!50 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!32 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!54 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!30 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!13 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!3 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!15 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!53 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!12 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!28 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!45 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!49 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!10 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!11 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!47 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!19 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!40 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!33 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!25 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!41 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!42 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!35 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!43 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!38 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!59 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!1 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!21 () TopLevelDeclarations)\n(declare-fun TopLevelDeclarations!val!17 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations))\n        (or (= x TopLevelDeclarations!val!55)\n            (= x TopLevelDeclarations!val!2)\n            (= x TopLevelDeclarations!val!8)\n            (= x TopLevelDeclarations!val!18)\n            (= x TopLevelDeclarations!val!24)\n            (= x TopLevelDeclarations!val!58)\n            (= x TopLevelDeclarations!val!5)\n            (= x TopLevelDeclarations!val!6)\n            (= x TopLevelDeclarations!val!4)\n            (= x TopLevelDeclarations!val!14)\n            (= x TopLevelDeclarations!val!51)\n            (= x TopLevelDeclarations!val!57)\n            (= x TopLevelDeclarations!val!22)\n            (= x TopLevelDeclarations!val!46)\n            (= x TopLevelDeclarations!val!52)\n            (= x TopLevelDeclarations!val!39)\n            (= x TopLevelDeclarations!val!0)\n            (= x TopLevelDeclarations!val!29)\n            (= x TopLevelDeclarations!val!20)\n            (= x TopLevelDeclarations!val!27)\n            (= x TopLevelDeclarations!val!34)\n            (= x TopLevelDeclarations!val!16)\n            (= x TopLevelDeclarations!val!23)\n            (= x TopLevelDeclarations!val!36)\n            (= x TopLevelDeclarations!val!26)\n            (= x TopLevelDeclarations!val!37)\n            (= x TopLevelDeclarations!val!9)\n            (= x TopLevelDeclarations!val!48)\n            (= x TopLevelDeclarations!val!7)\n            (= x TopLevelDeclarations!val!56)\n            (= x TopLevelDeclarations!val!44)\n            (= x TopLevelDeclarations!val!31)\n            (= x TopLevelDeclarations!val!50)\n            (= x TopLevelDeclarations!val!32)\n            (= x TopLevelDeclarations!val!54)\n            (= x TopLevelDeclarations!val!30)\n            (= x TopLevelDeclarations!val!13)\n            (= x TopLevelDeclarations!val!3)\n            (= x TopLevelDeclarations!val!15)\n            (= x TopLevelDeclarations!val!53)\n            (= x TopLevelDeclarations!val!12)\n            (= x TopLevelDeclarations!val!28)\n            (= x TopLevelDeclarations!val!45)\n            (= x TopLevelDeclarations!val!49)\n            (= x TopLevelDeclarations!val!10)\n            (= x TopLevelDeclarations!val!11)\n            (= x TopLevelDeclarations!val!47)\n            (= x TopLevelDeclarations!val!19)\n            (= x TopLevelDeclarations!val!40)\n            (= x TopLevelDeclarations!val!33)\n            (= x TopLevelDeclarations!val!25)\n            (= x TopLevelDeclarations!val!41)\n            (= x TopLevelDeclarations!val!42)\n            (= x TopLevelDeclarations!val!35)\n            (= x TopLevelDeclarations!val!43)\n            (= x TopLevelDeclarations!val!38)\n            (= x TopLevelDeclarations!val!59)\n            (= x TopLevelDeclarations!val!1)\n            (= x TopLevelDeclarations!val!21)\n            (= x TopLevelDeclarations!val!17)))\n;; -----------\n(define-fun instanceOfEmployee!1 () Int\n  5)\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  2)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!13))\n(define-fun instanceOfPerson!0 () Int\n  1)\n(define-fun k!13 ((x!1 Int)) Any\n  (ite (= x!1 69) (lift-Person (mk-Person 6843))\n  (ite (= x!1 45) (lift-TopLevelDeclarations TopLevelDeclarations!val!30)\n  (ite (= x!1 46) (lift-TopLevelDeclarations TopLevelDeclarations!val!44)\n  (ite (= x!1 9) (lift-TopLevelDeclarations TopLevelDeclarations!val!34)\n  (ite (= x!1 63) (lift-TopLevelDeclarations TopLevelDeclarations!val!59)\n  (ite (= x!1 70) (lift-TopLevelDeclarations TopLevelDeclarations!val!53)\n  (ite (= x!1 65) (lift-Employee (mk-Employee 2150 66 3))\n  (ite (= x!1 49) (lift-TopLevelDeclarations TopLevelDeclarations!val!25)\n  (ite (= x!1 21) (lift-TopLevelDeclarations TopLevelDeclarations!val!46)\n  (ite (= x!1 41) (lift-TopLevelDeclarations TopLevelDeclarations!val!18)\n  (ite (= x!1 5) (lift-Employee (mk-Employee 19 3 4))\n  (ite (= x!1 33) (lift-TopLevelDeclarations TopLevelDeclarations!val!40)\n  (ite (= x!1 20) (lift-TopLevelDeclarations TopLevelDeclarations!val!8)\n  (ite (= x!1 55) (lift-TopLevelDeclarations TopLevelDeclarations!val!4)\n  (ite (= x!1 60) (lift-TopLevelDeclarations TopLevelDeclarations!val!12)\n  (ite (= x!1 43) (lift-TopLevelDeclarations TopLevelDeclarations!val!51)\n  (ite (= x!1 34) (lift-TopLevelDeclarations TopLevelDeclarations!val!21)\n  (ite (= x!1 48) (lift-TopLevelDeclarations TopLevelDeclarations!val!35)\n  (ite (= x!1 13) (lift-TopLevelDeclarations TopLevelDeclarations!val!24)\n  (ite (= x!1 50) (lift-TopLevelDeclarations TopLevelDeclarations!val!26)\n  (ite (= x!1 6) (lift-Employee (mk-Employee 2271 67 68))\n  (ite (= x!1 25) (lift-TopLevelDeclarations TopLevelDeclarations!val!32)\n  (ite (= x!1 44) (lift-TopLevelDeclarations TopLevelDeclarations!val!1)\n  (ite (= x!1 40) (lift-TopLevelDeclarations TopLevelDeclarations!val!38)\n  (ite (= x!1 30) (lift-TopLevelDeclarations TopLevelDeclarations!val!14)\n  (ite (= x!1 12) (lift-TopLevelDeclarations TopLevelDeclarations!val!52)\n  (ite (= x!1 51) (lift-TopLevelDeclarations TopLevelDeclarations!val!54)\n  (ite (= x!1 37) (lift-TopLevelDeclarations TopLevelDeclarations!val!5)\n  (ite (= x!1 62) (lift-TopLevelDeclarations TopLevelDeclarations!val!31)\n  (ite (= x!1 27) (lift-TopLevelDeclarations TopLevelDeclarations!val!22)\n  (ite (= x!1 17) (lift-TopLevelDeclarations TopLevelDeclarations!val!2)\n  (ite (= x!1 47) (lift-TopLevelDeclarations TopLevelDeclarations!val!58)\n  (ite (= x!1 7) (lift-TopLevelDeclarations TopLevelDeclarations!val!19)\n  (ite (= x!1 36) (lift-TopLevelDeclarations TopLevelDeclarations!val!41)\n  (ite (= x!1 68) (lift-Employee (mk-Employee 9177 69 6))\n  (ite (= x!1 52) (lift-TopLevelDeclarations TopLevelDeclarations!val!9)\n  (ite (= x!1 59) (lift-TopLevelDeclarations TopLevelDeclarations!val!16)\n  (ite (= x!1 10) (lift-TopLevelDeclarations TopLevelDeclarations!val!10)\n  (ite (= x!1 11) (lift-TopLevelDeclarations TopLevelDeclarations!val!6)\n  (ite (= x!1 16) (lift-TopLevelDeclarations TopLevelDeclarations!val!43)\n  (ite (= x!1 15) (lift-TopLevelDeclarations TopLevelDeclarations!val!3)\n  (ite (= x!1 14) (lift-TopLevelDeclarations TopLevelDeclarations!val!36)\n  (ite (= x!1 67) (lift-Person (mk-Person 1697))\n  (ite (= x!1 58) (lift-TopLevelDeclarations TopLevelDeclarations!val!47)\n  (ite (= x!1 71) (lift-TopLevelDeclarations TopLevelDeclarations!val!45)\n  (ite (= x!1 1) (lift-Person (mk-Person 8475))\n  (ite (= x!1 32) (lift-TopLevelDeclarations TopLevelDeclarations!val!20)\n  (ite (= x!1 64) (lift-Person (mk-Person 6559))\n  (ite (= x!1 22) (lift-TopLevelDeclarations TopLevelDeclarations!val!28)\n  (ite (= x!1 29) (lift-TopLevelDeclarations TopLevelDeclarations!val!11)\n  (ite (= x!1 73) (lift-TopLevelDeclarations TopLevelDeclarations!val!29)\n  (ite (= x!1 4) (lift-Employee (mk-Employee 1342 6 5))\n  (ite (= x!1 18) (lift-TopLevelDeclarations TopLevelDeclarations!val!56)\n  (ite (= x!1 39) (lift-TopLevelDeclarations TopLevelDeclarations!val!37)\n  (ite (= x!1 54) (lift-TopLevelDeclarations TopLevelDeclarations!val!39)\n  (ite (= x!1 8) (lift-TopLevelDeclarations TopLevelDeclarations!val!17)\n  (ite (= x!1 38) (lift-TopLevelDeclarations TopLevelDeclarations!val!23)\n  (ite (= x!1 23) (lift-TopLevelDeclarations TopLevelDeclarations!val!15)\n  (ite (= x!1 24) (lift-TopLevelDeclarations TopLevelDeclarations!val!50)\n  (ite (= x!1 3) (lift-Employee (mk-Employee 31 64 65))\n  (ite (= x!1 66) (lift-Person (mk-Person 2609))\n  (ite (= x!1 53) (lift-TopLevelDeclarations TopLevelDeclarations!val!55)\n  (ite (= x!1 61) (lift-TopLevelDeclarations TopLevelDeclarations!val!48)\n  (ite (= x!1 56) (lift-TopLevelDeclarations TopLevelDeclarations!val!27)\n  (ite (= x!1 26) (lift-TopLevelDeclarations TopLevelDeclarations!val!7)\n  (ite (= x!1 72) (lift-TopLevelDeclarations TopLevelDeclarations!val!49)\n  (ite (= x!1 42) (lift-TopLevelDeclarations TopLevelDeclarations!val!13)\n  (ite (= x!1 35) (lift-TopLevelDeclarations TopLevelDeclarations!val!42)\n  (ite (= x!1 57) (lift-TopLevelDeclarations TopLevelDeclarations!val!57)\n  (ite (= x!1 28) (lift-TopLevelDeclarations TopLevelDeclarations!val!33)\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Person (mk-Person (age Int)))))\n(declare-datatypes () ((Employee (mk-Employee (age Int)(boss Ref)(officemate Ref)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-Person (sel-Person Person))\n  (lift-Employee (sel-Employee Employee))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-Person ((this Ref)) Bool\n  (is-lift-Person (deref this))\n)\n\n(define-fun deref-Person ((this Ref)) Person\n  (sel-Person (deref this))\n)\n\n(define-fun deref-is-Employee ((this Ref)) Bool\n  (is-lift-Employee (deref this))\n)\n\n(define-fun deref-Employee ((this Ref)) Employee\n  (sel-Employee (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-Person ((this Ref)) Bool\n  (or\n    (deref-is-Person this)\n    (deref-is-Employee this)\n  )\n)\n\n(define-fun deref-isa-Employee ((this Ref)) Bool\n  (deref-is-Employee this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -----------------------------\n;   Getters for class Person:\n; -----------------------------\n\n; --- getters for Person.age: ---\n\n(define-fun Person.age ((this Ref)) Int\n  (ite (deref-is-Person this) (age (deref-Person this))\n  (age (deref-Employee this)))\n)\n\n(define-fun Person!age ((this Ref)) Int\n  (age (deref-Person this))\n)\n\n; -------------------------------\n;   Getters for class Employee:\n; -------------------------------\n\n; --- getters for Employee.age: ---\n\n(define-fun Employee.age ((this Ref)) Int\n  (age (deref-Employee this))\n)\n\n(define-fun Employee!age ((this Ref)) Int\n  (age (deref-Employee this))\n)\n\n; --- getters for Employee.boss: ---\n\n(define-fun Employee!boss ((this Ref)) Ref\n  (boss (deref-Employee this))\n)\n\n; --- getters for Employee.officemate: ---\n\n(define-fun Employee.officemate ((this Ref)) Ref\n  (officemate (deref-Employee this))\n)\n\n(define-fun Employee!officemate ((this Ref)) Ref\n  (officemate (deref-Employee this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -----------------------------\n;   Methods for class Person:\n; -----------------------------\n\n(define-fun Person.getAge ((this Ref)) Int\n  (Person.age this) \n)\n\n(define-fun Person!getAge ((this Ref)) Int\n  (Person!age this) \n)\n\n; -------------------------------\n;   Methods for class Employee:\n; -------------------------------\n\n(define-fun Employee.getAge ((this Ref)) Int\n  (Employee.age this) \n)\n\n(define-fun Employee!getAge ((this Ref)) Int\n  (Employee!age this) \n)\n\n(define-fun Employee.avoid ((this Ref)(p Ref)) Bool\n  (not (= (Employee.officemate this)  p))\n)\n\n(define-fun Employee!avoid ((this Ref)(p Ref)) Bool\n  (not (= (Employee!officemate this)  p))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; -------------------------------\n;   Invariant for class Person:\n; -------------------------------\n\n(define-fun Person.inv ((this Ref)) Bool\n  (and\n    (> (Person!getAge this ) 18)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Person this) (Person.inv this))\n))\n\n; ---------------------------------\n;   Invariant for class Employee:\n; ---------------------------------\n\n(define-fun Employee.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Person (Employee!boss this))\n    (deref-isa-Employee (Employee!officemate this))\n    (> (Employee!getAge this ) 18)\n    (> (Person.age (Employee!boss this) ) 30)\n    (= this (Employee.officemate (Employee!officemate this) ))\n    (Employee!avoid this (Employee!boss this) )\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Employee this) (Employee.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfPerson Ref)) (deref-is-Person instanceOfPerson)))\n(assert (exists ((instanceOfEmployee Ref)) (deref-is-Employee instanceOfEmployee)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt6.k":{"typeChecks":true,"model":"\nclass Event {\n  id:Int\n}\n\nclass State {\n  id:Int\n}\n\nclass RocketMachine {\n  off:State\n  ready:State\n  firing:State\n  turn_on:Event\n  fire:Event\n  turn_off:Event\n\n  req off != ready && off != firing && firing != ready\n\n  fun move(s:State,e:Event) : State\n  {\n    if s = off && e = turn_on then\n      ready\n    else\n      if s = ready && e = fire then\n        firing\n      else\n        if s = firing && e = turn_off then\n          off\n        else\n          s\n  }\n\n  req move(off,turn_on) = ready\n\n  req move(ready,fire) = firing\n\n  req move(firing,turn_off) = off\n}\n\n","name":"testsmt6.k","json2":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"id","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"State","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"id","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"RocketMachine","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["State"],"type":"QualifiedName"}],"type":"Expression"},"name":"off","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["State"],"type":"QualifiedName"}],"type":"Expression"},"name":"ready","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["State"],"type":"QualifiedName"}],"type":"Expression"},"name":"firing","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"turn_on","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"fire","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"turn_off","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"element":"off","type":"ElementValue"},{"element":"ready","type":"ElementValue"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"element":"off","type":"ElementValue"},{"element":"firing","type":"ElementValue"}]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"element":"firing","type":"ElementValue"},{"element":"ready","type":"ElementValue"}]}]},"type":"ConstraintDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["State"],"type":"QualifiedName"}],"type":"Expression"},"body":[{"exp":{"operand":[{"element":"ElementValue","type":"IfExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"s","type":"ElementValue"},{"element":"off","type":"ElementValue"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"e","type":"ElementValue"},{"element":"turn_on","type":"ElementValue"}]}]},{"element":"ready","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IfExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"s","type":"ElementValue"},{"element":"ready","type":"ElementValue"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"e","type":"ElementValue"},{"element":"fire","type":"ElementValue"}]}]},{"element":"firing","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IfExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"s","type":"ElementValue"},{"element":"firing","type":"ElementValue"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"e","type":"ElementValue"},{"element":"turn_off","type":"ElementValue"}]}]},{"element":"off","type":"ElementValue"},{"element":"s","type":"ElementValue"}],"type":"Expression"}],"type":"Expression"}],"type":"Expression"},"type":"ExpressionDecl"}],"ident":"move","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["State"],"type":"QualifiedName"}],"type":"Expression"},"name":"s","type":"Param"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"move","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"off","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"turn_on","type":"ElementValue"}],"type":"Expression"}]},{"element":"ready","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"move","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"ready","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"fire","type":"ElementValue"}],"type":"Expression"}]},{"element":"firing","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"move","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"firing","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"turn_off","type":"ElementValue"}],"type":"Expression"}]},{"element":"off","type":"ElementValue"}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"id","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"State","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"id","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"RocketMachine","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["State"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"off","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["State"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"ready","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["State"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"firing","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"turn_on","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"fire","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"turn_off","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"And","type":"BinExp","exp2":{"op":"NotEQ","type":"BinExp","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"ident":"firing","type":"IdentExp"}},"exp1":{"op":"And","type":"BinExp","exp2":{"op":"NotEQ","type":"BinExp","exp2":{"ident":"firing","type":"IdentExp"},"exp1":{"ident":"off","type":"IdentExp"}},"exp1":{"op":"NotEQ","type":"BinExp","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"ident":"off","type":"IdentExp"}}}},"type":"ConstraintDecl"},{"spec":[],"ty":{"ident":{"names":["State"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"body":[{"exp":{"trueBranch":{"ident":"ready","type":"IdentExp"},"falseBranch":{"trueBranch":{"ident":"firing","type":"IdentExp"},"falseBranch":{"trueBranch":{"ident":"off","type":"IdentExp"},"falseBranch":{"ident":"s","type":"IdentExp"},"type":"IfExp","cond":{"op":"And","type":"BinExp","exp2":{"op":"EQ","type":"BinExp","exp2":{"ident":"turn_off","type":"IdentExp"},"exp1":{"ident":"e","type":"IdentExp"}},"exp1":{"op":"EQ","type":"BinExp","exp2":{"ident":"firing","type":"IdentExp"},"exp1":{"ident":"s","type":"IdentExp"}}}},"type":"IfExp","cond":{"op":"And","type":"BinExp","exp2":{"op":"EQ","type":"BinExp","exp2":{"ident":"fire","type":"IdentExp"},"exp1":{"ident":"e","type":"IdentExp"}},"exp1":{"op":"EQ","type":"BinExp","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"ident":"s","type":"IdentExp"}}}},"type":"IfExp","cond":{"op":"And","type":"BinExp","exp2":{"op":"EQ","type":"BinExp","exp2":{"ident":"turn_on","type":"IdentExp"},"exp1":{"ident":"e","type":"IdentExp"}},"exp1":{"op":"EQ","type":"BinExp","exp2":{"ident":"off","type":"IdentExp"},"exp1":{"ident":"s","type":"IdentExp"}}}},"type":"ExpressionDecl"}],"ident":"move","typeParams":[],"params":[{"ty":{"ident":{"names":["State"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"s","type":"Param"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e","type":"Param"}],"type":"FunDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"ready","type":"IdentExp"},"exp1":{"args":[{"exp":{"ident":"off","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"turn_on","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"move","type":"IdentExp"}}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"firing","type":"IdentExp"},"exp1":{"args":[{"exp":{"ident":"ready","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"fire","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"move","type":"IdentExp"}}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"off","type":"IdentExp"},"exp1":{"args":[{"exp":{"ident":"firing","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"turn_off","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"move","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfEvent!0 () Int\n  0)\n(define-fun instanceOfRocketMachine!2 () Int\n  2)\n(define-fun instanceOfTopLevelDeclarations!3 () Int\n  3)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!4))\n(define-fun instanceOfState!1 () Int\n  1)\n(define-fun k!5 ((x!1 Int)) Int\n  (ite (= x!1 3) 3\n  (ite (= x!1 8) 8\n  (ite (= x!1 10) 10\n  (ite (= x!1 0) 0\n  (ite (= x!1 2) 2\n  (ite (= x!1 9) 9\n  (ite (= x!1 6) 6\n  (ite (= x!1 1) 1\n  (ite (= x!1 11) 11\n    7))))))))))\n(define-fun k!4!6 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-State (mk-State 5))\n  (ite (= x!1 10) (lift-Event (mk-Event 13))\n  (ite (= x!1 6) (lift-State (mk-State 17))\n  (ite (= x!1 0) (lift-Event (mk-Event 4))\n  (ite (= x!1 11) (lift-Event (mk-Event 12))\n  (ite (= x!1 2) (lift-RocketMachine (mk-RocketMachine 6 7 8 9 10 11))\n  (ite (= x!1 9) (lift-Event (mk-Event 14))\n  (ite (= x!1 7) (lift-State (mk-State 16))\n  (ite (= x!1 8) (lift-State (mk-State 15))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0)))))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (k!4!6 (k!5 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Event (mk-Event (id Int)))))\n(declare-datatypes () ((State (mk-State (id Int)))))\n(declare-datatypes () ((RocketMachine (mk-RocketMachine (off Ref)(ready Ref)(firing Ref)(turn_on Ref)(fire Ref)(turn_off Ref)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-Event (sel-Event Event))\n  (lift-State (sel-State State))\n  (lift-RocketMachine (sel-RocketMachine RocketMachine))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-State ((this Ref)) Bool\n  (is-lift-State (deref this))\n)\n\n(define-fun deref-State ((this Ref)) State\n  (sel-State (deref this))\n)\n\n(define-fun deref-is-RocketMachine ((this Ref)) Bool\n  (is-lift-RocketMachine (deref this))\n)\n\n(define-fun deref-RocketMachine ((this Ref)) RocketMachine\n  (sel-RocketMachine (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-State ((this Ref)) Bool\n  (deref-is-State this)\n)\n\n(define-fun deref-isa-RocketMachine ((this Ref)) Bool\n  (deref-is-RocketMachine this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------------------\n;   Getters for class RocketMachine:\n; ------------------------------------\n\n; --- getters for RocketMachine.off: ---\n\n(define-fun RocketMachine.off ((this Ref)) Ref\n  (off (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!off ((this Ref)) Ref\n  (off (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.ready: ---\n\n(define-fun RocketMachine.ready ((this Ref)) Ref\n  (ready (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!ready ((this Ref)) Ref\n  (ready (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.firing: ---\n\n(define-fun RocketMachine.firing ((this Ref)) Ref\n  (firing (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!firing ((this Ref)) Ref\n  (firing (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.turn_on: ---\n\n(define-fun RocketMachine.turn_on ((this Ref)) Ref\n  (turn_on (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!turn_on ((this Ref)) Ref\n  (turn_on (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.fire: ---\n\n(define-fun RocketMachine.fire ((this Ref)) Ref\n  (fire (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!fire ((this Ref)) Ref\n  (fire (deref-RocketMachine this))\n)\n\n; --- getters for RocketMachine.turn_off: ---\n\n(define-fun RocketMachine.turn_off ((this Ref)) Ref\n  (turn_off (deref-RocketMachine this))\n)\n\n(define-fun RocketMachine!turn_off ((this Ref)) Ref\n  (turn_off (deref-RocketMachine this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------------------\n;   Methods for class RocketMachine:\n; ------------------------------------\n\n(define-fun RocketMachine.move ((this Ref)(s Ref)(e Ref)) Ref\n  (ite (and (= s (RocketMachine.off this) ) (= e (RocketMachine.turn_on this) )) (RocketMachine.ready this)  (ite (and (= s (RocketMachine.ready this) ) (= e (RocketMachine.fire this) )) (RocketMachine.firing this)  (ite (and (= s (RocketMachine.firing this) ) (= e (RocketMachine.turn_off this) )) (RocketMachine.off this)  s)))\n)\n\n(define-fun RocketMachine!move ((this Ref)(s Ref)(e Ref)) Ref\n  (ite (and (= s (RocketMachine!off this) ) (= e (RocketMachine!turn_on this) )) (RocketMachine!ready this)  (ite (and (= s (RocketMachine!ready this) ) (= e (RocketMachine!fire this) )) (RocketMachine!firing this)  (ite (and (= s (RocketMachine!firing this) ) (= e (RocketMachine!turn_off this) )) (RocketMachine!off this)  s)))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ------------------------------\n;   Invariant for class Event:\n; ------------------------------\n\n(define-fun Event.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Event this) (Event.inv this))\n))\n\n; ------------------------------\n;   Invariant for class State:\n; ------------------------------\n\n(define-fun State.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-State this) (State.inv this))\n))\n\n; --------------------------------------\n;   Invariant for class RocketMachine:\n; --------------------------------------\n\n(define-fun RocketMachine.inv ((this Ref)) Bool\n  (and\n    (deref-isa-State (RocketMachine!off this))\n    (deref-isa-State (RocketMachine!ready this))\n    (deref-isa-State (RocketMachine!firing this))\n    (deref-isa-Event (RocketMachine!turn_on this))\n    (deref-isa-Event (RocketMachine!fire this))\n    (deref-isa-Event (RocketMachine!turn_off this))\n    (and (and (not (= (RocketMachine!off this)  (RocketMachine!ready this) )) (not (= (RocketMachine!off this)  (RocketMachine!firing this) ))) (not (= (RocketMachine!firing this)  (RocketMachine!ready this) )))\n    (= (RocketMachine!move this (RocketMachine!off this)  (RocketMachine!turn_on this) ) (RocketMachine!ready this) )\n    (= (RocketMachine!move this (RocketMachine!ready this)  (RocketMachine!fire this) ) (RocketMachine!firing this) )\n    (= (RocketMachine!move this (RocketMachine!firing this)  (RocketMachine!turn_off this) ) (RocketMachine!off this) )\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-RocketMachine this) (RocketMachine.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfEvent Ref)) (deref-is-Event instanceOfEvent)))\n(assert (exists ((instanceOfState Ref)) (deref-is-State instanceOfState)))\n(assert (exists ((instanceOfRocketMachine Ref)) (deref-is-RocketMachine instanceOfRocketMachine)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"inheritance9.k":{"typeChecks":true,"model":"\nclass A {\n  a:Int = 10\n}\n\nclass B extending A {\n  b:Int\n\n  req b = a + 1\n}\n\nclass C extending B {\n  c:Int\n\n  req c = b + 1\n}\n\nclass D extending C {\n  d:Int\n\n  req d = c + 1\n}\n\nclass E {\n  a:A\n}\n\n","name":"inheritance9.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"b","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"c","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"b","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"d","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"c","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"type":"LiteralInteger","i":10},"modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"a","type":"IdentExp"}},"exp1":{"ident":"b","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"b","type":"IdentExp"}},"exp1":{"ident":"c","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"c","type":"IdentExp"}},"exp1":{"ident":"d","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfE!4 () Int\n  4)\n(define-fun instanceOfTopLevelDeclarations!5 () Int\n  5)\n(define-fun instanceOfD!3 () Int\n  3)\n(define-fun instanceOfC!2 () Int\n  2)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!6))\n(define-fun instanceOfB!1 () Int\n  1)\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!7 ((x!1 Int)) Int\n  (ite (= x!1 5) 5\n  (ite (= x!1 3) 3\n  (ite (= x!1 2) 2\n  (ite (= x!1 4) 4\n  (ite (= x!1 1) 1\n  (ite (= x!1 0) 0\n    6)))))))\n(define-fun k!6!8 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 2) (lift-C (mk-C 10 11 12))\n  (ite (= x!1 4) (lift-E (mk-E 6))\n  (ite (= x!1 0) (lift-A (mk-A 10))\n  (ite (= x!1 3) (lift-D (mk-D 10 11 12 13))\n    (lift-B (mk-B 10 11))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (k!6!8 (k!7 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)))))\n(declare-datatypes () ((D (mk-D (a Int)(b Int)(c Int)(d Int)))))\n(declare-datatypes () ((E (mk-E (a Ref)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-E (sel-E E))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-E ((this Ref)) Bool\n  (is-lift-E (deref this))\n)\n\n(define-fun deref-E ((this Ref)) E\n  (sel-E (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-E ((this Ref)) Bool\n  (deref-is-E this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.a: ---\n\n(define-fun C!a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n; --- getters for C.b: ---\n\n(define-fun C!b ((this Ref)) Int\n  (b (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.a: ---\n\n(define-fun D.a ((this Ref)) Int\n  (a (deref-D this))\n)\n\n(define-fun D!a ((this Ref)) Int\n  (a (deref-D this))\n)\n\n; --- getters for D.b: ---\n\n(define-fun D!b ((this Ref)) Int\n  (b (deref-D this))\n)\n\n; --- getters for D.c: ---\n\n(define-fun D.c ((this Ref)) Int\n  (c (deref-D this))\n)\n\n(define-fun D!c ((this Ref)) Int\n  (c (deref-D this))\n)\n\n; --- getters for D.d: ---\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; ------------------------\n;   Getters for class E:\n; ------------------------\n\n; --- getters for E.a: ---\n\n(define-fun E!a ((this Ref)) Ref\n  (a (deref-E this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A!a this) 10)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (= (B!a this) 10)\n    (= (B!b this)  (+ (B!a this)  1))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (= (C!a this) 10)\n    (= (C!b this)  (+ (C!a this)  1))\n    (= (C!c this)  (+ (C!b this)  1))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n(define-fun D.inv ((this Ref)) Bool\n  (and\n    (= (D!a this) 10)\n    (= (D!b this)  (+ (D!a this)  1))\n    (= (D!c this)  (+ (D!b this)  1))\n    (= (D!d this)  (+ (D!c this)  1))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; --------------------------\n;   Invariant for class E:\n; --------------------------\n\n(define-fun E.inv ((this Ref)) Bool\n  (and\n    (deref-isa-A (E!a this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-E this) (E.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (deref-is-C instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (deref-is-D instanceOfD)))\n(assert (exists ((instanceOfE Ref)) (deref-is-E instanceOfE)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt5.k":{"typeChecks":true,"model":"\nclass Event {\n  t1:Int\n  t2:Int\n\n  fun meets(other:Event) : Bool\n  {\n    t2 = other.t1\n  }\n\n  fun before(other:Event) : Bool\n  {\n    t2 < other.t1\n  }\n\n  fun contains(other:Event) : Bool\n  {\n    t1 < other.t1 && other.t2 < t2\n  }\n\n  req t1 < t2\n\n  req t2 - t1 > 10\n}\n\nclass Schedule {\n  a:Event\n  b:Event\n  c:Event\n  d:Event\n\n  req a.meets(b)\n\n  req b.before(c)\n\n  req c.contains(d)\n}\n\n","name":"testsmt5.k","json2":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"t2","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"other","type":"ElementValue"},"t1"]}]},"type":"ExpressionDecl"}],"ident":"meets","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"other","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t2","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"other","type":"ElementValue"},"t1"]}]},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"other","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t1","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"other","type":"ElementValue"},"t1"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"other","type":"ElementValue"},"t2"]},{"element":"t2","type":"ElementValue"}]}]},"type":"ExpressionDecl"}],"ident":"contains","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"other","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t1","type":"ElementValue"},{"element":"t2","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Minus",{"element":"t2","type":"ElementValue"},{"element":"t1","type":"ElementValue"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Schedule","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"meets"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"b","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"b","type":"ElementValue"},"before"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"c","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"c","type":"ElementValue"},"contains"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"d","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"EQ","type":"BinExp","exp2":{"exp":{"ident":"other","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"ident":"t2","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"meets","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"other","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"other","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"ident":"t2","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"other","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"And","type":"BinExp","exp2":{"op":"LT","type":"BinExp","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"exp":{"ident":"other","type":"IdentExp"},"ident":"t2","type":"DotExp"}},"exp1":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"other","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"ident":"t1","type":"IdentExp"}}},"type":"ExpressionDecl"}],"ident":"contains","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"other","type":"Param"}],"type":"FunDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"op":"Minus","type":"BinExp","exp2":{"ident":"t1","type":"IdentExp"},"exp1":{"ident":"t2","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Schedule","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"exp":{"args":[{"exp":{"ident":"b","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"a","type":"IdentExp"},"ident":"meets","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"ident":"c","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"b","type":"IdentExp"},"ident":"before","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"ident":"d","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"c","type":"IdentExp"},"ident":"contains","type":"DotExp"}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfEvent!0 () Int\n  2)\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  4)\n(define-fun instanceOfSchedule!1 () Int\n  3)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-Schedule (mk-Schedule 5 6 7 8))\n  (ite (= x!1 8) (lift-Event (mk-Event 1 12))\n  (ite (= x!1 4) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 7) (lift-Event (mk-Event 0 13))\n  (ite (= x!1 5) (lift-Event (mk-Event (- 23) (- 12)))\n  (ite (= x!1 2) (lift-Event (mk-Event 2426 2437))\n    (lift-Event (mk-Event (- 12) (- 1))))))))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 4) 4\n  (ite (= x!1 6) 6\n  (ite (= x!1 7) 7\n  (ite (= x!1 3) 3\n  (ite (= x!1 5) 5\n  (ite (= x!1 8) 8\n    2)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Event (mk-Event (t1 Int)(t2 Int)))))\n(declare-datatypes () ((Schedule (mk-Schedule (a Ref)(b Ref)(c Ref)(d Ref)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-Event (sel-Event Event))\n  (lift-Schedule (sel-Schedule Schedule))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-Schedule ((this Ref)) Bool\n  (is-lift-Schedule (deref this))\n)\n\n(define-fun deref-Schedule ((this Ref)) Schedule\n  (sel-Schedule (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-Schedule ((this Ref)) Bool\n  (deref-is-Schedule this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ----------------------------\n;   Getters for class Event:\n; ----------------------------\n\n; --- getters for Event.t1: ---\n\n(define-fun Event.t1 ((this Ref)) Int\n  (t1 (deref-Event this))\n)\n\n(define-fun Event!t1 ((this Ref)) Int\n  (t1 (deref-Event this))\n)\n\n; --- getters for Event.t2: ---\n\n(define-fun Event.t2 ((this Ref)) Int\n  (t2 (deref-Event this))\n)\n\n(define-fun Event!t2 ((this Ref)) Int\n  (t2 (deref-Event this))\n)\n\n; -------------------------------\n;   Getters for class Schedule:\n; -------------------------------\n\n; --- getters for Schedule.a: ---\n\n(define-fun Schedule!a ((this Ref)) Ref\n  (a (deref-Schedule this))\n)\n\n; --- getters for Schedule.b: ---\n\n(define-fun Schedule!b ((this Ref)) Ref\n  (b (deref-Schedule this))\n)\n\n; --- getters for Schedule.c: ---\n\n(define-fun Schedule!c ((this Ref)) Ref\n  (c (deref-Schedule this))\n)\n\n; --- getters for Schedule.d: ---\n\n(define-fun Schedule!d ((this Ref)) Ref\n  (d (deref-Schedule this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ----------------------------\n;   Methods for class Event:\n; ----------------------------\n\n(define-fun Event.meets ((this Ref)(other Ref)) Bool\n  (= (Event.t2 this)  (Event.t1 other))\n)\n\n(define-fun Event!meets ((this Ref)(other Ref)) Bool\n  (= (Event!t2 this)  (Event.t1 other))\n)\n\n(define-fun Event.before ((this Ref)(other Ref)) Bool\n  (< (Event.t2 this)  (Event.t1 other))\n)\n\n(define-fun Event!before ((this Ref)(other Ref)) Bool\n  (< (Event!t2 this)  (Event.t1 other))\n)\n\n(define-fun Event.contains ((this Ref)(other Ref)) Bool\n  (and (< (Event.t1 this)  (Event.t1 other)) (< (Event.t2 other) (Event.t2 this) ))\n)\n\n(define-fun Event!contains ((this Ref)(other Ref)) Bool\n  (and (< (Event!t1 this)  (Event.t1 other)) (< (Event.t2 other) (Event!t2 this) ))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ------------------------------\n;   Invariant for class Event:\n; ------------------------------\n\n(define-fun Event.inv ((this Ref)) Bool\n  (and\n    (< (Event!t1 this)  (Event!t2 this) )\n    (> (- (Event!t2 this)  (Event!t1 this) ) 10)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Event this) (Event.inv this))\n))\n\n; ---------------------------------\n;   Invariant for class Schedule:\n; ---------------------------------\n\n(define-fun Schedule.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Event (Schedule!a this))\n    (deref-isa-Event (Schedule!b this))\n    (deref-isa-Event (Schedule!c this))\n    (deref-isa-Event (Schedule!d this))\n    (Event.meets (Schedule!a this)  (Schedule!b this) )\n    (Event.before (Schedule!b this)  (Schedule!c this) )\n    (Event.contains (Schedule!c this)  (Schedule!d this) )\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Schedule this) (Schedule.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfEvent Ref)) (deref-is-Event instanceOfEvent)))\n(assert (exists ((instanceOfSchedule Ref)) (deref-is-Schedule instanceOfSchedule)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"inheritance4.k":{"typeChecks":true,"model":"\nclass A {\n  x:Int\n\n  req x > 10\n}\n\nclass B extending A {\n  y:Int\n\n  req y > 10 && y < 20\n\n  req x < 20\n}\n\nclass C extending B {\n  z:Int\n\n  req z = 4 && x < 15\n}\n\n","name":"inheritance4.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"y","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"y","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},20],"type":"Expression"}]}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},20],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},4],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},15],"type":"Expression"}]}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"And","type":"BinExp","exp2":{"op":"LT","type":"BinExp","exp2":{"type":"LiteralInteger","i":20},"exp1":{"ident":"y","type":"IdentExp"}},"exp1":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"ident":"y","type":"IdentExp"}}},"type":"ConstraintDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"type":"LiteralInteger","i":20},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"And","type":"BinExp","exp2":{"op":"LT","type":"BinExp","exp2":{"type":"LiteralInteger","i":15},"exp1":{"ident":"x","type":"IdentExp"}},"exp1":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":4},"exp1":{"ident":"z","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!3 () Int\n  5)\n(define-fun instanceOfC!2 () Int\n  3)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!4))\n(define-fun instanceOfB!1 () Int\n  2)\n(define-fun instanceOfA!0 () Int\n  1)\n(define-fun k!5 ((x!1 Int)) Int\n  (ite (= x!1 3) 3\n  (ite (= x!1 2) 2\n  (ite (= x!1 1) 1\n    5))))\n(define-fun k!4!6 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-C (mk-C 12 12 4))\n  (ite (= x!1 1) (lift-A (mk-A 11))\n  (ite (= x!1 2) (lift-B (mk-B 18 15))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0)))))\n(define-fun k!4 ((x!1 Int)) Any\n  (k!4!6 (k!5 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)))))\n(declare-datatypes () ((C (mk-C (x Int)(y Int)(z Int)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (ite (deref-is-B this) (x (deref-B this))\n  (x (deref-C this))))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.x: ---\n\n(define-fun B.x ((this Ref)) Int\n  (ite (deref-is-B this) (x (deref-B this))\n  (x (deref-C this)))\n)\n\n(define-fun B!x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n; --- getters for B.y: ---\n\n(define-fun B.y ((this Ref)) Int\n  (ite (deref-is-B this) (y (deref-B this))\n  (y (deref-C this)))\n)\n\n(define-fun B!y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.x: ---\n\n(define-fun C!x ((this Ref)) Int\n  (x (deref-C this))\n)\n\n; --- getters for C.y: ---\n\n(define-fun C!y ((this Ref)) Int\n  (y (deref-C this))\n)\n\n; --- getters for C.z: ---\n\n(define-fun C!z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (> (A!x this)  10)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (> (B!x this)  10)\n    (and (> (B!y this)  10) (< (B!y this)  20))\n    (< (B!x this)  20)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (> (C!x this)  10)\n    (and (> (C!y this)  10) (< (C!y this)  20))\n    (< (C!x this)  20)\n    (and (= (C!z this)  4) (< (C!x this)  15))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (deref-is-C instanceOfC)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt15.k":{"typeChecks":true,"model":"\nclass A {\n  a:Int\n\n  req a = {\n    k1:Int = 1\n    k1\n  } + {\n    k2:Int = 2\n    k3:Int = 3\n    k2 + k3\n  }\n}\n\n","name":"testsmt15.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"a","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"operand":[{"element":"ElementValue","type":"BlockExp"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k1","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"exp":{"element":"k1","type":"ElementValue"},"type":"ExpressionDecl"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"BlockExp"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k2","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k3","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"k2","type":"ElementValue"},{"element":"k3","type":"ElementValue"}]},"type":"ExpressionDecl"}],"type":"Expression"}]}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"op":"Plus","type":"BinExp","exp2":{"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k2","expr":{"type":"LiteralInteger","i":2},"modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"k3","expr":{"type":"LiteralInteger","i":3},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k3","type":"IdentExp"},"exp1":{"ident":"k2","type":"IdentExp"}},"type":"ExpressionDecl"}],"type":"BlockExp"},"exp1":{"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k1","expr":{"type":"LiteralInteger","i":1},"modifiers":[],"type":"PropertyDecl"},{"exp":{"ident":"k1","type":"IdentExp"},"type":"ExpressionDecl"}],"type":"BlockExp"}},"exp1":{"ident":"a","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!1 () Int\n  1)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!2))\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!3 ((x!1 Int)) Int\n  (ite (= x!1 0) 0\n    1))\n(define-fun k!2!4 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-A (mk-A 6))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0)))\n(define-fun k!2 ((x!1 Int)) Any\n  (k!2!4 (k!3 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A.a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A!a this)  (+   (let ((k1 1))\n    k1)   (let ((k2 2))\n    (let ((k3 3))\n      (+ k2 k3)))))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt3.k":{"typeChecks":true,"model":"\nclass A {\n  x:Int = 1\n  y:Int\n\n  fun sum : Int\n  {\n    x + y\n  }\n\n  req x < y\n}\n\nclass B extending A {\n  z:Int\n  a1:A\n  a2:A = A(y :: 17)\n  a3:A = if z > 3 then\n    A(y :: z + 9)\n  else\n    A(y :: 33)\n\n  req a1.y < z\n\n  req y < z\n\n  req sum > 10\n}\n\ninst1A:A = A(x :: 1,y :: 2)\n\ninst2A:A = A(y :: 2)\n\ninst1B:B = B(a1 :: inst1A,z :: 200)\n\n","name":"testsmt3.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"x","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"x","type":"ElementValue"},{"element":"y","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"sum","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"x","type":"ElementValue"},{"element":"y","type":"ElementValue"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"a1","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"a2","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"A","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"y",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},17],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"a3","expr":{"operand":[{"element":"ElementValue","type":"IfExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"A","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"y",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},9],"type":"Expression"}]}],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"A","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"y",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},33],"type":"Expression"}],"type":"Expression"}]}],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a1","type":"ElementValue"},"y"]},{"element":"z","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"y","type":"ElementValue"},{"element":"z","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"sum","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"inst1A","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"A","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"x",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"y",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"inst2A","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"A","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"y",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"inst1B","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"B","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"a1",{"element":"inst1A","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"z",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},200],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"x","expr":{"type":"LiteralInteger","i":1},"modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"sum","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a1","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"a2","expr":{"args":[{"exp":{"type":"LiteralInteger","i":17},"ident":"y","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"A","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"a3","expr":{"trueBranch":{"args":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":9},"exp1":{"ident":"z","type":"IdentExp"}},"ident":"y","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"A","type":"IdentExp"}},"falseBranch":{"args":[{"exp":{"type":"LiteralInteger","i":33},"ident":"y","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"A","type":"IdentExp"}},"type":"IfExp","cond":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":3},"exp1":{"ident":"z","type":"IdentExp"}}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"z","type":"IdentExp"},"exp1":{"exp":{"ident":"a1","type":"IdentExp"},"ident":"y","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"z","type":"IdentExp"},"exp1":{"ident":"y","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"ident":"sum","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"inst1A","expr":{"args":[{"exp":{"type":"LiteralInteger","i":1},"ident":"x","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":2},"ident":"y","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"A","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"inst2A","expr":{"args":[{"exp":{"type":"LiteralInteger","i":2},"ident":"y","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"A","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"inst1B","expr":{"args":[{"exp":{"ident":"inst1A","type":"IdentExp"},"ident":"a1","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":200},"ident":"z","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"B","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun const__4 () Int\n  1)\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  5)\n(define-fun instanceOfB!1 () Int\n  4)\n(define-fun instanceOfA!0 () Int\n  3)\n(define-fun const__5 () Int\n  1)\n(define-fun const__6 () Int\n  27)\n(define-fun const__7 () Int\n  21)\n(define-fun const__8 () Int\n  22)\n(define-fun const__3 () Int\n  15)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun const__2 () Int\n  1)\n(define-fun const__1 () Int\n  1)\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 12) (lift-A (mk-A 1 20))\n  (ite (= x!1 22) (lift-A (mk-A 1 209))\n  (ite (= x!1 15) (lift-B (mk-B 1 27 200 13 21 22))\n  (ite (= x!1 14) (lift-A (mk-A 1 2))\n  (ite (= x!1 13) (lift-A (mk-A 1 2))\n  (ite (= x!1 5) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 13 14 15))\n  (ite (= x!1 3) (lift-A (mk-A 1 2439))\n  (ite (= x!1 4) (lift-B (mk-B 1 10 11 6 7 12))\n  (ite (= x!1 6) (lift-A (mk-A 1 9))\n    (lift-A (mk-A 1 17))))))))))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 5) 5\n  (ite (= x!1 13) 13\n  (ite (= x!1 14) 14\n  (ite (= x!1 21) 21\n  (ite (= x!1 12) 12\n  (ite (= x!1 7) 7\n  (ite (= x!1 22) 22\n  (ite (= x!1 6) 6\n  (ite (= x!1 4) 4\n  (ite (= x!1 3) 3\n    15)))))))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)(y Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)(z Int)(a1 Ref)(a2 Ref)(a3 Ref)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (inst1A Ref)(inst2A Ref)(inst1B Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (x (deref-B this)))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; --- getters for A.y: ---\n\n(define-fun A.y ((this Ref)) Int\n  (ite (deref-is-A this) (y (deref-A this))\n  (y (deref-B this)))\n)\n\n(define-fun A!y ((this Ref)) Int\n  (y (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.x: ---\n\n(define-fun B.x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n(define-fun B!x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n; --- getters for B.y: ---\n\n(define-fun B.y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n(define-fun B!y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; --- getters for B.z: ---\n\n(define-fun B!z ((this Ref)) Int\n  (z (deref-B this))\n)\n\n; --- getters for B.a1: ---\n\n(define-fun B!a1 ((this Ref)) Ref\n  (a1 (deref-B this))\n)\n\n; --- getters for B.a2: ---\n\n(define-fun B!a2 ((this Ref)) Ref\n  (a2 (deref-B this))\n)\n\n; --- getters for B.a3: ---\n\n(define-fun B!a3 ((this Ref)) Ref\n  (a3 (deref-B this))\n)\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.inst1A: ---\n\n(define-fun TopLevelDeclarations!inst1A ((this Ref)) Ref\n  (inst1A (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.inst2A: ---\n\n(define-fun TopLevelDeclarations!inst2A ((this Ref)) Ref\n  (inst2A (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.inst1B: ---\n\n(define-fun TopLevelDeclarations!inst1B ((this Ref)) Ref\n  (inst1B (deref-TopLevelDeclarations this))\n)\n\n; ========================================\n; === Constructor parameter constants: ===\n; ========================================\n\n(declare-const const__1 Int)\n(declare-const const__2 Int)\n(declare-const const__3 Int)\n(declare-const const__4 Int)\n(declare-const const__5 Int)\n(declare-const const__6 Int)\n(declare-const const__7 Ref)\n(declare-const const__8 Ref)\n\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.sum ((this Ref)) Int\n  (+ (A.x this)  (A.y this) )\n)\n\n(define-fun A!sum ((this Ref)) Int\n  (+ (A!x this)  (A!y this) )\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.sum ((this Ref)) Int\n  (+ (B.x this)  (B.y this) )\n)\n\n(define-fun B!sum ((this Ref)) Int\n  (+ (B!x this)  (B!y this) )\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A!x this) 1)\n    (< (A!x this)  (A!y this) )\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (= (B!x this) 1)\n    (= (deref (B!a2 this)) (lift-A (mk-A const__1 17)))\n    (= (deref (B!a3 this)) (ite (> (B!z this)  3) (lift-A (mk-A const__2 (+ (B!z this)  9))) (lift-A (mk-A const__3 33))))\n    (deref-isa-A (B!a1 this))\n    (deref-isa-A (B!a2 this))\n    (deref-isa-A (B!a3 this))\n    (< (B!x this)  (B!y this) )\n    (< (A.y (B!a1 this) ) (B!z this) )\n    (< (B!y this)  (B!z this) )\n    (> (B!sum this)  10)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (deref (TopLevelDeclarations!inst1A this)) (lift-A (mk-A 1 2)))\n    (= (deref (TopLevelDeclarations!inst2A this)) (lift-A (mk-A const__4 2)))\n    (= (deref (TopLevelDeclarations!inst1B this)) (lift-B (mk-B const__5 const__6 200 (TopLevelDeclarations!inst1A this)  const__7 const__8)))\n    (deref-isa-A (TopLevelDeclarations!inst1A this))\n    (deref-isa-A (TopLevelDeclarations!inst2A this))\n    (deref-isa-B (TopLevelDeclarations!inst1B this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"inheritance11.k":{"typeChecks":true,"model":"\nclass A {\n  a:Int\n  b:Int\n  c:Int\n  d:Int\n  e:Int\n  f:Int\n  g:Int\n\n  req a + b + c + d + e + f + g = 90\n}\n\nclass B extending A\n\nclass C extending B\n\nclass D extending C\n\nclass E extending D\n\nclass F extending E\n\nclass G extending F\n\nclass H extending G\n\nobjectA:A\n\nreq objectA is H\n\n","name":"inheritance11.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"e","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"f","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"g","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"element":"b","type":"ElementValue"}]},{"element":"c","type":"ElementValue"}]},{"element":"d","type":"ElementValue"}]},{"element":"e","type":"ElementValue"}]},{"element":"f","type":"ElementValue"}]},{"element":"g","type":"ElementValue"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},90],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["D"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"F","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["E"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"G","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["F"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"H","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["G"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"objectA","modifiers":[],"type":"PropertyDecl"},{"exp":{"operand":[{"element":"ElementValue","type":"TypeCastCheckExp"},"false",{"element":"objectA","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["H"],"type":"QualifiedName"}],"type":"Expression"}],"type":"Expression"},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"e","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"f","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"g","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":90},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"g","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"f","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"e","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"d","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"c","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"}}}}}}}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["D"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"F","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["E"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"G","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["F"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"H","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["G"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"objectA","modifiers":[],"type":"PropertyDecl"},{"exp":{"ty":{"ident":{"names":["H"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"exp":{"ident":"objectA","type":"IdentExp"},"cast":"false","type":"TypeCastCheckExp"},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfB!1 () Int\n  2)\n(define-fun instanceOfA!0 () Int\n  1)\n(define-fun instanceOfH!7 () Int\n  8)\n(define-fun instanceOfD!3 () Int\n  4)\n(define-fun instanceOfTopLevelDeclarations!8 () Int\n  9)\n(define-fun instanceOfG!6 () Int\n  7)\n(define-fun instanceOfE!4 () Int\n  5)\n(define-fun instanceOfF!5 () Int\n  6)\n(define-fun instanceOfC!2 () Int\n  3)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!9))\n(define-fun k!9!11 ((x!1 Int)) Any\n  (ite (= x!1 7) (lift-G (mk-G 7065 3960 624 (- 26120) 7567 2829 4165))\n  (ite (= x!1 3) (lift-C (mk-C (- 30123) 4683 7854 5598 4770 4096 3212))\n  (ite (= x!1 4) (lift-D (mk-D 8003 2747 5259 5941 (- 38102) 7373 8869))\n  (ite (= x!1 8) (lift-H (mk-H 4321 (- 23153) 1246 3634 5618 5725 2699))\n  (ite (= x!1 6) (lift-F (mk-F 531 3023 334 (- 12781) 1391 6019 1573))\n  (ite (= x!1 5) (lift-E (mk-E 3502 1818 239 3152 (- 15611) 4186 2804))\n  (ite (= x!1 1) (lift-A (mk-A (- 17779) 0 1648 2328 4386 7176 2331))\n  (ite (= x!1 2) (lift-B (mk-B (- 24239) 2112 4135 6926 1102 1650 8404))\n  (ite (= x!1 9) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 10))\n    (lift-H (mk-H 2772 (- 20427) 6811 2061 3565 5189 119))))))))))))\n(define-fun k!10 ((x!1 Int)) Int\n  (ite (= x!1 8) 8\n  (ite (= x!1 10) 10\n  (ite (= x!1 4) 4\n  (ite (= x!1 9) 9\n  (ite (= x!1 7) 7\n  (ite (= x!1 3) 3\n  (ite (= x!1 6) 6\n  (ite (= x!1 5) 5\n  (ite (= x!1 2) 2\n    1))))))))))\n(define-fun k!9 ((x!1 Int)) Any\n  (k!9!11 (k!10 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((D (mk-D (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((E (mk-E (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((F (mk-F (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((G (mk-G (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((H (mk-H (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (objectA Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-E (sel-E E))\n  (lift-F (sel-F F))\n  (lift-G (sel-G G))\n  (lift-H (sel-H H))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-E ((this Ref)) Bool\n  (is-lift-E (deref this))\n)\n\n(define-fun deref-E ((this Ref)) E\n  (sel-E (deref this))\n)\n\n(define-fun deref-is-F ((this Ref)) Bool\n  (is-lift-F (deref this))\n)\n\n(define-fun deref-F ((this Ref)) F\n  (sel-F (deref this))\n)\n\n(define-fun deref-is-G ((this Ref)) Bool\n  (is-lift-G (deref this))\n)\n\n(define-fun deref-G ((this Ref)) G\n  (sel-G (deref this))\n)\n\n(define-fun deref-is-H ((this Ref)) Bool\n  (is-lift-H (deref this))\n)\n\n(define-fun deref-H ((this Ref)) H\n  (sel-H (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (or\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-E ((this Ref)) Bool\n  (or\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-F ((this Ref)) Bool\n  (or\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-G ((this Ref)) Bool\n  (or\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-H ((this Ref)) Bool\n  (deref-is-H this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; --- getters for A.b: ---\n\n(define-fun A!b ((this Ref)) Int\n  (b (deref-A this))\n)\n\n; --- getters for A.c: ---\n\n(define-fun A!c ((this Ref)) Int\n  (c (deref-A this))\n)\n\n; --- getters for A.d: ---\n\n(define-fun A!d ((this Ref)) Int\n  (d (deref-A this))\n)\n\n; --- getters for A.e: ---\n\n(define-fun A!e ((this Ref)) Int\n  (e (deref-A this))\n)\n\n; --- getters for A.f: ---\n\n(define-fun A!f ((this Ref)) Int\n  (f (deref-A this))\n)\n\n; --- getters for A.g: ---\n\n(define-fun A!g ((this Ref)) Int\n  (g (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; --- getters for B.c: ---\n\n(define-fun B!c ((this Ref)) Int\n  (c (deref-B this))\n)\n\n; --- getters for B.d: ---\n\n(define-fun B!d ((this Ref)) Int\n  (d (deref-B this))\n)\n\n; --- getters for B.e: ---\n\n(define-fun B!e ((this Ref)) Int\n  (e (deref-B this))\n)\n\n; --- getters for B.f: ---\n\n(define-fun B!f ((this Ref)) Int\n  (f (deref-B this))\n)\n\n; --- getters for B.g: ---\n\n(define-fun B!g ((this Ref)) Int\n  (g (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.a: ---\n\n(define-fun C!a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n; --- getters for C.b: ---\n\n(define-fun C!b ((this Ref)) Int\n  (b (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; --- getters for C.d: ---\n\n(define-fun C!d ((this Ref)) Int\n  (d (deref-C this))\n)\n\n; --- getters for C.e: ---\n\n(define-fun C!e ((this Ref)) Int\n  (e (deref-C this))\n)\n\n; --- getters for C.f: ---\n\n(define-fun C!f ((this Ref)) Int\n  (f (deref-C this))\n)\n\n; --- getters for C.g: ---\n\n(define-fun C!g ((this Ref)) Int\n  (g (deref-C this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.a: ---\n\n(define-fun D!a ((this Ref)) Int\n  (a (deref-D this))\n)\n\n; --- getters for D.b: ---\n\n(define-fun D!b ((this Ref)) Int\n  (b (deref-D this))\n)\n\n; --- getters for D.c: ---\n\n(define-fun D!c ((this Ref)) Int\n  (c (deref-D this))\n)\n\n; --- getters for D.d: ---\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; --- getters for D.e: ---\n\n(define-fun D!e ((this Ref)) Int\n  (e (deref-D this))\n)\n\n; --- getters for D.f: ---\n\n(define-fun D!f ((this Ref)) Int\n  (f (deref-D this))\n)\n\n; --- getters for D.g: ---\n\n(define-fun D!g ((this Ref)) Int\n  (g (deref-D this))\n)\n\n; ------------------------\n;   Getters for class E:\n; ------------------------\n\n; --- getters for E.a: ---\n\n(define-fun E!a ((this Ref)) Int\n  (a (deref-E this))\n)\n\n; --- getters for E.b: ---\n\n(define-fun E!b ((this Ref)) Int\n  (b (deref-E this))\n)\n\n; --- getters for E.c: ---\n\n(define-fun E!c ((this Ref)) Int\n  (c (deref-E this))\n)\n\n; --- getters for E.d: ---\n\n(define-fun E!d ((this Ref)) Int\n  (d (deref-E this))\n)\n\n; --- getters for E.e: ---\n\n(define-fun E!e ((this Ref)) Int\n  (e (deref-E this))\n)\n\n; --- getters for E.f: ---\n\n(define-fun E!f ((this Ref)) Int\n  (f (deref-E this))\n)\n\n; --- getters for E.g: ---\n\n(define-fun E!g ((this Ref)) Int\n  (g (deref-E this))\n)\n\n; ------------------------\n;   Getters for class F:\n; ------------------------\n\n; --- getters for F.a: ---\n\n(define-fun F!a ((this Ref)) Int\n  (a (deref-F this))\n)\n\n; --- getters for F.b: ---\n\n(define-fun F!b ((this Ref)) Int\n  (b (deref-F this))\n)\n\n; --- getters for F.c: ---\n\n(define-fun F!c ((this Ref)) Int\n  (c (deref-F this))\n)\n\n; --- getters for F.d: ---\n\n(define-fun F!d ((this Ref)) Int\n  (d (deref-F this))\n)\n\n; --- getters for F.e: ---\n\n(define-fun F!e ((this Ref)) Int\n  (e (deref-F this))\n)\n\n; --- getters for F.f: ---\n\n(define-fun F!f ((this Ref)) Int\n  (f (deref-F this))\n)\n\n; --- getters for F.g: ---\n\n(define-fun F!g ((this Ref)) Int\n  (g (deref-F this))\n)\n\n; ------------------------\n;   Getters for class G:\n; ------------------------\n\n; --- getters for G.a: ---\n\n(define-fun G!a ((this Ref)) Int\n  (a (deref-G this))\n)\n\n; --- getters for G.b: ---\n\n(define-fun G!b ((this Ref)) Int\n  (b (deref-G this))\n)\n\n; --- getters for G.c: ---\n\n(define-fun G!c ((this Ref)) Int\n  (c (deref-G this))\n)\n\n; --- getters for G.d: ---\n\n(define-fun G!d ((this Ref)) Int\n  (d (deref-G this))\n)\n\n; --- getters for G.e: ---\n\n(define-fun G!e ((this Ref)) Int\n  (e (deref-G this))\n)\n\n; --- getters for G.f: ---\n\n(define-fun G!f ((this Ref)) Int\n  (f (deref-G this))\n)\n\n; --- getters for G.g: ---\n\n(define-fun G!g ((this Ref)) Int\n  (g (deref-G this))\n)\n\n; ------------------------\n;   Getters for class H:\n; ------------------------\n\n; --- getters for H.a: ---\n\n(define-fun H.a ((this Ref)) Int\n  (a (deref-H this))\n)\n\n(define-fun H!a ((this Ref)) Int\n  (a (deref-H this))\n)\n\n; --- getters for H.b: ---\n\n(define-fun H.b ((this Ref)) Int\n  (b (deref-H this))\n)\n\n(define-fun H!b ((this Ref)) Int\n  (b (deref-H this))\n)\n\n; --- getters for H.c: ---\n\n(define-fun H.c ((this Ref)) Int\n  (c (deref-H this))\n)\n\n(define-fun H!c ((this Ref)) Int\n  (c (deref-H this))\n)\n\n; --- getters for H.d: ---\n\n(define-fun H.d ((this Ref)) Int\n  (d (deref-H this))\n)\n\n(define-fun H!d ((this Ref)) Int\n  (d (deref-H this))\n)\n\n; --- getters for H.e: ---\n\n(define-fun H.e ((this Ref)) Int\n  (e (deref-H this))\n)\n\n(define-fun H!e ((this Ref)) Int\n  (e (deref-H this))\n)\n\n; --- getters for H.f: ---\n\n(define-fun H.f ((this Ref)) Int\n  (f (deref-H this))\n)\n\n(define-fun H!f ((this Ref)) Int\n  (f (deref-H this))\n)\n\n; --- getters for H.g: ---\n\n(define-fun H.g ((this Ref)) Int\n  (g (deref-H this))\n)\n\n(define-fun H!g ((this Ref)) Int\n  (g (deref-H this))\n)\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.objectA: ---\n\n(define-fun TopLevelDeclarations!objectA ((this Ref)) Ref\n  (objectA (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (+ (+ (+ (+ (+ (+ (A!a this)  (A!b this) ) (A!c this) ) (A!d this) ) (A!e this) ) (A!f this) ) (A!g this) ) 90)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (= (+ (+ (+ (+ (+ (+ (B!a this)  (B!b this) ) (B!c this) ) (B!d this) ) (B!e this) ) (B!f this) ) (B!g this) ) 90)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (= (+ (+ (+ (+ (+ (+ (C!a this)  (C!b this) ) (C!c this) ) (C!d this) ) (C!e this) ) (C!f this) ) (C!g this) ) 90)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n(define-fun D.inv ((this Ref)) Bool\n  (and\n    (= (+ (+ (+ (+ (+ (+ (D!a this)  (D!b this) ) (D!c this) ) (D!d this) ) (D!e this) ) (D!f this) ) (D!g this) ) 90)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; --------------------------\n;   Invariant for class E:\n; --------------------------\n\n(define-fun E.inv ((this Ref)) Bool\n  (and\n    (= (+ (+ (+ (+ (+ (+ (E!a this)  (E!b this) ) (E!c this) ) (E!d this) ) (E!e this) ) (E!f this) ) (E!g this) ) 90)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-E this) (E.inv this))\n))\n\n; --------------------------\n;   Invariant for class F:\n; --------------------------\n\n(define-fun F.inv ((this Ref)) Bool\n  (and\n    (= (+ (+ (+ (+ (+ (+ (F!a this)  (F!b this) ) (F!c this) ) (F!d this) ) (F!e this) ) (F!f this) ) (F!g this) ) 90)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-F this) (F.inv this))\n))\n\n; --------------------------\n;   Invariant for class G:\n; --------------------------\n\n(define-fun G.inv ((this Ref)) Bool\n  (and\n    (= (+ (+ (+ (+ (+ (+ (G!a this)  (G!b this) ) (G!c this) ) (G!d this) ) (G!e this) ) (G!f this) ) (G!g this) ) 90)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-G this) (G.inv this))\n))\n\n; --------------------------\n;   Invariant for class H:\n; --------------------------\n\n(define-fun H.inv ((this Ref)) Bool\n  (and\n    (= (+ (+ (+ (+ (+ (+ (H!a this)  (H!b this) ) (H!c this) ) (H!d this) ) (H!e this) ) (H!f this) ) (H!g this) ) 90)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-H this) (H.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (deref-isa-A (TopLevelDeclarations!objectA this))\n    (deref-isa-H (TopLevelDeclarations!objectA this) )\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (deref-is-C instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (deref-is-D instanceOfD)))\n(assert (exists ((instanceOfE Ref)) (deref-is-E instanceOfE)))\n(assert (exists ((instanceOfF Ref)) (deref-is-F instanceOfF)))\n(assert (exists ((instanceOfG Ref)) (deref-is-G instanceOfG)))\n(assert (exists ((instanceOfH Ref)) (deref-is-H instanceOfH)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"tc2.k":{"typeChecks":false,"model":"","name":"tc2.k","json2":"","json1":"","smtModel":"","smt":""},"tc3.k":{"typeChecks":false,"model":"","name":"tc3.k","json2":"","json1":"","smtModel":"","smt":""},"testsmt4.k":{"typeChecks":true,"model":"\nclass Event {\n  t1:Int\n  t2:Int\n\n  req t1 < t2\n\n  req t2 - t1 < 10\n}\n\nclass Schedule {\n  a:Event\n  b:Event\n  c:Event\n  d:Event\n\n  fun before(e1:Event,e2:Event) : Bool\n  {\n    e1.t2 < e2.t1\n  }\n\n  fun meets(e1:Event,e2:Event) : Bool\n  {\n    e1.t2 = e2.t1\n  }\n\n  fun contains(e1:Event,e2:Event) : Bool\n  {\n    e1.t1 < e2.t1 && e2.t2 < e1.t2\n  }\n\n  req meets(a,b)\n\n  req before(b,c)\n\n  req contains(c,d)\n}\n\n","name":"testsmt4.k","json2":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t1","type":"ElementValue"},{"element":"t2","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Minus",{"element":"t2","type":"ElementValue"},{"element":"t1","type":"ElementValue"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Schedule","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e1","type":"ElementValue"},"t2"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e2","type":"ElementValue"},"t1"]}]},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e1","type":"Param"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e1","type":"ElementValue"},"t2"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e2","type":"ElementValue"},"t1"]}]},"type":"ExpressionDecl"}],"ident":"meets","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e1","type":"Param"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e1","type":"ElementValue"},"t1"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e2","type":"ElementValue"},"t1"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e2","type":"ElementValue"},"t2"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"e1","type":"ElementValue"},"t2"]}]}]},"type":"ExpressionDecl"}],"ident":"contains","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e1","type":"Param"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"meets","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"a","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"b","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"before","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"b","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"c","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"contains","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"c","type":"ElementValue"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"d","type":"ElementValue"}],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"op":"Minus","type":"BinExp","exp2":{"ident":"t1","type":"IdentExp"},"exp1":{"ident":"t2","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Schedule","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"e2","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"exp":{"ident":"e1","type":"IdentExp"},"ident":"t2","type":"DotExp"}},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e1","type":"Param"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"EQ","type":"BinExp","exp2":{"exp":{"ident":"e2","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"exp":{"ident":"e1","type":"IdentExp"},"ident":"t2","type":"DotExp"}},"type":"ExpressionDecl"}],"ident":"meets","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e1","type":"Param"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"And","type":"BinExp","exp2":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"e1","type":"IdentExp"},"ident":"t2","type":"DotExp"},"exp1":{"exp":{"ident":"e2","type":"IdentExp"},"ident":"t2","type":"DotExp"}},"exp1":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"e2","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"exp":{"ident":"e1","type":"IdentExp"},"ident":"t1","type":"DotExp"}}},"type":"ExpressionDecl"}],"ident":"contains","typeParams":[],"params":[{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e1","type":"Param"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"e2","type":"Param"}],"type":"FunDecl"},{"exp":{"args":[{"exp":{"ident":"a","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"b","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"meets","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"ident":"b","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"c","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"before","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"ident":"c","type":"IdentExp"},"type":"PositionalArgument"},{"exp":{"ident":"d","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"contains","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfEvent!0 () Int\n  4)\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  6)\n(define-fun instanceOfSchedule!1 () Int\n  5)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-Schedule (mk-Schedule 7 8 9 10))\n  (ite (= x!1 10) (lift-Event (mk-Event 1 2))\n  (ite (= x!1 6) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 9) (lift-Event (mk-Event 0 3))\n  (ite (= x!1 7) (lift-Event (mk-Event (- 3) (- 2)))\n  (ite (= x!1 4) (lift-Event (mk-Event 8854 8855))\n    (lift-Event (mk-Event (- 2) (- 1))))))))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 6) 6\n  (ite (= x!1 8) 8\n  (ite (= x!1 9) 9\n  (ite (= x!1 5) 5\n  (ite (= x!1 7) 7\n  (ite (= x!1 10) 10\n    4)))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Event (mk-Event (t1 Int)(t2 Int)))))\n(declare-datatypes () ((Schedule (mk-Schedule (a Ref)(b Ref)(c Ref)(d Ref)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-Event (sel-Event Event))\n  (lift-Schedule (sel-Schedule Schedule))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-Schedule ((this Ref)) Bool\n  (is-lift-Schedule (deref this))\n)\n\n(define-fun deref-Schedule ((this Ref)) Schedule\n  (sel-Schedule (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-Schedule ((this Ref)) Bool\n  (deref-is-Schedule this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ----------------------------\n;   Getters for class Event:\n; ----------------------------\n\n; --- getters for Event.t1: ---\n\n(define-fun Event.t1 ((this Ref)) Int\n  (t1 (deref-Event this))\n)\n\n(define-fun Event!t1 ((this Ref)) Int\n  (t1 (deref-Event this))\n)\n\n; --- getters for Event.t2: ---\n\n(define-fun Event.t2 ((this Ref)) Int\n  (t2 (deref-Event this))\n)\n\n(define-fun Event!t2 ((this Ref)) Int\n  (t2 (deref-Event this))\n)\n\n; -------------------------------\n;   Getters for class Schedule:\n; -------------------------------\n\n; --- getters for Schedule.a: ---\n\n(define-fun Schedule!a ((this Ref)) Ref\n  (a (deref-Schedule this))\n)\n\n; --- getters for Schedule.b: ---\n\n(define-fun Schedule!b ((this Ref)) Ref\n  (b (deref-Schedule this))\n)\n\n; --- getters for Schedule.c: ---\n\n(define-fun Schedule!c ((this Ref)) Ref\n  (c (deref-Schedule this))\n)\n\n; --- getters for Schedule.d: ---\n\n(define-fun Schedule!d ((this Ref)) Ref\n  (d (deref-Schedule this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------\n;   Methods for class Schedule:\n; -------------------------------\n\n(define-fun Schedule.before ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (< (Event.t2 e1) (Event.t1 e2))\n)\n\n(define-fun Schedule!before ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (< (Event.t2 e1) (Event.t1 e2))\n)\n\n(define-fun Schedule.meets ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (= (Event.t2 e1) (Event.t1 e2))\n)\n\n(define-fun Schedule!meets ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (= (Event.t2 e1) (Event.t1 e2))\n)\n\n(define-fun Schedule.contains ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (and (< (Event.t1 e1) (Event.t1 e2)) (< (Event.t2 e2) (Event.t2 e1)))\n)\n\n(define-fun Schedule!contains ((this Ref)(e1 Ref)(e2 Ref)) Bool\n  (and (< (Event.t1 e1) (Event.t1 e2)) (< (Event.t2 e2) (Event.t2 e1)))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ------------------------------\n;   Invariant for class Event:\n; ------------------------------\n\n(define-fun Event.inv ((this Ref)) Bool\n  (and\n    (< (Event!t1 this)  (Event!t2 this) )\n    (< (- (Event!t2 this)  (Event!t1 this) ) 10)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Event this) (Event.inv this))\n))\n\n; ---------------------------------\n;   Invariant for class Schedule:\n; ---------------------------------\n\n(define-fun Schedule.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Event (Schedule!a this))\n    (deref-isa-Event (Schedule!b this))\n    (deref-isa-Event (Schedule!c this))\n    (deref-isa-Event (Schedule!d this))\n    (Schedule!meets this (Schedule!a this)  (Schedule!b this) )\n    (Schedule!before this (Schedule!b this)  (Schedule!c this) )\n    (Schedule!contains this (Schedule!c this)  (Schedule!d this) )\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Schedule this) (Schedule.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfEvent Ref)) (deref-is-Event instanceOfEvent)))\n(assert (exists ((instanceOfSchedule Ref)) (deref-is-Schedule instanceOfSchedule)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt16.k":{"typeChecks":true,"model":"\nclass Time {\n  t:Int\n}\n\nclass DurativeEvent\n\nclass VerifyEVR {\n  cmd:String\n}\n\nverify1:VerifyEVR = VerifyEVR(cmd :: \"CMD_NO_OP\")\n\ntime:Time\n\n","name":"testsmt16.k","json2":{"decls":[{"entityToken":"class","ident":"Time","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"DurativeEvent","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[]},{"entityToken":"class","ident":"VerifyEVR","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"StringType"}],"type":"Expression"},"name":"cmd","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["VerifyEVR"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"verify1","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"VerifyEVR","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"cmd",{"operand":[{"element":"ElementValue","type":"StringLiteral"},"\"CMD_NO_OP\""],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Time"],"type":"QualifiedName"}],"type":"Expression"},"name":"time","modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Time","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"t","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"DurativeEvent","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[]},{"entityToken":"class","ident":"VerifyEVR","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"StringType"},"name":"cmd","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"ty":{"ident":{"names":["VerifyEVR"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"verify1","expr":{"args":[{"exp":{"string":"CMD_NO_OP","type":"StringLiteral"},"ident":"cmd","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"VerifyEVR","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Time"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"time","modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for DurativeEvent:\n;;   DurativeEvent!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun DurativeEvent!val!0 () DurativeEvent)\n;; cardinality constraint:\n(forall ((x DurativeEvent)) (= x DurativeEvent!val!0))\n;; -----------\n;; universe for VerifyEVR:\n;;   VerifyEVR!val!1 VerifyEVR!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun VerifyEVR!val!1 () VerifyEVR)\n(declare-fun VerifyEVR!val!0 () VerifyEVR)\n;; cardinality constraint:\n(forall ((x VerifyEVR)) (or (= x VerifyEVR!val!1) (= x VerifyEVR!val!0)))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!3 () Int\n  3)\n(define-fun instanceOfTime!0 () Int\n  0)\n(define-fun instanceOfVerifyEVR!2 () Int\n  2)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!4))\n(define-fun instanceOfDurativeEvent!1 () Int\n  1)\n(define-fun mk-VerifyEVR () VerifyEVR\n  VerifyEVR!val!1)\n(define-fun k!5 ((x!1 Int)) Int\n  (ite (= x!1 3) 3\n  (ite (= x!1 0) 0\n  (ite (= x!1 2) 2\n  (ite (= x!1 1) 1\n  (ite (= x!1 5) 5\n    6))))))\n(define-fun k!4!6 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-VerifyEVR VerifyEVR!val!0)\n  (ite (= x!1 3) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 5 6))\n  (ite (= x!1 5) (lift-VerifyEVR VerifyEVR!val!1)\n  (ite (= x!1 0) (lift-Time (mk-Time 4))\n  (ite (= x!1 6) (lift-Time (mk-Time 7))\n    (lift-DurativeEvent DurativeEvent!val!0)))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (k!4!6 (k!5 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Time (mk-Time (t Int)))))\n(declare-sort DurativeEvent) (declare-const mk-DurativeEvent DurativeEvent)\n(declare-sort VerifyEVR) (declare-const mk-VerifyEVR VerifyEVR)\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (verify1 Ref)(time Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-Time (sel-Time Time))\n  (lift-DurativeEvent (sel-DurativeEvent DurativeEvent))\n  (lift-VerifyEVR (sel-VerifyEVR VerifyEVR))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-Time ((this Ref)) Bool\n  (is-lift-Time (deref this))\n)\n\n(define-fun deref-Time ((this Ref)) Time\n  (sel-Time (deref this))\n)\n\n(define-fun deref-is-DurativeEvent ((this Ref)) Bool\n  (is-lift-DurativeEvent (deref this))\n)\n\n(define-fun deref-DurativeEvent ((this Ref)) DurativeEvent\n  (sel-DurativeEvent (deref this))\n)\n\n(define-fun deref-is-VerifyEVR ((this Ref)) Bool\n  (is-lift-VerifyEVR (deref this))\n)\n\n(define-fun deref-VerifyEVR ((this Ref)) VerifyEVR\n  (sel-VerifyEVR (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-Time ((this Ref)) Bool\n  (deref-is-Time this)\n)\n\n(define-fun deref-isa-DurativeEvent ((this Ref)) Bool\n  (deref-is-DurativeEvent this)\n)\n\n(define-fun deref-isa-VerifyEVR ((this Ref)) Bool\n  (deref-is-VerifyEVR this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.verify1: ---\n\n(define-fun TopLevelDeclarations!verify1 ((this Ref)) Ref\n  (verify1 (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.time: ---\n\n(define-fun TopLevelDeclarations!time ((this Ref)) Ref\n  (time (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; -----------------------------\n;   Invariant for class Time:\n; -----------------------------\n\n(define-fun Time.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Time this) (Time.inv this))\n))\n\n; --------------------------------------\n;   Invariant for class DurativeEvent:\n; --------------------------------------\n\n(define-fun DurativeEvent.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-DurativeEvent this) (DurativeEvent.inv this))\n))\n\n; ----------------------------------\n;   Invariant for class VerifyEVR:\n; ----------------------------------\n\n(define-fun VerifyEVR.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-VerifyEVR this) (VerifyEVR.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (deref (TopLevelDeclarations!verify1 this)) (lift-VerifyEVR mk-VerifyEVR))\n    (deref-isa-VerifyEVR (TopLevelDeclarations!verify1 this))\n    (deref-isa-Time (TopLevelDeclarations!time this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfTime Ref)) (deref-is-Time instanceOfTime)))\n(assert (exists ((instanceOfDurativeEvent Ref)) (deref-is-DurativeEvent instanceOfDurativeEvent)))\n(assert (exists ((instanceOfVerifyEVR Ref)) (deref-is-VerifyEVR instanceOfVerifyEVR)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt12.k":{"typeChecks":true,"model":"\nclass A {\n\n  fun id(x:Int) : Int\n  {\n    if x >= 0 then\n      {\n        k:Int = x - 1\n        k + 1\n      }\n    else\n      {\n        k:Int = x + 1\n        k - 1\n      }\n  }\n  result1:Int = id(7)\n  result2:Int = id(-3)\n  result:Int = result1 + result2\n\n  req result1 = 7\n\n  req result2 = -3\n\n  req result = 4\n}\n\n","name":"testsmt12.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"operand":[{"element":"ElementValue","type":"IfExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GTE",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},0],"type":"Expression"}]},{"operand":[{"element":"ElementValue","type":"BlockExp"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Minus",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"k","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ExpressionDecl"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"BlockExp"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Minus",{"element":"k","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ExpressionDecl"}],"type":"Expression"}],"type":"Expression"},"type":"ExpressionDecl"}],"ident":"id","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"result1","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"id","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},7],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"result2","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"id","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"type":"Expression","operand":[{"element":"ElementValue","type":"UnaryExp"},"Neg",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"}]}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"result","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"result1","type":"ElementValue"},{"element":"result2","type":"ElementValue"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"result1","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},7],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"result2","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"UnaryExp"},"Neg",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"}]}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"result","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},4],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"trueBranch":{"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k","expr":{"op":"Minus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"x","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"k","type":"IdentExp"}},"type":"ExpressionDecl"}],"type":"BlockExp"},"falseBranch":{"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k","expr":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"x","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"Minus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"k","type":"IdentExp"}},"type":"ExpressionDecl"}],"type":"BlockExp"},"type":"IfExp","cond":{"op":"GTE","type":"BinExp","exp2":{"type":"LiteralInteger","i":0},"exp1":{"ident":"x","type":"IdentExp"}}},"type":"ExpressionDecl"}],"ident":"id","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"result1","expr":{"args":[{"exp":{"type":"LiteralInteger","i":7},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"id","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"result2","expr":{"args":[{"exp":{"exp":{"type":"LiteralInteger","i":3},"op":"Neg","type":"UnaryExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"id","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"result","expr":{"op":"Plus","type":"BinExp","exp2":{"ident":"result2","type":"IdentExp"},"exp1":{"ident":"result1","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":7},"exp1":{"ident":"result1","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"exp":{"type":"LiteralInteger","i":3},"op":"Neg","type":"UnaryExp"},"exp1":{"ident":"result2","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":4},"exp1":{"ident":"result","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!1 () Int\n  2)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!2))\n(define-fun instanceOfA!0 () Int\n  1)\n(define-fun k!3 ((x!1 Int)) Int\n  (ite (= x!1 1) 1\n    2))\n(define-fun k!2!4 ((x!1 Int)) Any\n  (ite (= x!1 1) (lift-A (mk-A 7 (- 3) 4))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0)))\n(define-fun k!2 ((x!1 Int)) Any\n  (k!2!4 (k!3 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (result1 Int)(result2 Int)(result Int)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.result1: ---\n\n(define-fun A!result1 ((this Ref)) Int\n  (result1 (deref-A this))\n)\n\n; --- getters for A.result2: ---\n\n(define-fun A!result2 ((this Ref)) Int\n  (result2 (deref-A this))\n)\n\n; --- getters for A.result: ---\n\n(define-fun A!result ((this Ref)) Int\n  (result (deref-A this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.id ((this Ref)(x Int)) Int\n  (ite (>= x 0)   (let ((k (- x 1)))\n    (+ k 1))   (let ((k (+ x 1)))\n    (- k 1)))\n)\n\n(define-fun A!id ((this Ref)(x Int)) Int\n  (ite (>= x 0)   (let ((k (- x 1)))\n    (+ k 1))   (let ((k (+ x 1)))\n    (- k 1)))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A!result1 this) (A!id this 7))\n    (= (A!result2 this) (A!id this (- 3)))\n    (= (A!result this) (+ (A!result1 this)  (A!result2 this) ))\n    (= (A!result1 this)  7)\n    (= (A!result2 this)  (- 3))\n    (= (A!result this)  4)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"inheritance7.k":{"typeChecks":true,"model":"\nclass A {\n  x:Int\n  j:B\n\n  req x > 0\n\n  req j.yy > 10\n}\n\nclass <b> B extending A {\n  yy:Int\n}\n\nb C {\n  z:Int\n\n  fun foo(x:Int) : Int\n  {\n    return x + 1\n  }\n}\n\nbobj:C\n\nreq bobj.z = 1\n\ny:Int\n\n","name":"inheritance7.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"},"name":"j","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},0],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"j","type":"ElementValue"},"yy"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","keyword":"b","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"yy","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"b","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"operand":[{"element":"ElementValue","type":"ReturnExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]}],"type":"Expression"},"type":"ExpressionDecl"}],"ident":"foo","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"},"name":"bobj","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"bobj","type":"ElementValue"},"z"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ConstraintDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"j","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":0},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"exp":{"ident":"j","type":"IdentExp"},"ident":"yy","type":"DotExp"}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","keyword":"b","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"yy","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"b","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ReturnExp"},"type":"ExpressionDecl"}],"ident":"foo","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"ty":{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"bobj","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"exp":{"ident":"bobj","type":"IdentExp"},"ident":"z","type":"DotExp"}},"type":"ConstraintDecl"},{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfTopLevelDeclarations!3 () Int\n  5)\n(define-fun instanceOfC!2 () Int\n  4)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!4))\n(define-fun instanceOfB!1 () Int\n  3)\n(define-fun instanceOfA!0 () Int\n  2)\n(define-fun k!5 ((x!1 Int)) Int\n  (ite (= x!1 103) 103\n  (ite (= x!1 68) 68\n  (ite (= x!1 60) 60\n  (ite (= x!1 132) 132\n  (ite (= x!1 56) 56\n  (ite (= x!1 70) 70\n  (ite (= x!1 49) 49\n  (ite (= x!1 121) 121\n  (ite (= x!1 51) 51\n  (ite (= x!1 122) 122\n  (ite (= x!1 86) 86\n  (ite (= x!1 34) 34\n  (ite (= x!1 129) 129\n  (ite (= x!1 13) 13\n  (ite (= x!1 29) 29\n  (ite (= x!1 101) 101\n  (ite (= x!1 133) 133\n  (ite (= x!1 98) 98\n  (ite (= x!1 111) 111\n  (ite (= x!1 47) 47\n  (ite (= x!1 93) 93\n  (ite (= x!1 50) 50\n  (ite (= x!1 85) 85\n  (ite (= x!1 25) 25\n  (ite (= x!1 95) 95\n  (ite (= x!1 89) 89\n  (ite (= x!1 72) 72\n  (ite (= x!1 22) 22\n  (ite (= x!1 37) 37\n  (ite (= x!1 110) 110\n  (ite (= x!1 66) 66\n  (ite (= x!1 3) 3\n  (ite (= x!1 83) 83\n  (ite (= x!1 27) 27\n  (ite (= x!1 38) 38\n  (ite (= x!1 62) 62\n  (ite (= x!1 7) 7\n  (ite (= x!1 32) 32\n  (ite (= x!1 55) 55\n  (ite (= x!1 84) 84\n  (ite (= x!1 19) 19\n  (ite (= x!1 42) 42\n  (ite (= x!1 36) 36\n  (ite (= x!1 75) 75\n  (ite (= x!1 63) 63\n  (ite (= x!1 21) 21\n  (ite (= x!1 58) 58\n  (ite (= x!1 5) 5\n  (ite (= x!1 26) 26\n  (ite (= x!1 81) 81\n  (ite (= x!1 77) 77\n  (ite (= x!1 107) 107\n  (ite (= x!1 114) 114\n  (ite (= x!1 116) 116\n  (ite (= x!1 87) 87\n  (ite (= x!1 125) 125\n  (ite (= x!1 126) 126\n  (ite (= x!1 4) 4\n  (ite (= x!1 30) 30\n  (ite (= x!1 108) 108\n  (ite (= x!1 9) 9\n  (ite (= x!1 65) 65\n  (ite (= x!1 53) 53\n  (ite (= x!1 73) 73\n  (ite (= x!1 6) 6\n  (ite (= x!1 105) 105\n  (ite (= x!1 46) 46\n  (ite (= x!1 115) 115\n  (ite (= x!1 117) 117\n  (ite (= x!1 15) 15\n  (ite (= x!1 40) 40\n  (ite (= x!1 2) 2\n  (ite (= x!1 97) 97\n  (ite (= x!1 119) 119\n  (ite (= x!1 24) 24\n  (ite (= x!1 61) 61\n  (ite (= x!1 44) 44\n  (ite (= x!1 79) 79\n  (ite (= x!1 17) 17\n  (ite (= x!1 99) 99\n  (ite (= x!1 76) 76\n  (ite (= x!1 112) 112\n  (ite (= x!1 128) 128\n    91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n(define-fun k!4!6 ((x!1 Int)) Any\n  (ite (= x!1 58) (lift-B (mk-B 8405 62 2123))\n  (ite (= x!1 15) (lift-C (mk-C 610 19 8376 20))\n  (ite (= x!1 126) (lift-C (mk-C 5328 129 9058 131))\n  (ite (= x!1 19) (lift-B (mk-B 5921 24 5864))\n  (ite (= x!1 112) (lift-B (mk-B 2525 116 1677))\n  (ite (= x!1 79) (lift-B (mk-B 3961 85 3034))\n  (ite (= x!1 21) (lift-B (mk-B 6284 25 1153))\n  (ite (= x!1 115) (lift-C (mk-C 9295 122 987 124))\n  (ite (= x!1 6) (lift-C (mk-C 2283 17 11 18))\n  (ite (= x!1 2) (lift-A (mk-A 8856 6))\n  (ite (= x!1 86) (lift-B (mk-B 4322 95 7578))\n  (ite (= x!1 29) (lift-C (mk-C 2617 40 8467 41))\n  (ite (= x!1 91) (lift-B (mk-B 2062 98 5629))\n  (ite (= x!1 121) (lift-B (mk-B 1184 132 815))\n  (ite (= x!1 133) (lift-B (mk-B 140 141 6901))\n  (ite (= x!1 101) (lift-C (mk-C 9620 103 6059 104))\n  (ite (= x!1 24) (lift-B (mk-B 5905 29 8956))\n  (ite (= x!1 50) (lift-B (mk-B 1649 55 7640))\n  (ite (= x!1 97) (lift-C (mk-C 5530 108 6822 109))\n  (ite (= x!1 122) (lift-B (mk-B 2743 133 6735))\n  (ite (= x!1 129) (lift-B (mk-B 134 135 123))\n  (ite (= x!1 132) (lift-B (mk-B 138 139 6769))\n  (ite (= x!1 70) (lift-C (mk-C 8004 73 2758 74))\n  (ite (= x!1 44) (lift-B (mk-B 7066 50 8232))\n  (ite (= x!1 68) (lift-B (mk-B 3153 75 5270))\n  (ite (= x!1 111) (lift-C (mk-C 1093 117 2589 118))\n  (ite (= x!1 38) (lift-C (mk-C 583 47 3620 48))\n  (ite (= x!1 7) (lift-C (mk-C 282 22 7730 23))\n  (ite (= x!1 66) (lift-B (mk-B 3503 76 4694))\n  (ite (= x!1 17) (lift-C (mk-C 1889 27 460 28))\n  (ite (= x!1 83) (lift-B (mk-B 7066 86 6030))\n  (ite (= x!1 110) (lift-B (mk-B 9643 115 6539))\n  (ite (= x!1 85) (lift-C (mk-C 2236 89 635 90))\n  (ite (= x!1 108) (lift-B (mk-B 9271 110 4468))\n  (ite (= x!1 55) (lift-B (mk-B 4771 65 2339))\n  (ite (= x!1 56) (lift-B (mk-B 1103 61 2342))\n  (ite (= x!1 63) (lift-C (mk-C 5942 70 5609 71))\n  (ite (= x!1 42) (lift-C (mk-C 3505 53 9542 54))\n  (ite (= x!1 125) (lift-B (mk-B 5080 128 3649))\n  (ite (= x!1 32) (lift-B (mk-B 591 36 9736))\n  (ite (= x!1 105) (lift-C (mk-C 436 112 7534 113))\n  (ite (= x!1 51) (lift-C (mk-C 7177 56 2289 57))\n  (ite (= x!1 27) (lift-C (mk-C 2276 34 1664 35))\n  (ite (= x!1 72) (lift-B (mk-B 1392 83 8880))\n  (ite (= x!1 25) (lift-C (mk-C 1324 30 3008 31))\n  (ite (= x!1 116) (lift-B (mk-B 4263 125 3834))\n  (ite (= x!1 26) (lift-C (mk-C 2241 32 985 33))\n  (ite (= x!1 89) (lift-C (mk-C 8747 101 1257 102))\n  (ite (= x!1 114) (lift-C (mk-C 9245 119 6823 120))\n  (ite (= x!1 40) (lift-C (mk-C 868 42 2466 43))\n  (ite (= x!1 93) (lift-C (mk-C 5190 99 2710 100))\n  (ite (= x!1 103) (lift-B (mk-B 2132 111 6344))\n  (ite (= x!1 4) (lift-C (mk-C 1237 9 10 12))\n  (ite (= x!1 99) (lift-B (mk-B 3578 107 130))\n  (ite (= x!1 119) (lift-B (mk-B 1063 126 3834))\n  (ite (= x!1 98) (lift-C (mk-C 5969 105 3576 106))\n  (ite (= x!1 37) (lift-B (mk-B 7887 46 6917))\n  (ite (= x!1 61) (lift-C (mk-C 6703 68 1661 69))\n  (ite (= x!1 13) (lift-C (mk-C 1797 15 16 1))\n  (ite (= x!1 34) (lift-B (mk-B 1236 38 2457))\n  (ite (= x!1 73) (lift-C (mk-C 335 81 6683 82))\n  (ite (= x!1 3) (lift-B (mk-B 39 7 8))\n  (ite (= x!1 107) (lift-B (mk-B 9159 114 5056))\n  (ite (= x!1 128) (lift-B (mk-B 136 137 757))\n  (ite (= x!1 76) (lift-C (mk-C 4187 77 250 78))\n  (ite (= x!1 53) (lift-C (mk-C 9264 58 4397 59))\n  (ite (= x!1 81) (lift-B (mk-B 1574 84 542))\n  (ite (= x!1 36) (lift-C (mk-C 6879 44 851 45))\n  (ite (= x!1 49) (lift-B (mk-B 4136 60 7589))\n  (ite (= x!1 65) (lift-C (mk-C 3213 66 4107 67))\n  (ite (= x!1 77) (lift-C (mk-C 2830 87 2815 88))\n  (ite (= x!1 75) (lift-C (mk-C 8936 79 1829 80))\n  (ite (= x!1 87) (lift-C (mk-C 3635 91 4176 92))\n  (ite (= x!1 95) (lift-B (mk-B 2773 97 4932))\n  (ite (= x!1 30) (lift-B (mk-B 8587 37 8890))\n  (ite (= x!1 9) (lift-B (mk-B 8099 21 2448))\n  (ite (= x!1 60) (lift-C (mk-C 7855 63 6937 64))\n  (ite (= x!1 84) (lift-C (mk-C 5726 93 5992 94))\n  (ite (= x!1 117) (lift-B (mk-B 4021 121 1779))\n  (ite (= x!1 62) (lift-B (mk-B 7374 72 4346))\n  (ite (= x!1 22) (lift-B (mk-B 4680 26 546))\n  (ite (= x!1 46) (lift-C (mk-C 9403 51 1605 52))\n  (ite (= x!1 47) (lift-B (mk-B 1109 49 2222))\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations 13 14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n(define-fun k!4 ((x!1 Int)) Any\n  (k!4!6 (k!5 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)(j Ref)))))\n(declare-datatypes () ((B (mk-B (x Int)(j Ref)(yy Int)))))\n(declare-datatypes () ((C (mk-C (x Int)(j Ref)(yy Int)(z Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (bobj Ref)(y Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (ite (deref-is-B this) (x (deref-B this))\n  (x (deref-C this))))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; --- getters for A.j: ---\n\n(define-fun A!j ((this Ref)) Ref\n  (j (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.x: ---\n\n(define-fun B.x ((this Ref)) Int\n  (ite (deref-is-B this) (x (deref-B this))\n  (x (deref-C this)))\n)\n\n(define-fun B!x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n; --- getters for B.j: ---\n\n(define-fun B!j ((this Ref)) Ref\n  (j (deref-B this))\n)\n\n; --- getters for B.yy: ---\n\n(define-fun B.yy ((this Ref)) Int\n  (ite (deref-is-B this) (yy (deref-B this))\n  (yy (deref-C this)))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.x: ---\n\n(define-fun C!x ((this Ref)) Int\n  (x (deref-C this))\n)\n\n; --- getters for C.j: ---\n\n(define-fun C!j ((this Ref)) Ref\n  (j (deref-C this))\n)\n\n; --- getters for C.z: ---\n\n(define-fun C.z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n(define-fun C!z ((this Ref)) Int\n  (z (deref-C this))\n)\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.bobj: ---\n\n(define-fun TopLevelDeclarations!bobj ((this Ref)) Ref\n  (bobj (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class C:\n; ------------------------\n\n(define-fun C.foo ((this Ref)(x Int)) Int\n  (+ x 1)\n)\n\n(define-fun C!foo ((this Ref)(x Int)) Int\n  (+ x 1)\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (deref-isa-B (A!j this))\n    (> (A!x this)  0)\n    (> (B.yy (A!j this) ) 10)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (deref-isa-B (B!j this))\n    (> (B!x this)  0)\n    (> (B.yy (B!j this) ) 10)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (deref-isa-B (C!j this))\n    (> (C!x this)  0)\n    (> (B.yy (C!j this) ) 10)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (deref-isa-C (TopLevelDeclarations!bobj this))\n    (= (C.z (TopLevelDeclarations!bobj this) ) 1)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (deref-is-C instanceOfC)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"scope1.k":{"typeChecks":false,"model":"","name":"scope1.k","json2":"","json1":"","smtModel":"","smt":""},"inheritance8.k":{"typeChecks":true,"model":"\nclass A {\n  a:Int\n}\n\nclass B {\n  b:Int\n}\n\nclass C extending A,B {\n  c:Int\n}\n\nclass D {\n  bb:B\n  d:Int\n}\n\nclass E extending D {\n  e:Int\n}\n\nclass F extending C,E {\n  f:Int\n}\n\nclass G extending E {\n  ee:E\n  g:Int\n}\n\nclass H extending F,G {\n  h:Int\n  tsum:Int = a + b + c + d + e + f + g + h\n}\n\nh:H = H(a :: 1,b :: 2,c :: 3,d :: 4,e :: 5,f :: 6,g :: 7,h :: 8)\n\nreq h.tsum = 36\n\n","name":"inheritance8.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"},"name":"bb","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"e","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["D"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"F","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"f","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["E"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"G","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["E"],"type":"QualifiedName"}],"type":"Expression"},"name":"ee","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"g","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["E"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"H","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"h","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"tsum","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"element":"b","type":"ElementValue"}]},{"element":"c","type":"ElementValue"}]},{"element":"d","type":"ElementValue"}]},{"element":"e","type":"ElementValue"}]},{"element":"f","type":"ElementValue"}]},{"element":"g","type":"ElementValue"}]},{"element":"h","type":"ElementValue"}]},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["F"],"type":"QualifiedName"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["G"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["H"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"h","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"H","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"a",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"b",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"c",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"d",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},4],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"e",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},5],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"f",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},6],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"g",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},7],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"h",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},8],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"h","type":"ElementValue"},"tsum"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},36],"type":"Expression"}]},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"b","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"c","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"bb","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"d","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"e","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["D"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"F","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"f","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"},{"ident":{"names":["E"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"G","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["E"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"ee","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"g","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["E"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"H","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"h","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"tsum","expr":{"op":"Plus","type":"BinExp","exp2":{"ident":"h","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"g","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"f","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"e","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"d","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"c","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"}}}}}}}},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["F"],"type":"QualifiedName"},"args":[],"type":"IdentType"},{"ident":{"names":["G"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["H"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"h","expr":{"args":[{"exp":{"type":"LiteralInteger","i":1},"ident":"a","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":2},"ident":"b","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":3},"ident":"c","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":4},"ident":"d","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":5},"ident":"e","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":6},"ident":"f","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":7},"ident":"g","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":8},"ident":"h","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"H","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":36},"exp1":{"exp":{"ident":"h","type":"IdentExp"},"ident":"tsum","type":"DotExp"}},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfE!3 () Int\n  12)\n(define-fun const__1 () Int\n  46)\n(define-fun const__2 () Int\n  47)\n(define-fun instanceOfTopLevelDeclarations!8 () Int\n  17)\n(define-fun const__3 () Int\n  36)\n(define-fun instanceOfF!6 () Int\n  15)\n(define-fun instanceOfG!5 () Int\n  14)\n(define-fun instanceOfD!2 () Int\n  11)\n(define-fun instanceOfC!4 () Int\n  13)\n(define-fun instanceOfH!7 () Int\n  16)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!9))\n(define-fun instanceOfB!1 () Int\n  10)\n(define-fun instanceOfA!0 () Int\n  9)\n(define-fun k!9!11 ((x!1 Int)) Any\n  (ite (= x!1 31)\n    (lift-H (mk-H (- 25228) 2997 4679 75 974 1888 1653 76 5904 8456 1323))\n  (ite (= x!1 70) (lift-G (mk-G 78 79 80 81 82))\n  (ite (= x!1 132)\n    (lift-H (mk-H (- 26291) 3609 2616 136 2455 867 9531 137 6878 8221 7886))\n  (ite (= x!1 63) (lift-F (mk-F 88 89 90 91 92 93 94))\n  (ite (= x!1 123) (lift-F (mk-F 129 130 131 132 133 134 135))\n  (ite (= x!1 181) (lift-C (mk-C 185 186 187))\n  (ite (= x!1 78) (lift-C (mk-C 108 109 110))\n  (ite (= x!1 9) (lift-A (mk-A 18))\n  (ite (= x!1 114) (lift-B (mk-B 122))\n  (ite (= x!1 12) (lift-E (mk-E 22 23 24))\n  (ite (= x!1 20) (lift-C (mk-C 56 57 58))\n  (ite (= x!1 43)\n    (lift-H (mk-H (- 13493) 609 5853 69 8098 1142 281 70 535 5920 8945))\n  (ite (= x!1 11) (lift-D (mk-D 20 21))\n  (ite (= x!1 22) (lift-B (mk-B 68))\n  (ite (= x!1 42) (lift-B (mk-B 67))\n  (ite (= x!1 44) (lift-H (mk-H 1 2 3 46 4 5 6 47 7 8 36))\n  (ite (= x!1 136) (lift-C (mk-C 139 140 141))\n  (ite (= x!1 142) (lift-F (mk-F 145 146 147 148 149 150 151))\n  (ite (= x!1 13) (lift-C (mk-C 25 26 27))\n  (ite (= x!1 143) (lift-G (mk-G 152 153 154 155 156))\n  (ite (= x!1 10) (lift-B (mk-B 19))\n  (ite (= x!1 137)\n    (lift-H (mk-H (- 33297) 582 2211 142 1108 7578 7065 143 7629 9402 2278))\n  (ite (= x!1 148) (lift-B (mk-B 164))\n  (ite (= x!1 91) (lift-C (mk-C 98 99 100))\n  (ite (= x!1 115) (lift-G (mk-G 117 118 119 120 121))\n  (ite (= x!1 47) (lift-F (mk-F 49 50 51 52 53 54 55))\n  (ite (= x!1 14) (lift-G (mk-G 28 29 30 31 32))\n  (ite (= x!1 117) (lift-C (mk-C 126 127 128))\n  (ite (= x!1 152) (lift-F (mk-F 157 158 159 160 161 162 163))\n  (ite (= x!1 155) (lift-E (mk-E 165 166 167))\n  (ite (= x!1 165) (lift-F (mk-F 168 169 170 171 172 173 174))\n  (ite (= x!1 28) (lift-F (mk-F 60 61 62 63 64 65 66))\n  (ite (= x!1 46) (lift-B (mk-B 59))\n  (ite (= x!1 76) (lift-E (mk-E 95 96 97))\n  (ite (= x!1 75) (lift-C (mk-C 85 86 87))\n  (ite (= x!1 81) (lift-F (mk-F 101 102 103 104 105 106 107))\n  (ite (= x!1 15) (lift-F (mk-F 33 34 35 37 39 40 41))\n  (ite (= x!1 16)\n    (lift-H (mk-H 38 (- 29136) 7719 42 1236 2437 8855 43 8365 2282 1796))\n  (ite (= x!1 52) (lift-B (mk-B 84))\n  (ite (= x!1 104)\n    (lift-H (mk-H (- 19796) 2240 9725 114 2275 2446 590 115 840 8586 6906))\n  (ite (= x!1 120) (lift-E (mk-E 123 124 125))\n  (ite (= x!1 95) (lift-C (mk-C 111 112 113))\n  (ite (= x!1 160) (lift-C (mk-C 175 176 177))\n  (ite (= x!1 171) (lift-F (mk-F 178 179 180 181 182 183 184))\n  (ite (= x!1 37) (lift-C (mk-C 72 73 74))\n  (ite (= x!1 17) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 44))\n    (lift-B (mk-B 83)))))))))))))))))))))))))))))))))))))))))))))))))\n(define-fun k!10 ((x!1 Int)) Int\n  (ite (= x!1 137) 137\n  (ite (= x!1 120) 120\n  (ite (= x!1 155) 155\n  (ite (= x!1 52) 52\n  (ite (= x!1 63) 63\n  (ite (= x!1 148) 148\n  (ite (= x!1 13) 13\n  (ite (= x!1 132) 132\n  (ite (= x!1 43) 43\n  (ite (= x!1 171) 171\n  (ite (= x!1 181) 181\n  (ite (= x!1 123) 123\n  (ite (= x!1 165) 165\n  (ite (= x!1 17) 17\n  (ite (= x!1 75) 75\n  (ite (= x!1 70) 70\n  (ite (= x!1 114) 114\n  (ite (= x!1 11) 11\n  (ite (= x!1 46) 46\n  (ite (= x!1 142) 142\n  (ite (= x!1 44) 44\n  (ite (= x!1 95) 95\n  (ite (= x!1 20) 20\n  (ite (= x!1 160) 160\n  (ite (= x!1 78) 78\n  (ite (= x!1 104) 104\n  (ite (= x!1 14) 14\n  (ite (= x!1 91) 91\n  (ite (= x!1 136) 136\n  (ite (= x!1 16) 16\n  (ite (= x!1 81) 81\n  (ite (= x!1 9) 9\n  (ite (= x!1 12) 12\n  (ite (= x!1 42) 42\n  (ite (= x!1 37) 37\n  (ite (= x!1 76) 76\n  (ite (= x!1 15) 15\n  (ite (= x!1 115) 115\n  (ite (= x!1 28) 28\n  (ite (= x!1 47) 47\n  (ite (= x!1 117) 117\n  (ite (= x!1 143) 143\n  (ite (= x!1 69) 69\n  (ite (= x!1 152) 152\n  (ite (= x!1 10) 10\n  (ite (= x!1 22) 22\n    31)))))))))))))))))))))))))))))))))))))))))))))))\n(define-fun k!9 ((x!1 Int)) Any\n  (k!9!11 (k!10 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (b Int)))))\n(declare-datatypes () ((D (mk-D (bb Ref)(d Int)))))\n(declare-datatypes () ((E (mk-E (bb Ref)(d Int)(e Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)))))\n(declare-datatypes () ((G (mk-G (bb Ref)(d Int)(e Int)(ee Ref)(g Int)))))\n(declare-datatypes () ((F (mk-F (a Int)(b Int)(c Int)(bb Ref)(d Int)(e Int)(f Int)))))\n(declare-datatypes () ((H (mk-H (a Int)(b Int)(c Int)(bb Ref)(d Int)(e Int)(f Int)(ee Ref)(g Int)(h Int)(tsum Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (h Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-D (sel-D D))\n  (lift-E (sel-E E))\n  (lift-C (sel-C C))\n  (lift-G (sel-G G))\n  (lift-F (sel-F F))\n  (lift-H (sel-H H))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-E ((this Ref)) Bool\n  (is-lift-E (deref this))\n)\n\n(define-fun deref-E ((this Ref)) E\n  (sel-E (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-G ((this Ref)) Bool\n  (is-lift-G (deref this))\n)\n\n(define-fun deref-G ((this Ref)) G\n  (sel-G (deref this))\n)\n\n(define-fun deref-is-F ((this Ref)) Bool\n  (is-lift-F (deref this))\n)\n\n(define-fun deref-F ((this Ref)) F\n  (sel-F (deref this))\n)\n\n(define-fun deref-is-H ((this Ref)) Bool\n  (is-lift-H (deref this))\n)\n\n(define-fun deref-H ((this Ref)) H\n  (sel-H (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-C this)\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (or\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-E ((this Ref)) Bool\n  (or\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-G ((this Ref)) Bool\n  (or\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-F ((this Ref)) Bool\n  (or\n    (deref-is-F this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-H ((this Ref)) Bool\n  (deref-is-H this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.b: ---\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.bb: ---\n\n(define-fun D!bb ((this Ref)) Ref\n  (bb (deref-D this))\n)\n\n; --- getters for D.d: ---\n\n(define-fun D.d ((this Ref)) Int\n  (ite (deref-is-D this) (d (deref-D this))\n  (ite (deref-is-E this) (d (deref-E this))\n  (ite (deref-is-F this) (d (deref-F this))\n  (ite (deref-is-G this) (d (deref-G this))\n  (d (deref-H this))))))\n)\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; ------------------------\n;   Getters for class E:\n; ------------------------\n\n; --- getters for E.bb: ---\n\n(define-fun E!bb ((this Ref)) Ref\n  (bb (deref-E this))\n)\n\n; --- getters for E.d: ---\n\n(define-fun E!d ((this Ref)) Int\n  (d (deref-E this))\n)\n\n; --- getters for E.e: ---\n\n(define-fun E!e ((this Ref)) Int\n  (e (deref-E this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.a: ---\n\n(define-fun C!a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n; --- getters for C.b: ---\n\n(define-fun C!b ((this Ref)) Int\n  (b (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; ------------------------\n;   Getters for class G:\n; ------------------------\n\n; --- getters for G.bb: ---\n\n(define-fun G!bb ((this Ref)) Ref\n  (bb (deref-G this))\n)\n\n; --- getters for G.d: ---\n\n(define-fun G!d ((this Ref)) Int\n  (d (deref-G this))\n)\n\n; --- getters for G.e: ---\n\n(define-fun G!e ((this Ref)) Int\n  (e (deref-G this))\n)\n\n; --- getters for G.ee: ---\n\n(define-fun G!ee ((this Ref)) Ref\n  (ee (deref-G this))\n)\n\n; --- getters for G.g: ---\n\n(define-fun G!g ((this Ref)) Int\n  (g (deref-G this))\n)\n\n; ------------------------\n;   Getters for class F:\n; ------------------------\n\n; --- getters for F.a: ---\n\n(define-fun F!a ((this Ref)) Int\n  (a (deref-F this))\n)\n\n; --- getters for F.b: ---\n\n(define-fun F!b ((this Ref)) Int\n  (b (deref-F this))\n)\n\n; --- getters for F.c: ---\n\n(define-fun F!c ((this Ref)) Int\n  (c (deref-F this))\n)\n\n; --- getters for F.bb: ---\n\n(define-fun F!bb ((this Ref)) Ref\n  (bb (deref-F this))\n)\n\n; --- getters for F.d: ---\n\n(define-fun F!d ((this Ref)) Int\n  (d (deref-F this))\n)\n\n; --- getters for F.e: ---\n\n(define-fun F!e ((this Ref)) Int\n  (e (deref-F this))\n)\n\n; --- getters for F.f: ---\n\n(define-fun F!f ((this Ref)) Int\n  (f (deref-F this))\n)\n\n; ------------------------\n;   Getters for class H:\n; ------------------------\n\n; --- getters for H.a: ---\n\n(define-fun H.a ((this Ref)) Int\n  (a (deref-H this))\n)\n\n(define-fun H!a ((this Ref)) Int\n  (a (deref-H this))\n)\n\n; --- getters for H.b: ---\n\n(define-fun H.b ((this Ref)) Int\n  (b (deref-H this))\n)\n\n(define-fun H!b ((this Ref)) Int\n  (b (deref-H this))\n)\n\n; --- getters for H.c: ---\n\n(define-fun H.c ((this Ref)) Int\n  (c (deref-H this))\n)\n\n(define-fun H!c ((this Ref)) Int\n  (c (deref-H this))\n)\n\n; --- getters for H.bb: ---\n\n(define-fun H!bb ((this Ref)) Ref\n  (bb (deref-H this))\n)\n\n; --- getters for H.d: ---\n\n(define-fun H.d ((this Ref)) Int\n  (d (deref-H this))\n)\n\n(define-fun H!d ((this Ref)) Int\n  (d (deref-H this))\n)\n\n; --- getters for H.e: ---\n\n(define-fun H.e ((this Ref)) Int\n  (e (deref-H this))\n)\n\n(define-fun H!e ((this Ref)) Int\n  (e (deref-H this))\n)\n\n; --- getters for H.f: ---\n\n(define-fun H.f ((this Ref)) Int\n  (f (deref-H this))\n)\n\n(define-fun H!f ((this Ref)) Int\n  (f (deref-H this))\n)\n\n; --- getters for H.ee: ---\n\n(define-fun H!ee ((this Ref)) Ref\n  (ee (deref-H this))\n)\n\n; --- getters for H.g: ---\n\n(define-fun H.g ((this Ref)) Int\n  (g (deref-H this))\n)\n\n(define-fun H!g ((this Ref)) Int\n  (g (deref-H this))\n)\n\n; --- getters for H.h: ---\n\n(define-fun H!h ((this Ref)) Int\n  (h (deref-H this))\n)\n\n; --- getters for H.tsum: ---\n\n(define-fun H.tsum ((this Ref)) Int\n  (tsum (deref-H this))\n)\n\n(define-fun H!tsum ((this Ref)) Int\n  (tsum (deref-H this))\n)\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.h: ---\n\n(define-fun TopLevelDeclarations!h ((this Ref)) Ref\n  (h (deref-TopLevelDeclarations this))\n)\n\n; ========================================\n; === Constructor parameter constants: ===\n; ========================================\n\n(declare-const const__1 Ref)\n(declare-const const__2 Ref)\n(declare-const const__3 Int)\n\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n(define-fun D.inv ((this Ref)) Bool\n  (and\n    (deref-isa-B (D!bb this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; --------------------------\n;   Invariant for class E:\n; --------------------------\n\n(define-fun E.inv ((this Ref)) Bool\n  (and\n    (deref-isa-B (E!bb this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-E this) (E.inv this))\n))\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n(define-fun C.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --------------------------\n;   Invariant for class G:\n; --------------------------\n\n(define-fun G.inv ((this Ref)) Bool\n  (and\n    (deref-isa-B (G!bb this))\n    (deref-isa-E (G!ee this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-G this) (G.inv this))\n))\n\n; --------------------------\n;   Invariant for class F:\n; --------------------------\n\n(define-fun F.inv ((this Ref)) Bool\n  (and\n    (deref-isa-B (F!bb this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-F this) (F.inv this))\n))\n\n; --------------------------\n;   Invariant for class H:\n; --------------------------\n\n(define-fun H.inv ((this Ref)) Bool\n  (and\n    (= (H!tsum this) (+ (+ (+ (+ (+ (+ (+ (H!a this)  (H!b this) ) (H!c this) ) (H!d this) ) (H!e this) ) (H!f this) ) (H!g this) ) (H!h this) ))\n    (deref-isa-B (H!bb this))\n    (deref-isa-E (H!ee this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-H this) (H.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (deref (TopLevelDeclarations!h this)) (lift-H (mk-H 1 2 3 const__1 4 5 6 const__2 7 8 const__3)))\n    (deref-isa-H (TopLevelDeclarations!h this))\n    (= (H.tsum (TopLevelDeclarations!h this) ) 36)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfD Ref)) (deref-is-D instanceOfD)))\n(assert (exists ((instanceOfE Ref)) (deref-is-E instanceOfE)))\n(assert (exists ((instanceOfC Ref)) (deref-is-C instanceOfC)))\n(assert (exists ((instanceOfG Ref)) (deref-is-G instanceOfG)))\n(assert (exists ((instanceOfF Ref)) (deref-is-F instanceOfF)))\n(assert (exists ((instanceOfH Ref)) (deref-is-H instanceOfH)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"inheritance10.k":{"typeChecks":true,"model":"\nclass A {\n  a:Int\n  b:Int\n  c:Int\n  d:Int\n  e:Int\n  f:Int\n  g:Int\n}\n\nclass B extending A\n\nclass C extending B\n\nclass D extending C\n\nclass E extending D\n\nclass F extending E\n\nclass G extending F\n\nclass H extending G\n\nh:H = H()\n\nreq h.a + h.b + h.c + h.d + h.e + h.f + h.g = 90\n\n","name":"inheritance10.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"e","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"f","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"g","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["D"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"F","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["E"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"G","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["F"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"H","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["G"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["H"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"h","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"H","type":"ElementValue"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"h","type":"ElementValue"},"a"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"h","type":"ElementValue"},"b"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"h","type":"ElementValue"},"c"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"h","type":"ElementValue"},"d"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"h","type":"ElementValue"},"e"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"h","type":"ElementValue"},"f"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"h","type":"ElementValue"},"g"]}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},90],"type":"Expression"}]},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"c","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"e","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"f","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"g","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"E","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["D"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"F","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["E"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"G","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["F"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"H","typeparams":[],"annotations":[],"type":"EntityDecl","members":[],"extending":[{"ident":{"names":["G"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["H"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"h","expr":{"args":[],"type":"FunApplExp","exp1":{"ident":"H","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":90},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"h","type":"IdentExp"},"ident":"g","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"h","type":"IdentExp"},"ident":"f","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"h","type":"IdentExp"},"ident":"e","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"h","type":"IdentExp"},"ident":"d","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"h","type":"IdentExp"},"ident":"c","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"h","type":"IdentExp"},"ident":"b","type":"DotExp"},"exp1":{"exp":{"ident":"h","type":"IdentExp"},"ident":"a","type":"DotExp"}}}}}}}},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun const__5 () Int\n  (- 17468))\n(define-fun instanceOfD!3 () Int\n  4)\n(define-fun const__3 () Int\n  0)\n(define-fun instanceOfG!6 () Int\n  7)\n(define-fun instanceOfH!7 () Int\n  8)\n(define-fun instanceOfF!5 () Int\n  6)\n(define-fun const__2 () Int\n  5853)\n(define-fun instanceOfA!0 () Int\n  1)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!9))\n(define-fun const__4 () Int\n  8365)\n(define-fun const__6 () Int\n  2282)\n(define-fun instanceOfTopLevelDeclarations!8 () Int\n  9)\n(define-fun const__7 () Int\n  449)\n(define-fun instanceOfE!4 () Int\n  5)\n(define-fun instanceOfC!2 () Int\n  3)\n(define-fun instanceOfB!1 () Int\n  2)\n(define-fun const__1 () Int\n  609)\n(define-fun k!9!11 ((x!1 Int)) Any\n  (ite (= x!1 7) (lift-G (mk-G 52 53 54 55 56 57 58))\n  (ite (= x!1 3) (lift-C (mk-C 24 25 26 27 28 29 30))\n  (ite (= x!1 4) (lift-D (mk-D 31 32 33 34 35 36 37))\n  (ite (= x!1 8) (lift-H (mk-H 59 60 61 62 63 64 65))\n  (ite (= x!1 6) (lift-F (mk-F 45 46 47 48 49 50 51))\n  (ite (= x!1 5) (lift-E (mk-E 38 39 40 41 42 43 44))\n  (ite (= x!1 1) (lift-A (mk-A 10 11 12 13 14 15 16))\n  (ite (= x!1 2) (lift-B (mk-B 17 18 19 20 21 22 23))\n  (ite (= x!1 9) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 66))\n    (lift-H (mk-H 609 5853 0 8365 (- 17468) 2282 449))))))))))))\n(define-fun k!10 ((x!1 Int)) Int\n  (ite (= x!1 8) 8\n  (ite (= x!1 66) 66\n  (ite (= x!1 4) 4\n  (ite (= x!1 9) 9\n  (ite (= x!1 7) 7\n  (ite (= x!1 3) 3\n  (ite (= x!1 6) 6\n  (ite (= x!1 5) 5\n  (ite (= x!1 2) 2\n    1))))))))))\n(define-fun k!9 ((x!1 Int)) Any\n  (k!9!11 (k!10 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((D (mk-D (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((E (mk-E (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((F (mk-F (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((G (mk-G (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((H (mk-H (a Int)(b Int)(c Int)(d Int)(e Int)(f Int)(g Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (h Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-E (sel-E E))\n  (lift-F (sel-F F))\n  (lift-G (sel-G G))\n  (lift-H (sel-H H))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-E ((this Ref)) Bool\n  (is-lift-E (deref this))\n)\n\n(define-fun deref-E ((this Ref)) E\n  (sel-E (deref this))\n)\n\n(define-fun deref-is-F ((this Ref)) Bool\n  (is-lift-F (deref this))\n)\n\n(define-fun deref-F ((this Ref)) F\n  (sel-F (deref this))\n)\n\n(define-fun deref-is-G ((this Ref)) Bool\n  (is-lift-G (deref this))\n)\n\n(define-fun deref-G ((this Ref)) G\n  (sel-G (deref this))\n)\n\n(define-fun deref-is-H ((this Ref)) Bool\n  (is-lift-H (deref this))\n)\n\n(define-fun deref-H ((this Ref)) H\n  (sel-H (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (or\n    (deref-is-D this)\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-E ((this Ref)) Bool\n  (or\n    (deref-is-E this)\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-F ((this Ref)) Bool\n  (or\n    (deref-is-F this)\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-G ((this Ref)) Bool\n  (or\n    (deref-is-G this)\n    (deref-is-H this)\n  )\n)\n\n(define-fun deref-isa-H ((this Ref)) Bool\n  (deref-is-H this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class H:\n; ------------------------\n\n; --- getters for H.a: ---\n\n(define-fun H.a ((this Ref)) Int\n  (a (deref-H this))\n)\n\n; --- getters for H.b: ---\n\n(define-fun H.b ((this Ref)) Int\n  (b (deref-H this))\n)\n\n; --- getters for H.c: ---\n\n(define-fun H.c ((this Ref)) Int\n  (c (deref-H this))\n)\n\n; --- getters for H.d: ---\n\n(define-fun H.d ((this Ref)) Int\n  (d (deref-H this))\n)\n\n; --- getters for H.e: ---\n\n(define-fun H.e ((this Ref)) Int\n  (e (deref-H this))\n)\n\n; --- getters for H.f: ---\n\n(define-fun H.f ((this Ref)) Int\n  (f (deref-H this))\n)\n\n; --- getters for H.g: ---\n\n(define-fun H.g ((this Ref)) Int\n  (g (deref-H this))\n)\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.h: ---\n\n(define-fun TopLevelDeclarations!h ((this Ref)) Ref\n  (h (deref-TopLevelDeclarations this))\n)\n\n; ========================================\n; === Constructor parameter constants: ===\n; ========================================\n\n(declare-const const__1 Int)\n(declare-const const__2 Int)\n(declare-const const__3 Int)\n(declare-const const__4 Int)\n(declare-const const__5 Int)\n(declare-const const__6 Int)\n(declare-const const__7 Int)\n\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n(define-fun C.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n(define-fun D.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; --------------------------\n;   Invariant for class E:\n; --------------------------\n\n(define-fun E.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-E this) (E.inv this))\n))\n\n; --------------------------\n;   Invariant for class F:\n; --------------------------\n\n(define-fun F.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-F this) (F.inv this))\n))\n\n; --------------------------\n;   Invariant for class G:\n; --------------------------\n\n(define-fun G.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-G this) (G.inv this))\n))\n\n; --------------------------\n;   Invariant for class H:\n; --------------------------\n\n(define-fun H.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-H this) (H.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (deref (TopLevelDeclarations!h this)) (lift-H (mk-H const__1 const__2 const__3 const__4 const__5 const__6 const__7)))\n    (deref-isa-H (TopLevelDeclarations!h this))\n    (= (+ (+ (+ (+ (+ (+ (H.a (TopLevelDeclarations!h this) ) (H.b (TopLevelDeclarations!h this) )) (H.c (TopLevelDeclarations!h this) )) (H.d (TopLevelDeclarations!h this) )) (H.e (TopLevelDeclarations!h this) )) (H.f (TopLevelDeclarations!h this) )) (H.g (TopLevelDeclarations!h this) )) 90)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (deref-is-C instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (deref-is-D instanceOfD)))\n(assert (exists ((instanceOfE Ref)) (deref-is-E instanceOfE)))\n(assert (exists ((instanceOfF Ref)) (deref-is-F instanceOfF)))\n(assert (exists ((instanceOfG Ref)) (deref-is-G instanceOfG)))\n(assert (exists ((instanceOfH Ref)) (deref-is-H instanceOfH)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"inheritance1.k":{"typeChecks":true,"model":"\nclass A {\n  x:Int\n}\n\nclass B extending A {\n  y:Int\n}\n\nclass D extending C {\n  i:Int\n}\n\nclass C extending B {\n  z:Int\n}\n\ndobj:D\n\nsum:Int = dobj.x + dobj.y + dobj.z + dobj.i\n\n","name":"inheritance1.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"i","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["D"],"type":"QualifiedName"}],"type":"Expression"},"name":"dobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"sum","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"x"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"y"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"z"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"i"]}]},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"x","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"i","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"z","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["D"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"dobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"sum","expr":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"i","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"z","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"y","type":"DotExp"},"exp1":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"x","type":"DotExp"}}}},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfTopLevelDeclarations!4 () Int\n  5)\n(define-fun instanceOfD!3 () Int\n  4)\n(define-fun instanceOfC!2 () Int\n  3)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!5))\n(define-fun instanceOfB!1 () Int\n  2)\n(define-fun instanceOfA!0 () Int\n  1)\n(define-fun k!6 ((x!1 Int)) Int\n  (ite (= x!1 4) 4\n  (ite (= x!1 3) 3\n  (ite (= x!1 5) 5\n  (ite (= x!1 2) 2\n  (ite (= x!1 1) 1\n    16))))))\n(define-fun k!5!7 ((x!1 Int)) Any\n  (ite (= x!1 3) (lift-C (mk-C 9 10 11))\n  (ite (= x!1 16) (lift-D (mk-D 1236 2437 38 7719))\n  (ite (= x!1 1) (lift-A (mk-A 6))\n  (ite (= x!1 2) (lift-B (mk-B 7 8))\n  (ite (= x!1 4) (lift-D (mk-D 12 13 14 15))\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations 16 11430))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (k!5!7 (k!6 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)))))\n(declare-datatypes () ((C (mk-C (x Int)(y Int)(z Int)))))\n(declare-datatypes () ((D (mk-D (x Int)(y Int)(z Int)(i Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (dobj Ref)(sum Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.x: ---\n\n(define-fun D.x ((this Ref)) Int\n  (x (deref-D this))\n)\n\n; --- getters for D.y: ---\n\n(define-fun D.y ((this Ref)) Int\n  (y (deref-D this))\n)\n\n; --- getters for D.z: ---\n\n(define-fun D.z ((this Ref)) Int\n  (z (deref-D this))\n)\n\n; --- getters for D.i: ---\n\n(define-fun D.i ((this Ref)) Int\n  (i (deref-D this))\n)\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.dobj: ---\n\n(define-fun TopLevelDeclarations!dobj ((this Ref)) Ref\n  (dobj (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.sum: ---\n\n(define-fun TopLevelDeclarations!sum ((this Ref)) Int\n  (sum (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n(define-fun C.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n(define-fun D.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (TopLevelDeclarations!sum this) (+ (+ (+ (D.x (TopLevelDeclarations!dobj this) ) (D.y (TopLevelDeclarations!dobj this) )) (D.z (TopLevelDeclarations!dobj this) )) (D.i (TopLevelDeclarations!dobj this) )))\n    (deref-isa-D (TopLevelDeclarations!dobj this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (deref-is-C instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (deref-is-D instanceOfD)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt13.k":{"typeChecks":true,"model":"\nclass A {\n  a:Int\n}\n\nclass B extending A {\n  b:Int\n}\n\nclass C extending B {\n  c:Int\n}\n\nclass D {\n  d:Int\n}\n\na:A = C(a :: 1,b :: 2,c :: 3)\n\nreq a is A\n\nreq a is B\n\nreq a is C\n\n","name":"testsmt13.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"c","modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"C","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"a",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"b",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"NamedArgument"},"c",{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"operand":[{"element":"ElementValue","type":"TypeCastCheckExp"},"false",{"element":"a","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}],"type":"Expression"},"type":"ConstraintDecl"},{"exp":{"operand":[{"element":"ElementValue","type":"TypeCastCheckExp"},"false",{"element":"a","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"}],"type":"Expression"},"type":"ConstraintDecl"},{"exp":{"operand":[{"element":"ElementValue","type":"TypeCastCheckExp"},"false",{"element":"a","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}],"type":"Expression"},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"a","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"b","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"c","modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"d","modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"assignment":false,"name":"a","expr":{"args":[{"exp":{"type":"LiteralInteger","i":1},"ident":"a","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":2},"ident":"b","type":"NamedArgument"},{"exp":{"type":"LiteralInteger","i":3},"ident":"c","type":"NamedArgument"}],"type":"FunApplExp","exp1":{"ident":"C","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"exp":{"ident":"a","type":"IdentExp"},"cast":"false","type":"TypeCastCheckExp"},"type":"ConstraintDecl"},{"exp":{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"exp":{"ident":"a","type":"IdentExp"},"cast":"false","type":"TypeCastCheckExp"},"type":"ConstraintDecl"},{"exp":{"ty":{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"exp":{"ident":"a","type":"IdentExp"},"cast":"false","type":"TypeCastCheckExp"},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfTopLevelDeclarations!4 () Int\n  7)\n(define-fun instanceOfD!3 () Int\n  6)\n(define-fun instanceOfC!2 () Int\n  5)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!5))\n(define-fun instanceOfB!1 () Int\n  4)\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!6 ((x!1 Int)) Int\n  (ite (= x!1 6) 6\n  (ite (= x!1 5) 5\n  (ite (= x!1 7) 7\n  (ite (= x!1 4) 4\n  (ite (= x!1 0) 0\n    15))))))\n(define-fun k!5!7 ((x!1 Int)) Any\n  (ite (= x!1 5) (lift-C (mk-C 11 12 13))\n  (ite (= x!1 15) (lift-C (mk-C 1 2 3))\n  (ite (= x!1 0) (lift-A (mk-A 8))\n  (ite (= x!1 4) (lift-B (mk-B 9 10))\n  (ite (= x!1 6) (lift-D (mk-D 14))\n    (lift-TopLevelDeclarations (mk-TopLevelDeclarations 15))))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (k!5!7 (k!6 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(b Int)(c Int)))))\n(declare-datatypes () ((D (mk-D (d Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (a Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (or\n    (deref-is-B this)\n    (deref-is-C this)\n  )\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (ite (deref-is-B this) (a (deref-B this))\n  (a (deref-C this))))\n)\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B.a ((this Ref)) Int\n  (ite (deref-is-B this) (a (deref-B this))\n  (a (deref-C this)))\n)\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B.b ((this Ref)) Int\n  (ite (deref-is-B this) (b (deref-B this))\n  (b (deref-C this)))\n)\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.a: ---\n\n(define-fun C!a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n; --- getters for C.b: ---\n\n(define-fun C!b ((this Ref)) Int\n  (b (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.d: ---\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.a: ---\n\n(define-fun TopLevelDeclarations!a ((this Ref)) Ref\n  (a (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n(define-fun C.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n(define-fun D.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (deref (TopLevelDeclarations!a this)) (lift-C (mk-C 1 2 3)))\n    (deref-isa-A (TopLevelDeclarations!a this))\n    (deref-isa-A (TopLevelDeclarations!a this) )\n    (deref-isa-B (TopLevelDeclarations!a this) )\n    (deref-isa-C (TopLevelDeclarations!a this) )\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (deref-is-C instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (deref-is-D instanceOfD)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"tc4.k":{"typeChecks":true,"model":"\nclass A {\n\n  fun foo(x:Int) : Int\n\n}\n\nclass B extending A {\n\n  fun foo(x:Int) : Int\n  {\n    x + 2\n  }\n}\n\n","name":"tc4.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[],"ident":"foo","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"foo","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"spec":[],"ty":{"type":"IntType"},"body":[],"ident":"foo","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":2},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"foo","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for A:\n;;   A!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun A!val!0 () A)\n;; cardinality constraint:\n(forall ((x A)) (= x A!val!0))\n;; -----------\n;; universe for B:\n;;   B!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun B!val!0 () B)\n;; cardinality constraint:\n(forall ((x B)) (= x B!val!0))\n;; -----------\n;; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  2)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun instanceOfB!1 () Int\n  1)\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!3 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 0) (lift-A A!val!0)\n  (ite (= x!1 1) (lift-B B!val!0)\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0)))))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-sort A) (declare-const mk-A A)\n(declare-sort B) (declare-const mk-B B)\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(declare-fun A.foo (Ref Int) Int)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.foo ((this Ref)(x Int)) Int\n  (+ x 2)\n)\n\n(define-fun B!foo ((this Ref)(x Int)) Int\n  (+ x 2)\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"tc1.k":{"typeChecks":false,"model":"","name":"tc1.k","json2":"","json1":"","smtModel":"","smt":""},"inheritance3.k":{"typeChecks":true,"model":"\nclass A {\n  x:Int = 2\n\n  fun get : Int\n  {\n    x\n  }\n}\n\nclass B extending A {\n  y:Int = 5\n\n  fun sum(k:Int) : Int\n  {\n    get() + y + k\n  }\n}\n\nbobj:B\n\ntheSum:Int = bobj.sum(bobj.get())\n\nreq theSum = 9\n\n","name":"inheritance3.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"x","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"element":"x","type":"ElementValue"},"type":"ExpressionDecl"}],"ident":"get","typeParams":[],"params":[],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"y","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},5],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"get","type":"ElementValue"}]},{"element":"y","type":"ElementValue"}]},{"element":"k","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"sum","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"},"name":"bobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"theSum","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"bobj","type":"ElementValue"},"sum"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"bobj","type":"ElementValue"},"get"]}]}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"theSum","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},9],"type":"Expression"}]},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"x","expr":{"type":"LiteralInteger","i":2},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"ident":"x","type":"IdentExp"},"type":"ExpressionDecl"}],"ident":"get","typeParams":[],"params":[],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"y","expr":{"type":"LiteralInteger","i":5},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"args":[],"type":"FunApplExp","exp1":{"ident":"get","type":"IdentExp"}}}},"type":"ExpressionDecl"}],"ident":"sum","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"bobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"theSum","expr":{"args":[{"exp":{"args":[],"type":"FunApplExp","exp1":{"exp":{"ident":"bobj","type":"IdentExp"},"ident":"get","type":"DotExp"}},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"bobj","type":"IdentExp"},"ident":"sum","type":"DotExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":9},"exp1":{"ident":"theSum","type":"IdentExp"}},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfTopLevelDeclarations!2 () Int\n  4)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun instanceOfB!1 () Int\n  3)\n(define-fun instanceOfA!0 () Int\n  1)\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 4) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 6 9))\n  (ite (= x!1 1) (lift-A (mk-A 2))\n    (lift-B (mk-B 2 5)))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 6) 6\n  (ite (= x!1 3) 3\n  (ite (= x!1 1) 1\n    4))))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)))))\n(declare-datatypes () ((B (mk-B (x Int)(y Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (bobj Ref)(theSum Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (ite (deref-is-A this) (x (deref-A this))\n  (x (deref-B this)))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.x: ---\n\n(define-fun B.x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n(define-fun B!x ((this Ref)) Int\n  (x (deref-B this))\n)\n\n; --- getters for B.y: ---\n\n(define-fun B.y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n(define-fun B!y ((this Ref)) Int\n  (y (deref-B this))\n)\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.bobj: ---\n\n(define-fun TopLevelDeclarations!bobj ((this Ref)) Ref\n  (bobj (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.theSum: ---\n\n(define-fun TopLevelDeclarations!theSum ((this Ref)) Int\n  (theSum (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.get ((this Ref)) Int\n  (A.x this) \n)\n\n(define-fun A!get ((this Ref)) Int\n  (A!x this) \n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.get ((this Ref)) Int\n  (B.x this) \n)\n\n(define-fun B!get ((this Ref)) Int\n  (B!x this) \n)\n\n(define-fun B.sum ((this Ref)(k Int)) Int\n  (+ (+ (B.get this ) (B.y this) ) k)\n)\n\n(define-fun B!sum ((this Ref)(k Int)) Int\n  (+ (+ (B!get this ) (B!y this) ) k)\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A!x this) 2)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (= (B!x this) 2)\n    (= (B!y this) 5)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (TopLevelDeclarations!theSum this) (B.sum (TopLevelDeclarations!bobj this)  (B.get (TopLevelDeclarations!bobj this)  )))\n    (deref-isa-B (TopLevelDeclarations!bobj this))\n    (= (TopLevelDeclarations!theSum this)  9)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"inheritance6.k":{"typeChecks":true,"model":"\nclass Person {\n  father:Person\n  child:Person\n\n  req father.child = this\n}\n\np1:Person\n\np2:Person\n\nreq p1 != p2\n\nreq p2.father = p1\n\nreq p1.child = p2\n\nreq p1.father = p2\n\nreq p2.child = p1\n\n","name":"inheritance6.k","json2":{"decls":[{"entityToken":"class","ident":"Person","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"},"name":"father","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"},"name":"child","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"father","type":"ElementValue"},"child"]},{"operand":[{"element":"ElementValue","type":"ThisLiteral"}],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"},"name":"p1","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Person"],"type":"QualifiedName"}],"type":"Expression"},"name":"p2","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"element":"p1","type":"ElementValue"},{"element":"p2","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"p2","type":"ElementValue"},"father"]},{"element":"p1","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"p1","type":"ElementValue"},"child"]},{"element":"p2","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"p1","type":"ElementValue"},"father"]},{"element":"p2","type":"ElementValue"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"p2","type":"ElementValue"},"child"]},{"element":"p1","type":"ElementValue"}]},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Person","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"father","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"child","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"ThisLiteral"},"exp1":{"exp":{"ident":"father","type":"IdentExp"},"ident":"child","type":"DotExp"}},"type":"ConstraintDecl"}],"extending":[]},{"ty":{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"p1","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Person"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"p2","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"NotEQ","type":"BinExp","exp2":{"ident":"p2","type":"IdentExp"},"exp1":{"ident":"p1","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"p1","type":"IdentExp"},"exp1":{"exp":{"ident":"p2","type":"IdentExp"},"ident":"father","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"p2","type":"IdentExp"},"exp1":{"exp":{"ident":"p1","type":"IdentExp"},"ident":"child","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"p2","type":"IdentExp"},"exp1":{"exp":{"ident":"p1","type":"IdentExp"},"ident":"father","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"ident":"p1","type":"IdentExp"},"exp1":{"exp":{"ident":"p2","type":"IdentExp"},"ident":"child","type":"DotExp"}},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Person (mk-Person (father Ref)(child Ref)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (p1 Ref)(p2 Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-Person (sel-Person Person))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-Person ((this Ref)) Bool\n  (is-lift-Person (deref this))\n)\n\n(define-fun deref-Person ((this Ref)) Person\n  (sel-Person (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-Person ((this Ref)) Bool\n  (deref-is-Person this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -----------------------------\n;   Getters for class Person:\n; -----------------------------\n\n; --- getters for Person.father: ---\n\n(define-fun Person.father ((this Ref)) Ref\n  (father (deref-Person this))\n)\n\n(define-fun Person!father ((this Ref)) Ref\n  (father (deref-Person this))\n)\n\n; --- getters for Person.child: ---\n\n(define-fun Person.child ((this Ref)) Ref\n  (child (deref-Person this))\n)\n\n(define-fun Person!child ((this Ref)) Ref\n  (child (deref-Person this))\n)\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.p1: ---\n\n(define-fun TopLevelDeclarations!p1 ((this Ref)) Ref\n  (p1 (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.p2: ---\n\n(define-fun TopLevelDeclarations!p2 ((this Ref)) Ref\n  (p2 (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; -------------------------------\n;   Invariant for class Person:\n; -------------------------------\n\n(define-fun Person.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Person (Person!father this))\n    (deref-isa-Person (Person!child this))\n    (= (Person.child (Person!father this) ) this)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Person this) (Person.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Person (TopLevelDeclarations!p1 this))\n    (deref-isa-Person (TopLevelDeclarations!p2 this))\n    (not (= (TopLevelDeclarations!p1 this)  (TopLevelDeclarations!p2 this) ))\n    (= (Person.father (TopLevelDeclarations!p2 this) ) (TopLevelDeclarations!p1 this) )\n    (= (Person.child (TopLevelDeclarations!p1 this) ) (TopLevelDeclarations!p2 this) )\n    (= (Person.father (TopLevelDeclarations!p1 this) ) (TopLevelDeclarations!p2 this) )\n    (= (Person.child (TopLevelDeclarations!p2 this) ) (TopLevelDeclarations!p1 this) )\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfPerson Ref)) (deref-is-Person instanceOfPerson)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt11.k":{"typeChecks":true,"model":"\nclass A {\n  a:Int = 1\n\n  fun f(x:Int) : Int * Int\n  {\n    Tuple(a,x)\n  }\n\n  fun g(x:Int) : Int\n  {\n    k:Int * Int = f(x)\n    k # 1 + k # 2\n  }\n}\n\nclass B extending A {\n  b:Int = 2\n\n  fun h(tuple:Int * Int) : Int\n  {\n    k1:Int = tuple # 1\n    k2:Int = tuple # 2\n    g(k1 + k2)\n  }\n  r:Int = h(Tuple(10,20))\n\n  req r = 31\n}\n\n","name":"testsmt11.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"CartesianType"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"}],"type":"Expression"},"body":[{"exp":{"operand":[{"element":"ElementValue","type":"TupleExp"},{"element":"a","type":"ElementValue"},{"element":"x","type":"ElementValue"}],"type":"Expression"},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"ty":{"operand":[{"element":"ElementValue","type":"CartesianType"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"}],"type":"Expression"},"assignment":false,"name":"k","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"f","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"x","type":"ElementValue"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"k","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"k","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}]}]},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"b","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k1","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"tuple","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k2","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"tuple","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"g","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"k1","type":"ElementValue"},{"element":"k2","type":"ElementValue"}]}],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"CartesianType"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"}],"type":"Expression"},"name":"tuple","type":"Param"}],"type":"FunDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"r","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"h","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"TupleExp"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},20],"type":"Expression"}],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"r","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},31],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"type":"LiteralInteger","i":1},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"CartesianType","types":[{"type":"IntType"},{"type":"IntType"}]},"body":[{"exp":{"exps":[{"ident":"a","type":"IdentExp"},{"ident":"x","type":"IdentExp"}],"type":"TupleExp"},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"ty":{"type":"CartesianType","types":[{"type":"IntType"},{"type":"IntType"}]},"assignment":false,"name":"k","expr":{"args":[{"exp":{"ident":"x","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"f","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"Plus","type":"BinExp","exp2":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":2},"exp1":{"ident":"k","type":"IdentExp"}},"exp1":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"k","type":"IdentExp"}}},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"type":"LiteralInteger","i":2},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k1","expr":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"tuple","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"k2","expr":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":2},"exp1":{"ident":"tuple","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"args":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k2","type":"IdentExp"},"exp1":{"ident":"k1","type":"IdentExp"}},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"g","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"type":"CartesianType","types":[{"type":"IntType"},{"type":"IntType"}]},"name":"tuple","type":"Param"}],"type":"FunDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"r","expr":{"args":[{"exp":{"exps":[{"type":"LiteralInteger","i":10},{"type":"LiteralInteger","i":20}],"type":"TupleExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"h","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":31},"exp1":{"ident":"r","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  4)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun instanceOfB!1 () Int\n  3)\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-A (mk-A 1))\n  (ite (= x!1 3) (lift-B (mk-B 1 2 31))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 3) 3\n  (ite (= x!1 0) 0\n    4)))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)(r Int)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (a (deref-B this)))\n)\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B.a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B.b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; --- getters for B.r: ---\n\n(define-fun B!r ((this Ref)) Int\n  (r (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.f ((this Ref)(x Int)) (Tuple2 Int Int)\n  (mk-Tuple2 (A.a this)  x)\n)\n\n(define-fun A!f ((this Ref)(x Int)) (Tuple2 Int Int)\n  (mk-Tuple2 (A!a this)  x)\n)\n\n(define-fun A.g ((this Ref)(x Int)) Int\n  (let ((k (A.f this x)))\n    (+ (_1 k) (_2 k)))\n)\n\n(define-fun A!g ((this Ref)(x Int)) Int\n  (let ((k (A!f this x)))\n    (+ (_1 k) (_2 k)))\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.f ((this Ref)(x Int)) (Tuple2 Int Int)\n  (mk-Tuple2 (B.a this)  x)\n)\n\n(define-fun B!f ((this Ref)(x Int)) (Tuple2 Int Int)\n  (mk-Tuple2 (B!a this)  x)\n)\n\n(define-fun B.g ((this Ref)(x Int)) Int\n  (let ((k (B.f this x)))\n    (+ (_1 k) (_2 k)))\n)\n\n(define-fun B!g ((this Ref)(x Int)) Int\n  (let ((k (B!f this x)))\n    (+ (_1 k) (_2 k)))\n)\n\n(define-fun B.h ((this Ref)(tuple (Tuple2 Int Int))) Int\n  (let ((k1 (_1 tuple)))\n    (let ((k2 (_2 tuple)))\n      (B.g this (+ k1 k2))))\n)\n\n(define-fun B!h ((this Ref)(tuple (Tuple2 Int Int))) Int\n  (let ((k1 (_1 tuple)))\n    (let ((k2 (_2 tuple)))\n      (B!g this (+ k1 k2))))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A!a this) 1)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (= (B!a this) 1)\n    (= (B!b this) 2)\n    (= (B!r this) (B!h this (mk-Tuple2 10 20)))\n    (= (B!r this)  31)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"inheritance2.k":{"typeChecks":true,"model":"\nclass A {\n  a:Int = 1\n}\n\nclass B extending A {\n  b:Int = 2\n}\n\nclass D extending C {\n  d:Int = 4\n}\n\nclass C extending A {\n  c:Int = 3\n}\n\ndobj:D\n\nsum:Int = dobj.a + dobj.c + dobj.d\n\n","name":"inheritance2.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"b","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"d","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},4],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"c","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["D"],"type":"QualifiedName"}],"type":"Expression"},"name":"dobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"sum","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"a"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"c"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"dobj","type":"ElementValue"},"d"]}]},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"type":"LiteralInteger","i":1},"modifiers":[],"type":"PropertyDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"type":"LiteralInteger","i":2},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"d","expr":{"type":"LiteralInteger","i":4},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"c","expr":{"type":"LiteralInteger","i":3},"modifiers":[],"type":"PropertyDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]},{"ty":{"ident":{"names":["D"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"dobj","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"sum","expr":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"d","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"c","type":"DotExp"},"exp1":{"exp":{"ident":"dobj","type":"IdentExp"},"ident":"a","type":"DotExp"}}},"modifiers":[],"type":"PropertyDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfTopLevelDeclarations!4 () Int\n  10)\n(define-fun instanceOfD!3 () Int\n  9)\n(define-fun instanceOfC!2 () Int\n  7)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!5))\n(define-fun instanceOfB!1 () Int\n  6)\n(define-fun instanceOfA!0 () Int\n  5)\n(define-fun k!6 ((x!1 Int)) Int\n  (ite (= x!1 9) 9\n  (ite (= x!1 7) 7\n  (ite (= x!1 10) 10\n  (ite (= x!1 6) 6\n  (ite (= x!1 5) 5\n    11))))))\n(define-fun k!5!7 ((x!1 Int)) Any\n  (ite (= x!1 10) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 11 8))\n  (ite (= x!1 7) (lift-C (mk-C 1 3))\n  (ite (= x!1 5) (lift-A (mk-A 1))\n  (ite (= x!1 6) (lift-B (mk-B 1 2))\n    (lift-D (mk-D 1 3 4)))))))\n(define-fun k!5 ((x!1 Int)) Any\n  (k!5!7 (k!6 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)))))\n(declare-datatypes () ((C (mk-C (a Int)(c Int)))))\n(declare-datatypes () ((D (mk-D (a Int)(c Int)(d Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (dobj Ref)(sum Int)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (or\n    (deref-is-C this)\n    (deref-is-D this)\n  )\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.a: ---\n\n(define-fun C!a ((this Ref)) Int\n  (a (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.a: ---\n\n(define-fun D.a ((this Ref)) Int\n  (a (deref-D this))\n)\n\n(define-fun D!a ((this Ref)) Int\n  (a (deref-D this))\n)\n\n; --- getters for D.c: ---\n\n(define-fun D.c ((this Ref)) Int\n  (c (deref-D this))\n)\n\n(define-fun D!c ((this Ref)) Int\n  (c (deref-D this))\n)\n\n; --- getters for D.d: ---\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.dobj: ---\n\n(define-fun TopLevelDeclarations!dobj ((this Ref)) Ref\n  (dobj (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.sum: ---\n\n(define-fun TopLevelDeclarations!sum ((this Ref)) Int\n  (sum (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A!a this) 1)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (= (B!a this) 1)\n    (= (B!b this) 2)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (= (C!a this) 1)\n    (= (C!c this) 3)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n(define-fun D.inv ((this Ref)) Bool\n  (and\n    (= (D!a this) 1)\n    (= (D!c this) 3)\n    (= (D!d this) 4)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (= (TopLevelDeclarations!sum this) (+ (+ (D.a (TopLevelDeclarations!dobj this) ) (D.c (TopLevelDeclarations!dobj this) )) (D.d (TopLevelDeclarations!dobj this) )))\n    (deref-isa-D (TopLevelDeclarations!dobj this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (deref-is-C instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (deref-is-D instanceOfD)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt1.k":{"typeChecks":true,"model":"\nclass A {\n  x:Int\n  y:Int\n  z:Int * Bool\n\n  req z = Tuple(1,true)\n\n  req z # 1 = 1 && z # 2\n\n  fun f : Int * Bool\n  {\n    Tuple(1,true)\n  }\n\n  req x > 20\n\n  req exists i : Int . i > 0 && x + i = y\n\n  req f() # 2\n}\n\nclass B {\n  sat:Bool\n  z:Int\n  a:A\n\n  req a.x <= 22\n\n  req sat\n\n  req !sat => (z = a.x)\n\n  fun g(l:Int) : Int\n  {\n    l + 1\n  }\n\n  fun f(k:Int) : Int\n  {\n    g(k) + 1\n  }\n\n  req f(z) <= 22\n\n  req a.x != a.y\n}\n\n","name":"testsmt1.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"CartesianType"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"TupleExp"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"BooleanLiteral"},true],"type":"Expression"}],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"element":"z","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}]}]},"type":"ConstraintDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"CartesianType"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"}],"type":"Expression"},"body":[{"exp":{"operand":[{"element":"ElementValue","type":"TupleExp"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"BooleanLiteral"},true],"type":"Expression"}],"type":"Expression"},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"x","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},20],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"QuantifiedExp"},{"operand":[{"element":"ElementValue","type":"Exists"}],"type":"Expression"},{"bindings":[{"operand":[{"element":"ElementValue","type":"RngBinding"},{"operand":[{"element":"ElementValue","type":"TypeCollection"},{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"}],"type":"Expression"},{"operand":[{"element":"ElementValue","type":"IdentPattern"},"i"],"type":"Expression"}],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"And",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GT",{"element":"i","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},0],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"x","type":"ElementValue"},{"element":"i","type":"ElementValue"}]},{"element":"y","type":"ElementValue"}]}]}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"TupleIndex",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"f","type":"ElementValue"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"name":"sat","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LTE",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"x"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},22],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"element":"sat","type":"ElementValue"},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Implies",{"type":"Expression","operand":[{"element":"ElementValue","type":"UnaryExp"},"Not",{"element":"sat","type":"ElementValue"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"ParenExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"z","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"x"]}]}]}]},"type":"ConstraintDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"l","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"l","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"g","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"k","type":"ElementValue"}],"type":"Expression"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LTE",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"f","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"z","type":"ElementValue"}],"type":"Expression"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},22],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"NotEQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"x"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"y"]}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"x","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"y","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"CartesianType","types":[{"type":"IntType"},{"type":"BoolType"}]},"name":"z","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"exps":[{"type":"LiteralInteger","i":1},{"b":true,"type":"LiteralBoolean"}],"type":"TupleExp"},"exp1":{"ident":"z","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"op":"And","type":"BinExp","exp2":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":2},"exp1":{"ident":"z","type":"IdentExp"}},"exp1":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"z","type":"IdentExp"}}}},"type":"ConstraintDecl"},{"spec":[],"ty":{"type":"CartesianType","types":[{"type":"IntType"},{"type":"BoolType"}]},"body":[{"exp":{"exps":[{"type":"LiteralInteger","i":1},{"b":true,"type":"LiteralBoolean"}],"type":"TupleExp"},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[],"type":"FunDecl"},{"exp":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":20},"exp1":{"ident":"x","type":"IdentExp"}},"type":"ConstraintDecl"},{"exp":{"exp":{"op":"And","type":"BinExp","exp2":{"op":"EQ","type":"BinExp","exp2":{"ident":"y","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"i","type":"IdentExp"},"exp1":{"ident":"x","type":"IdentExp"}}},"exp1":{"op":"GT","type":"BinExp","exp2":{"type":"LiteralInteger","i":0},"exp1":{"ident":"i","type":"IdentExp"}}},"bindings":[{"patterns":[{"ident":"i","type":"IdentPattern"}],"collection":{"ty":{"type":"IntType"},"type":"TypeCollection"},"type":"RngBinding"}],"quant":{"element":"Exists","type":"Quantifier"},"type":"QuantifiedExp"},"type":"ConstraintDecl"},{"exp":{"op":"TupleIndex","type":"BinExp","exp2":{"type":"LiteralInteger","i":2},"exp1":{"args":[],"type":"FunApplExp","exp1":{"ident":"f","type":"IdentExp"}}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"BoolType"},"name":"sat","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"z","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"LTE","type":"BinExp","exp2":{"type":"LiteralInteger","i":22},"exp1":{"exp":{"ident":"a","type":"IdentExp"},"ident":"x","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"ident":"sat","type":"IdentExp"},"type":"ConstraintDecl"},{"exp":{"op":"Implies","type":"BinExp","exp2":{"exp":{"op":"EQ","type":"BinExp","exp2":{"exp":{"ident":"a","type":"IdentExp"},"ident":"x","type":"DotExp"},"exp1":{"ident":"z","type":"IdentExp"}},"type":"ParenExp"},"exp1":{"exp":{"ident":"sat","type":"IdentExp"},"op":"Not","type":"UnaryExp"}},"type":"ConstraintDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"ident":"l","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"l","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"args":[{"exp":{"ident":"k","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"g","type":"IdentExp"}}},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"},{"exp":{"op":"LTE","type":"BinExp","exp2":{"type":"LiteralInteger","i":22},"exp1":{"args":[{"exp":{"ident":"z","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"f","type":"IdentExp"}}},"type":"ConstraintDecl"},{"exp":{"op":"NotEQ","type":"BinExp","exp2":{"exp":{"ident":"a","type":"IdentExp"},"ident":"y","type":"DotExp"},"exp1":{"exp":{"ident":"a","type":"IdentExp"},"ident":"x","type":"DotExp"}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!3 () Int\n  4)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!4))\n(define-fun instanceOfB!2 () Int\n  3)\n(define-fun instanceOfA!1 () Int\n  2)\n(define-fun i!0!6 ((x!1 Int)) Int\n  (ite (= x!1 5) 7720\n    1))\n(define-fun k!5 ((x!1 Int)) Int\n  (ite (= x!1 4) 4\n  (ite (= x!1 3) 3\n  (ite (= x!1 2) 2\n    5))))\n(define-fun i!0 ((x!1 Int)) Int\n  (i!0!6 (k!5 x!1)))\n(define-fun k!4!7 ((x!1 Int)) Any\n  (ite (= x!1 2) (lift-A (mk-A 59 60 (mk-Tuple2 1 true)))\n  (ite (= x!1 3) (lift-B (mk-B true 0 5))\n  (ite (= x!1 5) (lift-A (mk-A 21 7741 (mk-Tuple2 1 true)))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0)))))\n(define-fun k!4 ((x!1 Int)) Any\n  (k!4!7 (k!5 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (x Int)(y Int)(z (Tuple2 Int Bool))))))\n(declare-datatypes () ((B (mk-B (sat Bool)(z Int)(a Ref)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.x: ---\n\n(define-fun A.x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n(define-fun A!x ((this Ref)) Int\n  (x (deref-A this))\n)\n\n; --- getters for A.y: ---\n\n(define-fun A.y ((this Ref)) Int\n  (y (deref-A this))\n)\n\n(define-fun A!y ((this Ref)) Int\n  (y (deref-A this))\n)\n\n; --- getters for A.z: ---\n\n(define-fun A!z ((this Ref)) (Tuple2 Int Bool)\n  (z (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.sat: ---\n\n(define-fun B!sat ((this Ref)) Bool\n  (sat (deref-B this))\n)\n\n; --- getters for B.z: ---\n\n(define-fun B!z ((this Ref)) Int\n  (z (deref-B this))\n)\n\n; --- getters for B.a: ---\n\n(define-fun B!a ((this Ref)) Ref\n  (a (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.f ((this Ref)) (Tuple2 Int Bool)\n  (mk-Tuple2 1 true)\n)\n\n(define-fun A!f ((this Ref)) (Tuple2 Int Bool)\n  (mk-Tuple2 1 true)\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.g ((this Ref)(l Int)) Int\n  (+ l 1)\n)\n\n(define-fun B!g ((this Ref)(l Int)) Int\n  (+ l 1)\n)\n\n(define-fun B.f ((this Ref)(k Int)) Int\n  (+ (B.g this k) 1)\n)\n\n(define-fun B!f ((this Ref)(k Int)) Int\n  (+ (B!g this k) 1)\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A!z this)  (mk-Tuple2 1 true))\n    (and (= (_1 (A!z this) ) 1) (_2 (A!z this) ))\n    (> (A!x this)  20)\n    (exists ((i Int)) (and (> i 0) (= (+ (A!x this)  i) (A!y this) )))\n    (_2 (A!f this ))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (deref-isa-A (B!a this))\n    (<= (A.x (B!a this) ) 22)\n    (B!sat this) \n    (=> (not (B!sat this) ) (= (B!z this)  (A.x (B!a this) )))\n    (<= (B!f this (B!z this) ) 22)\n    (not (= (A.x (B!a this) ) (A.y (B!a this) )))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt2.k":{"typeChecks":true,"model":"\nclass Duration {\n  t1:Int\n  t2:Int\n\n  fun before(other:Duration) : Bool\n  {\n    t2 < other.t1\n  }\n\n  req t1 < t2\n}\n\nclass Event {\n  duration:Duration\n  min:Int\n\n  req duration.t2 - duration.t1 >= min\n}\n\na:Event\n\nb:Event\n\nreq a.min = 10\n\nreq b.min = 20\n\nreq a.duration.before(b.duration)\n\n","name":"testsmt2.k","json2":{"decls":[{"entityToken":"class","ident":"Duration","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"BoolType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t2","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"other","type":"ElementValue"},"t1"]}]},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Duration"],"type":"QualifiedName"}],"type":"Expression"},"name":"other","type":"Param"}],"type":"FunDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"LT",{"element":"t1","type":"ElementValue"},{"element":"t2","type":"ElementValue"}]},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Duration"],"type":"QualifiedName"}],"type":"Expression"},"name":"duration","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"min","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"GTE",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Minus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"duration","type":"ElementValue"},"t2"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"duration","type":"ElementValue"},"t1"]}]},{"element":"min","type":"ElementValue"}]},"type":"ConstraintDecl"}],"extending":[]},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["Event"],"type":"QualifiedName"}],"type":"Expression"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"min"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"b","type":"ElementValue"},"min"]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},20],"type":"Expression"}]},"type":"ConstraintDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"a","type":"ElementValue"},"duration"]},"before"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"b","type":"ElementValue"},"duration"]}],"type":"Expression"}]},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"Duration","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"name":"t1","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"t2","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"BoolType"},"body":[{"exp":{"op":"LT","type":"BinExp","exp2":{"exp":{"ident":"other","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"ident":"t2","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"before","typeParams":[],"params":[{"ty":{"ident":{"names":["Duration"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"other","type":"Param"}],"type":"FunDecl"},{"exp":{"op":"LT","type":"BinExp","exp2":{"ident":"t2","type":"IdentExp"},"exp1":{"ident":"t1","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]},{"entityToken":"class","ident":"Event","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["Duration"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"duration","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"name":"min","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"GTE","type":"BinExp","exp2":{"ident":"min","type":"IdentExp"},"exp1":{"op":"Minus","type":"BinExp","exp2":{"exp":{"ident":"duration","type":"IdentExp"},"ident":"t1","type":"DotExp"},"exp1":{"exp":{"ident":"duration","type":"IdentExp"},"ident":"t2","type":"DotExp"}}},"type":"ConstraintDecl"}],"extending":[]},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"a","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["Event"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"b","modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":10},"exp1":{"exp":{"ident":"a","type":"IdentExp"},"ident":"min","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":20},"exp1":{"exp":{"ident":"b","type":"IdentExp"},"ident":"min","type":"DotExp"}},"type":"ConstraintDecl"},{"exp":{"args":[{"exp":{"exp":{"ident":"b","type":"IdentExp"},"ident":"duration","type":"DotExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"exp":{"ident":"a","type":"IdentExp"},"ident":"duration","type":"DotExp"},"ident":"before","type":"DotExp"}},"type":"ConstraintDecl"}],"annotations":[],"type":"Model","imports":[]},"smtModel":"(define-fun instanceOfDuration!0 () Int\n  2)\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  4)\n(define-fun instanceOfEvent!1 () Int\n  3)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 15) (lift-Duration (mk-Duration 1786 1796))\n  (ite (= x!1 6) (lift-Event (mk-Event 15 10))\n  (ite (= x!1 2) (lift-Duration (mk-Duration 2282 2283))\n  (ite (= x!1 3) (lift-Event (mk-Event 5 (- 8854)))\n  (ite (= x!1 7) (lift-Event (mk-Event 14 20))\n  (ite (= x!1 4) (lift-TopLevelDeclarations (mk-TopLevelDeclarations 6 7))\n  (ite (= x!1 14) (lift-Duration (mk-Duration 1797 1817))\n    (lift-Duration (mk-Duration (- 1) 0))))))))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 4) 4\n  (ite (= x!1 3) 3\n  (ite (= x!1 15) 15\n  (ite (= x!1 5) 5\n  (ite (= x!1 7) 7\n  (ite (= x!1 6) 6\n  (ite (= x!1 14) 14\n    2))))))))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((Duration (mk-Duration (t1 Int)(t2 Int)))))\n(declare-datatypes () ((Event (mk-Event (duration Ref)(min Int)))))\n(declare-datatypes () ((TopLevelDeclarations (mk-TopLevelDeclarations (a Ref)(b Ref)))))\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-Duration (sel-Duration Duration))\n  (lift-Event (sel-Event Event))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-Duration ((this Ref)) Bool\n  (is-lift-Duration (deref this))\n)\n\n(define-fun deref-Duration ((this Ref)) Duration\n  (sel-Duration (deref this))\n)\n\n(define-fun deref-is-Event ((this Ref)) Bool\n  (is-lift-Event (deref this))\n)\n\n(define-fun deref-Event ((this Ref)) Event\n  (sel-Event (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-Duration ((this Ref)) Bool\n  (deref-is-Duration this)\n)\n\n(define-fun deref-isa-Event ((this Ref)) Bool\n  (deref-is-Event this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; -------------------------------\n;   Getters for class Duration:\n; -------------------------------\n\n; --- getters for Duration.t1: ---\n\n(define-fun Duration.t1 ((this Ref)) Int\n  (t1 (deref-Duration this))\n)\n\n(define-fun Duration!t1 ((this Ref)) Int\n  (t1 (deref-Duration this))\n)\n\n; --- getters for Duration.t2: ---\n\n(define-fun Duration.t2 ((this Ref)) Int\n  (t2 (deref-Duration this))\n)\n\n(define-fun Duration!t2 ((this Ref)) Int\n  (t2 (deref-Duration this))\n)\n\n; ----------------------------\n;   Getters for class Event:\n; ----------------------------\n\n; --- getters for Event.duration: ---\n\n(define-fun Event.duration ((this Ref)) Ref\n  (duration (deref-Event this))\n)\n\n(define-fun Event!duration ((this Ref)) Ref\n  (duration (deref-Event this))\n)\n\n; --- getters for Event.min: ---\n\n(define-fun Event.min ((this Ref)) Int\n  (min (deref-Event this))\n)\n\n(define-fun Event!min ((this Ref)) Int\n  (min (deref-Event this))\n)\n\n; -------------------------------------------\n;   Getters for class TopLevelDeclarations:\n; -------------------------------------------\n\n; --- getters for TopLevelDeclarations.a: ---\n\n(define-fun TopLevelDeclarations!a ((this Ref)) Ref\n  (a (deref-TopLevelDeclarations this))\n)\n\n; --- getters for TopLevelDeclarations.b: ---\n\n(define-fun TopLevelDeclarations!b ((this Ref)) Ref\n  (b (deref-TopLevelDeclarations this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; -------------------------------\n;   Methods for class Duration:\n; -------------------------------\n\n(define-fun Duration.before ((this Ref)(other Ref)) Bool\n  (< (Duration.t2 this)  (Duration.t1 other))\n)\n\n(define-fun Duration!before ((this Ref)(other Ref)) Bool\n  (< (Duration!t2 this)  (Duration.t1 other))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; ---------------------------------\n;   Invariant for class Duration:\n; ---------------------------------\n\n(define-fun Duration.inv ((this Ref)) Bool\n  (and\n    (< (Duration!t1 this)  (Duration!t2 this) )\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Duration this) (Duration.inv this))\n))\n\n; ------------------------------\n;   Invariant for class Event:\n; ------------------------------\n\n(define-fun Event.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Duration (Event!duration this))\n    (>= (- (Duration.t2 (Event!duration this) ) (Duration.t1 (Event!duration this) )) (Event!min this) )\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Event this) (Event.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  (and\n    (deref-isa-Event (TopLevelDeclarations!a this))\n    (deref-isa-Event (TopLevelDeclarations!b this))\n    (= (Event.min (TopLevelDeclarations!a this) ) 10)\n    (= (Event.min (TopLevelDeclarations!b this) ) 20)\n    (Duration.before (Event.duration (TopLevelDeclarations!a this) ) (Event.duration (TopLevelDeclarations!b this) ))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfDuration Ref)) (deref-is-Duration instanceOfDuration)))\n(assert (exists ((instanceOfEvent Ref)) (deref-is-Event instanceOfEvent)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt7.k":{"typeChecks":true,"model":"\nclass A {\n  a:Int = 1\n\n  fun f(k:Int) : Int\n  {\n    a + k\n  }\n}\n\nclass B {\n  iA:A\n  b:Int = 2\n\n  fun g(k:Int) : Int\n  {\n    iA.f(iA.a + b + k)\n  }\n}\n\nclass C {\n  iA:A\n  c:Int = 3\n\n  fun h(k:Int) : Int\n  {\n    iA.f(iA.a + c + k)\n  }\n}\n\nclass D {\n  iB:B\n  iC:C\n  d:Int = 4\n\n  req iB.iA = iC.iA\n\n  fun i(k:Int) : Int\n  {\n    iB.iA.a + iB.b + iC.c + d + k\n  }\n}\n\nclass Master {\n  d:D\n\n  fun main : Int\n  {\n    d.iB.iA.f(1) + d.iB.g(2) + d.i(3)\n  }\n  r:Int = main\n\n  req r = 21\n}\n\n","name":"testsmt7.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"element":"k","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"iA","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"b","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iA","type":"ElementValue"},"f"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iA","type":"ElementValue"},"a"]},{"element":"b","type":"ElementValue"}]},{"element":"k","type":"ElementValue"}]}],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"},"name":"iA","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"c","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iA","type":"ElementValue"},"f"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iA","type":"ElementValue"},"a"]},{"element":"c","type":"ElementValue"}]},{"element":"k","type":"ElementValue"}]}],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["B"],"type":"QualifiedName"}],"type":"Expression"},"name":"iB","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["C"],"type":"QualifiedName"}],"type":"Expression"},"name":"iC","modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"d","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},4],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iB","type":"ElementValue"},"iA"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iC","type":"ElementValue"},"iA"]}]},"type":"ConstraintDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iB","type":"ElementValue"},"iA"]},"a"]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iB","type":"ElementValue"},"b"]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"iC","type":"ElementValue"},"c"]}]},{"element":"d","type":"ElementValue"}]},{"element":"k","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"i","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"Master","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["D"],"type":"QualifiedName"}],"type":"Expression"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"d","type":"ElementValue"},"iB"]},"iA"]},"f"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}],"type":"Expression"}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"d","type":"ElementValue"},"iB"]},"g"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"}],"type":"Expression"}]}]},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"type":"Expression","operand":[{"element":"ElementValue","type":"DotExp"},{"element":"d","type":"ElementValue"},"i"]},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},3],"type":"Expression"}],"type":"Expression"}]}]},"type":"ExpressionDecl"}],"ident":"main","typeParams":[],"params":[],"type":"FunDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"r","expr":{"element":"main","type":"ElementValue"},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"r","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},21],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"type":"LiteralInteger","i":1},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"iA","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"type":"LiteralInteger","i":2},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"args":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"exp":{"ident":"iA","type":"IdentExp"},"ident":"a","type":"DotExp"}}},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"iA","type":"IdentExp"},"ident":"f","type":"DotExp"}},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"C","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"iA","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"c","expr":{"type":"LiteralInteger","i":3},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"args":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"c","type":"IdentExp"},"exp1":{"exp":{"ident":"iA","type":"IdentExp"},"ident":"a","type":"DotExp"}}},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"iA","type":"IdentExp"},"ident":"f","type":"DotExp"}},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"D","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["B"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"iB","modifiers":[],"type":"PropertyDecl"},{"ty":{"ident":{"names":["C"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"iC","modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"d","expr":{"type":"LiteralInteger","i":4},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"exp":{"ident":"iC","type":"IdentExp"},"ident":"iA","type":"DotExp"},"exp1":{"exp":{"ident":"iB","type":"IdentExp"},"ident":"iA","type":"DotExp"}},"type":"ConstraintDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"d","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"iC","type":"IdentExp"},"ident":"c","type":"DotExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"exp":{"ident":"iB","type":"IdentExp"},"ident":"b","type":"DotExp"},"exp1":{"exp":{"exp":{"ident":"iB","type":"IdentExp"},"ident":"iA","type":"DotExp"},"ident":"a","type":"DotExp"}}}}},"type":"ExpressionDecl"}],"ident":"i","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"k","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"Master","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"ident":{"names":["D"],"type":"QualifiedName"},"args":[],"type":"IdentType"},"name":"d","modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"args":[{"exp":{"type":"LiteralInteger","i":3},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"ident":"d","type":"IdentExp"},"ident":"i","type":"DotExp"}},"exp1":{"op":"Plus","type":"BinExp","exp2":{"args":[{"exp":{"type":"LiteralInteger","i":2},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"exp":{"ident":"d","type":"IdentExp"},"ident":"iB","type":"DotExp"},"ident":"g","type":"DotExp"}},"exp1":{"args":[{"exp":{"type":"LiteralInteger","i":1},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"exp":{"exp":{"exp":{"ident":"d","type":"IdentExp"},"ident":"iB","type":"DotExp"},"ident":"iA","type":"DotExp"},"ident":"f","type":"DotExp"}}}},"type":"ExpressionDecl"}],"ident":"main","typeParams":[],"params":[],"type":"FunDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"r","expr":{"ident":"main","type":"IdentExp"},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":21},"exp1":{"ident":"r","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfMaster!4 () Int\n  8)\n(define-fun instanceOfTopLevelDeclarations!5 () Int\n  9)\n(define-fun instanceOfD!3 () Int\n  7)\n(define-fun instanceOfC!2 () Int\n  6)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!6))\n(define-fun instanceOfB!1 () Int\n  5)\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!7 ((x!1 Int)) Int\n  (ite (= x!1 9) 9\n  (ite (= x!1 7) 7\n  (ite (= x!1 8) 8\n  (ite (= x!1 11) 11\n  (ite (= x!1 12) 12\n  (ite (= x!1 13) 13\n  (ite (= x!1 0) 0\n  (ite (= x!1 15) 15\n  (ite (= x!1 18) 18\n  (ite (= x!1 14) 14\n  (ite (= x!1 6) 6\n  (ite (= x!1 20) 20\n  (ite (= x!1 10) 10\n  (ite (= x!1 5) 5\n    22)))))))))))))))\n(define-fun k!6!8 ((x!1 Int)) Any\n  (ite (= x!1 12) (lift-B (mk-B 15 2))\n  (ite (= x!1 7) (lift-D (mk-D 12 13 4))\n  (ite (= x!1 22) (lift-C (mk-C 18 3))\n  (ite (= x!1 13) (lift-C (mk-C 15 3))\n  (ite (= x!1 8) (lift-Master (mk-Master 14 21))\n  (ite (= x!1 9) (lift-TopLevelDeclarations TopLevelDeclarations!val!0)\n  (ite (= x!1 6) (lift-C (mk-C 11 3))\n  (ite (= x!1 14) (lift-D (mk-D 20 22 4))\n  (ite (= x!1 20) (lift-B (mk-B 18 2))\n  (ite (= x!1 5) (lift-B (mk-B 10 2))\n    (lift-A (mk-A 1)))))))))))))\n(define-fun k!6 ((x!1 Int)) Any\n  (k!6!8 (k!7 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (iA Ref)(b Int)))))\n(declare-datatypes () ((C (mk-C (iA Ref)(c Int)))))\n(declare-datatypes () ((D (mk-D (iB Ref)(iC Ref)(d Int)))))\n(declare-datatypes () ((Master (mk-Master (d Ref)(r Int)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-C (sel-C C))\n  (lift-D (sel-D D))\n  (lift-Master (sel-Master Master))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-C ((this Ref)) Bool\n  (is-lift-C (deref this))\n)\n\n(define-fun deref-C ((this Ref)) C\n  (sel-C (deref this))\n)\n\n(define-fun deref-is-D ((this Ref)) Bool\n  (is-lift-D (deref this))\n)\n\n(define-fun deref-D ((this Ref)) D\n  (sel-D (deref this))\n)\n\n(define-fun deref-is-Master ((this Ref)) Bool\n  (is-lift-Master (deref this))\n)\n\n(define-fun deref-Master ((this Ref)) Master\n  (sel-Master (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (deref-is-A this)\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-C ((this Ref)) Bool\n  (deref-is-C this)\n)\n\n(define-fun deref-isa-D ((this Ref)) Bool\n  (deref-is-D this)\n)\n\n(define-fun deref-isa-Master ((this Ref)) Bool\n  (deref-is-Master this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A.a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.iA: ---\n\n(define-fun B.iA ((this Ref)) Ref\n  (iA (deref-B this))\n)\n\n(define-fun B!iA ((this Ref)) Ref\n  (iA (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B.b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; ------------------------\n;   Getters for class C:\n; ------------------------\n\n; --- getters for C.iA: ---\n\n(define-fun C.iA ((this Ref)) Ref\n  (iA (deref-C this))\n)\n\n(define-fun C!iA ((this Ref)) Ref\n  (iA (deref-C this))\n)\n\n; --- getters for C.c: ---\n\n(define-fun C.c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n(define-fun C!c ((this Ref)) Int\n  (c (deref-C this))\n)\n\n; ------------------------\n;   Getters for class D:\n; ------------------------\n\n; --- getters for D.iB: ---\n\n(define-fun D.iB ((this Ref)) Ref\n  (iB (deref-D this))\n)\n\n(define-fun D!iB ((this Ref)) Ref\n  (iB (deref-D this))\n)\n\n; --- getters for D.iC: ---\n\n(define-fun D.iC ((this Ref)) Ref\n  (iC (deref-D this))\n)\n\n(define-fun D!iC ((this Ref)) Ref\n  (iC (deref-D this))\n)\n\n; --- getters for D.d: ---\n\n(define-fun D.d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n(define-fun D!d ((this Ref)) Int\n  (d (deref-D this))\n)\n\n; -----------------------------\n;   Getters for class Master:\n; -----------------------------\n\n; --- getters for Master.d: ---\n\n(define-fun Master.d ((this Ref)) Ref\n  (d (deref-Master this))\n)\n\n(define-fun Master!d ((this Ref)) Ref\n  (d (deref-Master this))\n)\n\n; --- getters for Master.r: ---\n\n(define-fun Master!r ((this Ref)) Int\n  (r (deref-Master this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.f ((this Ref)(k Int)) Int\n  (+ (A.a this)  k)\n)\n\n(define-fun A!f ((this Ref)(k Int)) Int\n  (+ (A!a this)  k)\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.g ((this Ref)(k Int)) Int\n  (A.f (B.iA this)  (+ (+ (A.a (B.iA this) ) (B.b this) ) k))\n)\n\n(define-fun B!g ((this Ref)(k Int)) Int\n  (A.f (B!iA this)  (+ (+ (A.a (B!iA this) ) (B!b this) ) k))\n)\n\n; ------------------------\n;   Methods for class C:\n; ------------------------\n\n(define-fun C.h ((this Ref)(k Int)) Int\n  (A.f (C.iA this)  (+ (+ (A.a (C.iA this) ) (C.c this) ) k))\n)\n\n(define-fun C!h ((this Ref)(k Int)) Int\n  (A.f (C!iA this)  (+ (+ (A.a (C!iA this) ) (C!c this) ) k))\n)\n\n; ------------------------\n;   Methods for class D:\n; ------------------------\n\n(define-fun D.i ((this Ref)(k Int)) Int\n  (+ (+ (+ (+ (A.a (B.iA (D.iB this) )) (B.b (D.iB this) )) (C.c (D.iC this) )) (D.d this) ) k)\n)\n\n(define-fun D!i ((this Ref)(k Int)) Int\n  (+ (+ (+ (+ (A.a (B.iA (D!iB this) )) (B.b (D!iB this) )) (C.c (D!iC this) )) (D!d this) ) k)\n)\n\n; -----------------------------\n;   Methods for class Master:\n; -----------------------------\n\n(define-fun Master.main ((this Ref)) Int\n  (+ (+ (A.f (B.iA (D.iB (Master.d this) )) 1) (B.g (D.iB (Master.d this) ) 2)) (D.i (Master.d this)  3))\n)\n\n(define-fun Master!main ((this Ref)) Int\n  (+ (+ (A.f (B.iA (D.iB (Master!d this) )) 1) (B.g (D.iB (Master!d this) ) 2)) (D.i (Master!d this)  3))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A!a this) 1)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (= (B!b this) 2)\n    (deref-isa-A (B!iA this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; --------------------------\n;   Invariant for class C:\n; --------------------------\n\n(define-fun C.inv ((this Ref)) Bool\n  (and\n    (= (C!c this) 3)\n    (deref-isa-A (C!iA this))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-C this) (C.inv this))\n))\n\n; --------------------------\n;   Invariant for class D:\n; --------------------------\n\n(define-fun D.inv ((this Ref)) Bool\n  (and\n    (= (D!d this) 4)\n    (deref-isa-B (D!iB this))\n    (deref-isa-C (D!iC this))\n    (= (B.iA (D!iB this) ) (C.iA (D!iC this) ))\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-D this) (D.inv this))\n))\n\n; -------------------------------\n;   Invariant for class Master:\n; -------------------------------\n\n(define-fun Master.inv ((this Ref)) Bool\n  (and\n    (= (Master!r this) (Master!main this) )\n    (deref-isa-D (Master!d this))\n    (= (Master!r this)  21)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-Master this) (Master.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfC Ref)) (deref-is-C instanceOfC)))\n(assert (exists ((instanceOfD Ref)) (deref-is-D instanceOfD)))\n(assert (exists ((instanceOfMaster Ref)) (deref-is-Master instanceOfMaster)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"testsmt10.k":{"typeChecks":true,"model":"\nclass A {\n  a:Int = 1\n\n  fun f(x:Int) : Int\n  {\n    a + x\n  }\n\n  fun g(x:Int) : Int\n  {\n    k:Int = f(x) + 1\n    a + f(x) + k + 1\n  }\n}\n\nclass B extending A {\n  b:Int = 2\n\n  fun h(x:Int) : Int\n  {\n    k1:Int = a + b\n    k2:Int = k1 + x\n    g(x)\n  }\n  r:Int = h(10)\n\n  req r = 25\n}\n\n","name":"testsmt10.k","json2":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"a","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"element":"x","type":"ElementValue"}]},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"f","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"x","type":"ElementValue"}],"type":"Expression"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"f","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"x","type":"ElementValue"}],"type":"Expression"}]}]},{"element":"k","type":"ElementValue"}]},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},1],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"b","expr":{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},2],"type":"Expression"},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"body":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k1","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"a","type":"ElementValue"},{"element":"b","type":"ElementValue"}]},"modifiers":[],"type":"PropertyDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"k2","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"Plus",{"element":"k1","type":"ElementValue"},{"element":"x","type":"ElementValue"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"g","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"element":"x","type":"ElementValue"}],"type":"Expression"}]},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"name":"x","type":"Param"}],"type":"FunDecl"},{"ty":{"operand":[{"element":"ElementValue","type":"IntType"}],"type":"Expression"},"assignment":false,"name":"r","expr":{"type":"Expression","operand":[{"element":"ElementValue","type":"FunApplExp"},{"element":"h","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"PositionalArgument"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},10],"type":"Expression"}],"type":"Expression"}]},"modifiers":[],"type":"PropertyDecl"},{"exp":{"type":"Expression","operand":[{"element":"ElementValue","type":"BinExp"},"EQ",{"element":"r","type":"ElementValue"},{"operand":[{"element":"ElementValue","type":"IntegerLiteral"},25],"type":"Expression"}]},"type":"ConstraintDecl"}],"extending":[{"operand":[{"element":"ElementValue","type":"IdentType"},{"names":["A"],"type":"QualifiedName"}],"type":"Expression"}]}],"annotations":[],"type":"Model","imports":[]},"json1":{"decls":[{"entityToken":"class","ident":"A","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"a","expr":{"type":"LiteralInteger","i":1},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"exp":{"op":"Plus","type":"BinExp","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"f","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k","expr":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"args":[{"exp":{"ident":"x","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"f","type":"IdentExp"}}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"Plus","type":"BinExp","exp2":{"type":"LiteralInteger","i":1},"exp1":{"op":"Plus","type":"BinExp","exp2":{"ident":"k","type":"IdentExp"},"exp1":{"op":"Plus","type":"BinExp","exp2":{"args":[{"exp":{"ident":"x","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"f","type":"IdentExp"}},"exp1":{"ident":"a","type":"IdentExp"}}}},"type":"ExpressionDecl"}],"ident":"g","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"}],"extending":[]},{"entityToken":"class","ident":"B","typeparams":[],"annotations":[],"type":"EntityDecl","members":[{"ty":{"type":"IntType"},"assignment":false,"name":"b","expr":{"type":"LiteralInteger","i":2},"modifiers":[],"type":"PropertyDecl"},{"spec":[],"ty":{"type":"IntType"},"body":[{"ty":{"type":"IntType"},"assignment":false,"name":"k1","expr":{"op":"Plus","type":"BinExp","exp2":{"ident":"b","type":"IdentExp"},"exp1":{"ident":"a","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"k2","expr":{"op":"Plus","type":"BinExp","exp2":{"ident":"x","type":"IdentExp"},"exp1":{"ident":"k1","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"args":[{"exp":{"ident":"x","type":"IdentExp"},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"g","type":"IdentExp"}},"type":"ExpressionDecl"}],"ident":"h","typeParams":[],"params":[{"ty":{"type":"IntType"},"name":"x","type":"Param"}],"type":"FunDecl"},{"ty":{"type":"IntType"},"assignment":false,"name":"r","expr":{"args":[{"exp":{"type":"LiteralInteger","i":10},"type":"PositionalArgument"}],"type":"FunApplExp","exp1":{"ident":"h","type":"IdentExp"}},"modifiers":[],"type":"PropertyDecl"},{"exp":{"op":"EQ","type":"BinExp","exp2":{"type":"LiteralInteger","i":25},"exp1":{"ident":"r","type":"IdentExp"}},"type":"ConstraintDecl"}],"extending":[{"ident":{"names":["A"],"type":"QualifiedName"},"args":[],"type":"IdentType"}]}],"annotations":[],"type":"Model","imports":[]},"smtModel":";; universe for TopLevelDeclarations:\n;;   TopLevelDeclarations!val!0 \n;; -----------\n;; definitions for universe elements:\n(declare-fun TopLevelDeclarations!val!0 () TopLevelDeclarations)\n;; cardinality constraint:\n(forall ((x TopLevelDeclarations)) (= x TopLevelDeclarations!val!0))\n;; -----------\n(define-fun instanceOfTopLevelDeclarations!2 () Int\n  5)\n(define-fun heap () (Array Int Any)\n  (_ as-array k!3))\n(define-fun instanceOfB!1 () Int\n  4)\n(define-fun instanceOfA!0 () Int\n  0)\n(define-fun k!3!5 ((x!1 Int)) Any\n  (ite (= x!1 0) (lift-A (mk-A 1))\n  (ite (= x!1 4) (lift-B (mk-B 1 2 25))\n    (lift-TopLevelDeclarations TopLevelDeclarations!val!0))))\n(define-fun k!4 ((x!1 Int)) Int\n  (ite (= x!1 4) 4\n  (ite (= x!1 0) 0\n    5)))\n(define-fun k!3 ((x!1 Int)) Any\n  (k!3!5 (k!4 x!1)))","smt":"; ================\n; === Options: ===\n; ================\n\n(set-option :smt.macro-finder true)\n\n; ==================\n; === Datatypes: ===\n; ==================\n\n(define-sort Ref () Int)\n\n(declare-datatypes (T1 T2) ((Tuple2 (mk-Tuple2 (_1 T1)(_2 T2)))))\n(declare-datatypes (T1 T2 T3) ((Tuple3 (mk-Tuple3 (_1 T1)(_2 T2)(_3 T3)))))\n\n(declare-datatypes () ((A (mk-A (a Int)))))\n(declare-datatypes () ((B (mk-B (a Int)(b Int)(r Int)))))\n(declare-sort TopLevelDeclarations) (declare-const mk-TopLevelDeclarations TopLevelDeclarations)\n\n; =============\n; === Heap: ===\n; =============\n\n(declare-datatypes () ((Any\n  (lift-A (sel-A A))\n  (lift-B (sel-B B))\n  (lift-TopLevelDeclarations (sel-TopLevelDeclarations TopLevelDeclarations))\n  null))\n)\n\n(declare-const heap (Array Ref Any))\n\n(define-fun deref ((ref Ref)) Any\n  (select heap ref)\n)\n\n; ==========================================\n; === Class specific is/deref-functions: ===\n; ==========================================\n\n(define-fun deref-is-A ((this Ref)) Bool\n  (is-lift-A (deref this))\n)\n\n(define-fun deref-A ((this Ref)) A\n  (sel-A (deref this))\n)\n\n(define-fun deref-is-B ((this Ref)) Bool\n  (is-lift-B (deref this))\n)\n\n(define-fun deref-B ((this Ref)) B\n  (sel-B (deref this))\n)\n\n(define-fun deref-is-TopLevelDeclarations ((this Ref)) Bool\n  (is-lift-TopLevelDeclarations (deref this))\n)\n\n(define-fun deref-TopLevelDeclarations ((this Ref)) TopLevelDeclarations\n  (sel-TopLevelDeclarations (deref this))\n)\n\n; ======================\n; === Isa-functions: ===\n; ======================\n\n(define-fun deref-isa-A ((this Ref)) Bool\n  (or\n    (deref-is-A this)\n    (deref-is-B this)\n  )\n)\n\n(define-fun deref-isa-B ((this Ref)) Bool\n  (deref-is-B this)\n)\n\n(define-fun deref-isa-TopLevelDeclarations ((this Ref)) Bool\n  (deref-is-TopLevelDeclarations this)\n)\n\n; ================\n; === Getters: ===\n; ================\n\n; ------------------------\n;   Getters for class A:\n; ------------------------\n\n; --- getters for A.a: ---\n\n(define-fun A.a ((this Ref)) Int\n  (ite (deref-is-A this) (a (deref-A this))\n  (a (deref-B this)))\n)\n\n(define-fun A!a ((this Ref)) Int\n  (a (deref-A this))\n)\n\n; ------------------------\n;   Getters for class B:\n; ------------------------\n\n; --- getters for B.a: ---\n\n(define-fun B.a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n(define-fun B!a ((this Ref)) Int\n  (a (deref-B this))\n)\n\n; --- getters for B.b: ---\n\n(define-fun B.b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n(define-fun B!b ((this Ref)) Int\n  (b (deref-B this))\n)\n\n; --- getters for B.r: ---\n\n(define-fun B!r ((this Ref)) Int\n  (r (deref-B this))\n)\n\n; ================\n; === Methods: ===\n; ================\n\n; ------------------------\n;   Methods for class A:\n; ------------------------\n\n(define-fun A.f ((this Ref)(x Int)) Int\n  (+ (A.a this)  x)\n)\n\n(define-fun A!f ((this Ref)(x Int)) Int\n  (+ (A!a this)  x)\n)\n\n(define-fun A.g ((this Ref)(x Int)) Int\n  (let ((k (+ (A.f this x) 1)))\n    (+ (+ (+ (A.a this)  (A.f this x)) k) 1))\n)\n\n(define-fun A!g ((this Ref)(x Int)) Int\n  (let ((k (+ (A!f this x) 1)))\n    (+ (+ (+ (A!a this)  (A!f this x)) k) 1))\n)\n\n; ------------------------\n;   Methods for class B:\n; ------------------------\n\n(define-fun B.f ((this Ref)(x Int)) Int\n  (+ (B.a this)  x)\n)\n\n(define-fun B!f ((this Ref)(x Int)) Int\n  (+ (B!a this)  x)\n)\n\n(define-fun B.g ((this Ref)(x Int)) Int\n  (let ((k (+ (B.f this x) 1)))\n    (+ (+ (+ (B.a this)  (B.f this x)) k) 1))\n)\n\n(define-fun B!g ((this Ref)(x Int)) Int\n  (let ((k (+ (B!f this x) 1)))\n    (+ (+ (+ (B!a this)  (B!f this x)) k) 1))\n)\n\n(define-fun B.h ((this Ref)(x Int)) Int\n  (let ((k1 (+ (B.a this)  (B.b this) )))\n    (let ((k2 (+ k1 x)))\n      (B.g this x)))\n)\n\n(define-fun B!h ((this Ref)(x Int)) Int\n  (let ((k1 (+ (B!a this)  (B!b this) )))\n    (let ((k2 (+ k1 x)))\n      (B!g this x)))\n)\n\n; ===================\n; === Invariants: ===\n; ===================\n\n; --------------------------\n;   Invariant for class A:\n; --------------------------\n\n(define-fun A.inv ((this Ref)) Bool\n  (and\n    (= (A!a this) 1)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-A this) (A.inv this))\n))\n\n; --------------------------\n;   Invariant for class B:\n; --------------------------\n\n(define-fun B.inv ((this Ref)) Bool\n  (and\n    (= (B!a this) 1)\n    (= (B!b this) 2)\n    (= (B!r this) (B!h this 10))\n    (= (B!r this)  25)\n  )\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-B this) (B.inv this))\n))\n\n; ---------------------------------------------\n;   Invariant for class TopLevelDeclarations:\n; ---------------------------------------------\n\n(define-fun TopLevelDeclarations.inv ((this Ref)) Bool\n  true\n)\n\n(assert (forall ((this Ref))\n  (=> (deref-is-TopLevelDeclarations this) (TopLevelDeclarations.inv this))\n))\n\n\n; ====================================\n; === Object existence assertions: ===\n; ====================================\n\n(assert (exists ((instanceOfA Ref)) (deref-is-A instanceOfA)))\n(assert (exists ((instanceOfB Ref)) (deref-is-B instanceOfB)))\n(assert (exists ((instanceOfTopLevelDeclarations Ref)) (deref-is-TopLevelDeclarations instanceOfTopLevelDeclarations)))\n\n"},"inheritance5.k":{"typeChecks":false,"model":"","name":"inheritance5.k","json2":"","json1":"","smtModel":"","smt":""}}